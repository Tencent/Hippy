[/
 / Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:MoveAcceptToken Move accept token requirements]

A move accept token is a [link asio.overview.model.completion_tokens completion
token] for completion signature `void(error_code, typename Protocol::socket)`
or completion signature `void(error_code, typename Protocol::socket::template
rebind_executor<Executor>::other)`, for the type `Protocol` of the acceptor
class template.

[heading Examples]

A free function as a move accept token:

  void accept_handler(
      const asio::error_code& ec, asio::ip::tcp::socket s)
  {
    ...
  }

A move accept token function object:

  struct accept_handler
  {
    ...
    void operator()(
        const asio::error_code& ec, asio::ip::tcp::socket s)
    {
      ...
    }
    ...
  };

A lambda as a move accept token:

  acceptor.async_accept(...,
      [](const asio::error_code& ec, asio::ip::tcp::socket s)
      {
        ...
      });

A non-static class member function adapted to a move accept token using
`std::bind()`:

  void my_class::accept_handler(
      const asio::error_code& ec, asio::ip::tcp::socket socket)
  {
    ...
  }
  ...
  asio::async_accept(...,
      std::bind(&my_class::accept_handler,
        this, std::placeholders::_1,
        std::placeholders::_2));

Using [link asio.reference.use_future use_future] as a move accept token:

  std::future<asio::ip::tcp::socket> f =
    acceptor.async_accept(..., asio::use_future);
  ...
  try
  {
    asio::ip::tcp::socket s = f.get();
    ...
  }
  catch (const system_error& e)
  {
    ...
  }

Using [link asio.reference.use_awaitable use_awaitable] as a move accept token:

  asio::awaitable<void> my_coroutine()
  {
    try
    {
      ...
      asio::ip::tcp::socket s =
        co_await acceptor.async_accept(
            ..., asio::use_awaitable);
      ...
    }
    catch (const system_error& e)
    {
      ...
    }
  }

[endsect]
