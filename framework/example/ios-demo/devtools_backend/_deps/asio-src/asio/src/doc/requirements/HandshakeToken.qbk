[/
 / Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:HandshakeToken SSL handshake token requirements]

A handshake token is a [link asio.overview.model.completion_tokens completion
token] for completion signature `void(error_code)`.

[heading Examples]

A free function as a handshake token:

  void handshake_handler(
      const asio::error_code& ec)
  {
    ...
  }

A handshake token function object:

  struct handshake_handler
  {
    ...
    void operator()(
        const asio::error_code& ec)
    {
      ...
    }
    ...
  };

A lambda as a handshake token:

  ssl_stream.async_handshake(...,
      [](const asio::error_code& ec)
      {
        ...
      });

A non-static class member function adapted to a handshake token using
`std::bind()`:

  void my_class::handshake_handler(
      const asio::error_code& ec)
  {
    ...
  }
  ...
  ssl_stream.async_handshake(...,
      std::bind(&my_class::handshake_handler,
        this, std::placeholders::_1));

A non-static class member function adapted to a handshake token using
`boost::bind()`:

  void my_class::handshake_handler(
      const asio::error_code& ec)
  {
    ...
  }
  ...
  ssl_stream.async_handshake(...,
      boost::bind(&my_class::handshake_handler,
        this, asio::placeholders::error));

Using [link asio.reference.use_future use_future] as a handshake token:

  std::future<void> f = ssl_stream.async_handshake(..., asio::use_future);
  ...
  try
  {
    f.get();
  }
  catch (const system_error& e)
  {
    ...
  }

Using [link asio.reference.use_awaitable use_awaitable] as a handshake token:

  asio::awaitable<void> my_coroutine()
  {
    try
    {
      ...
      co_await ssl_stream.async_handshake(..., asio::use_awaitable);
      ...
    }
    catch (const system_error& e)
    {
      ...
    }
  }

[endsect]
