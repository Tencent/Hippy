name: '[3rd] prebuilt v8'

on:
  workflow_dispatch:
    inputs:
      v8_revision:
        description: 'V8 TAG(Branch) to build'
        type: string
        default: '9.7-lkgr'
        required: true
      build_args:
        description: 'Build args'
        type: string
        default: 'is_component_build=false is_debug=false v8_use_external_startup_data=false is_official_build=true v8_enable_i18n_support=false treat_warnings_as_errors=false symbol_level=0 v8_enable_webassembly=false v8_monolithic=true'
        required: true
      package_tag:
        description: 'Package TAG'
        type: string
        default: '9.7-lkgr'
        required: true
      is_build_for_android:
        description: 'Build for Android platform'
        type: boolean
        default: true
      is_build_for_windows:
        description: 'Build for Windows platform'
        type: boolean
        default: false
      is_build_for_macos:
        description: 'Build for MacOS platform'
        type: boolean
        default: false

jobs:
  android_prebuilt:
    if: github.event.inputs.is_build_for_android == 'true'
    runs-on: [self-hosted, linux, trusted]
    container:
      image: ghcr.io/tencent/android-release:latest # repository name must be lowercase(${{ github.repository_owner }})
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        cpu: [arm, arm64, x86, x64]
        include:
        - cpu: arm
          arch: arm
        - cpu: arm64
          arch: arm64
        - cpu: x86
          arch: x86
        - cpu: x64
          arch: x86_64
    steps:
    - name: Clean up before
      shell: bash
      run: |
        shopt -s dotglob
        rm -rf *
        shopt -u dotglob
    - name: Fetch v8
      run: |
        fetch v8
        cd v8
        git checkout ${{ github.event.inputs.v8_revision }}
    - name: Fetch patch
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
    - name: Apply patch
      if: github.event.inputs.v8_revision != '7.7.229'
      working-directory: ./v8
      continue-on-error: true
      run: |
        git apply ../${{ github.repository }}/.github/workflows/tools/v8_remove_requests_revision.patch
    - name: Sync third_party
      working-directory: ./v8
      run: |
        echo "target_os = ['android']" >> ../.gclient
        gclient sync -D
    - name: Prepare android_ndk
      if: github.event.inputs.v8_revision == '7.7.229'
      working-directory: ./v8
      run: |
        if [ -d third_party/android_tools ]; then
          rm -rf third_party/android_tools
          mkdir third_party/android_tools
          ln -s $ANDROID_NDK_HOME third_party/android_tools/ndk
        fi
        if [ -f third_party/android_ndk/BUILD.gn ]; then
          cp third_party/android_ndk/BUILD.gn $ANDROID_NDK_HOME
        fi
        if [ -d third_party/android_tools -o -f third_party/android_ndk/BUILD.gn ]; then
          rm -rf third_party/android_ndk
          ln -s $ANDROID_NDK_HOME third_party/android_ndk
        fi
    - name: Apply 7.7.229 build patch
      if: github.event.inputs.v8_revision == '7.7.229'
      working-directory: ./v8/build
      run: |
        git apply ../../${{ github.repository }}/.github/workflows/tools/v8_7_7_229_build.patch
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        gn gen out --args="target_os=\"android\" target_cpu=\"${{ matrix.cpu }}\" v8_target_cpu=\"${{ matrix.cpu }}\" android_ndk_root=\"${ANDROID_NDK_HOME}\" android32_ndk_api_level=21 android64_ndk_api_level=21 clang_use_chrome_plugins=false use_thin_lto=false use_custom_libcxx=false ${{ github.event.inputs.build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Generate CMakeLists
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/CMakeLists.txt
        contents: |
              cmake_minimum_required(VERSION 3.4.1)

              project(v8)

              set(V8_LIBRARY_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib PARENT_SCOPE)
              set(V8_LIBRARY_NAME libv8_monolith.a PARENT_SCOPE)

              set(V8_DEFINITIONS)
              list(APPEND V8_DEFINITIONS "-DV8_IMMINENT_DEPRECATION_WARNINGS;")
              list(APPEND V8_DEFINITIONS "-DV8_DEPRECATION_WARNINGS;")
              ${{ (github.event.inputs.v8_revision != '7.7.229' && (matrix.cpu == 'x64' || matrix.cpu == 'arm64')) && 'list(APPEND V8_DEFINITIONS "-DV8_COMPRESS_POINTERS;")' || ''}}
              set(V8_DEFINITIONS ${V8_DEFINITIONS} PARENT_SCOPE)

              set(V8_INCLUDE_DIRECTORIES)
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include;")
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include/v8;")
              set(V8_INCLUDE_DIRECTORIES ${V8_INCLUDE_DIRECTORIES} PARENT_SCOPE)

              set(V8_LINKING_MODE static PARENT_SCOPE)
        write-mode: overwrite
    - name: Generate Readme
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/README.md
        contents: |
              This v8 release is auto generated by Github Action([${{ github.run_id }}][2]).

              _Do NOT modify this release manually._

              Refs: [v8/v8@${{ steps.merge_all_artifact.outputs.head_lite }}][1]

              Branch/Tag: ${{ github.event.inputs.v8_revision }}

              [1]: https://github.com/v8/v8/tree/${{ steps.merge_all_artifact.outputs.head_full }}
              [2]: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        write-mode: overwrite
    - name: Release package
      working-directory: ./v8/out
      run: |
        tar -zcvf android-${{ matrix.arch }}.tgz -C artifact .
    - name: Publish package
      uses: zkqiang/tencent-cos-action@v0.1.0
      with:
        args: upload -r ./v8/out/android-${{ matrix.arch }}.tgz /hippy/third_party/v8/${{ github.event.inputs.package_tag }}/
        secret_id: ${{ secrets.TC_SECRET_ID }}
        secret_key: ${{ secrets.TC_SECRET_KEY }}
        bucket: ${{ secrets.COS_BUCKET }}
        region: ${{ secrets.COS_REGION }}
    - name: Clean up after
      if: ${{ always() }}
      shell: bash
      run: |
        shopt -s dotglob
        rm -rf *
        shopt -u dotglob

  windows_prebuilt:
    if: github.event.inputs.is_build_for_windows == 'true'
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x86, x64, arm64]
    steps:
    - name: Setup GN
      run: |
        Invoke-WebRequest -OutFile depot_tools.zip https://storage.googleapis.com/chrome-infra/depot_tools.zip
        Expand-Archive depot_tools.zip -DestinationPath C:\depot_tools
        rm depot_tools.zip
    - name: Checkout v8
      run: |
        $env:DEPOT_TOOLS_WIN_TOOLCHAIN = 0
        $env:Path += ";C:\depot_tools"
        fetch v8
        cd v8
        git checkout ${{ github.event.inputs.v8_revision }}
        gclient sync -D
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        $env:DEPOT_TOOLS_WIN_TOOLCHAIN = 0
        $env:Path += ";C:\depot_tools"
        gn gen out --args="target_cpu=""""""${{ matrix.arch }}"""""" v8_target_cpu=""""""${{ matrix.arch }}"""""" chrome_pgo_phase=0 ${{ github.event.inputs.build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        $env:Path += ";C:\depot_tools"
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        New-Item -type directory -Path artifact/include/v8, artifact/lib
        Copy-Item obj/v8_monolith.lib artifact/lib
        Copy-Item -r ../include/* artifact/include/v8/
        Copy-Item -r gen/include/* artifact/include/v8/
        Get-ChildItem -Exclude *.h -Recurse -File -Path artifact/include/v8 | Remove-Item
    - name: Generate CMakeLists
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/CMakeLists.txt
        contents: |
              cmake_minimum_required(VERSION 3.4.1)

              project(v8)

              set(V8_LIBRARY_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib PARENT_SCOPE)
              set(V8_LIBRARY_NAME v8_monolith.lib PARENT_SCOPE)

              set(V8_DEFINITIONS)
              list(APPEND V8_DEFINITIONS "-DV8_IMMINENT_DEPRECATION_WARNINGS;")
              list(APPEND V8_DEFINITIONS "-DV8_DEPRECATION_WARNINGS;")
              ${{ (matrix.cpu == 'x64' || matrix.cpu == 'arm64') && 'list(APPEND V8_DEFINITIONS "-DV8_COMPRESS_POINTERS;")' || ''}}
              set(V8_DEFINITIONS ${V8_DEFINITIONS} PARENT_SCOPE)

              set(V8_INCLUDE_DIRECTORIES)
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include;")
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include/v8;")
              set(V8_INCLUDE_DIRECTORIES ${V8_INCLUDE_DIRECTORIES} PARENT_SCOPE)

              set(V8_LINKING_MODE static PARENT_SCOPE)
        write-mode: overwrite
    - name: Generate Readme
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/README.md
        contents: |
              This v8 release is auto generated by Github Action([${{ github.run_id }}][2]).

              _Do NOT modify this release manually._

              Refs: [v8/v8@${{ steps.merge_all_artifact.outputs.head_lite }}][1]

              Branch/Tag: ${{ github.event.inputs.v8_revision }}

              [1]: https://github.com/v8/v8/tree/${{ steps.merge_all_artifact.outputs.head_full }}
              [2]: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        write-mode: overwrite
    - name: Release package
      working-directory: ./v8/out
      run: |
        Compress-Archive -Path artifact\* -DestinationPath windows-${{ matrix.arch }}.zip
    - name: Publish package
      working-directory: ./v8/out
      run: |
        pip install coscmd
        coscmd config -a ${{ secrets.TC_SECRET_ID }} -s ${{ secrets.TC_SECRET_KEY }} -b ${{ secrets.COS_BUCKET }} -r ${{ secrets.COS_REGION }}
        coscmd upload -r windows-${{ matrix.arch }}.zip /hippy/third_party/v8/${{ github.event.inputs.package_tag }}/

  macos_prebuilt:
    if: github.event.inputs.is_build_for_macos == 'true'
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, amd64]
    steps:
    - name: Setup GN
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/opt/depot_tools
        export PATH=/usr/local/opt/depot_tools:$PATH
    - name: Checkout v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        fetch v8
        cd v8
        git checkout ${{ github.event.inputs.v8_revision }}
        gclient sync -D
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        gn gen out --args="target_cpu=\"${{ matrix.cpu }}\" v8_target_cpu=\"${{ matrix.cpu }}\" chrome_pgo_phase=0 ${{ github.event.inputs.build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        export PATH=/usr/local/opt/depot_tools:$PATH
        ninja -C out v8_monolith
    - name: Prepare package
      working-directory: ./v8/out
      run: |
        mkdir -p artifact/include/v8 artifact/lib
        cp obj/libv8_monolith.a artifact/lib
        cp -r ../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Generate CMakeLists
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/CMakeLists.txt
        contents: |
              cmake_minimum_required(VERSION 3.4.1)

              project(v8)

              set(V8_LIBRARY_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib PARENT_SCOPE)
              set(V8_LIBRARY_NAME libv8_monolith.a PARENT_SCOPE)

              set(V8_DEFINITIONS)
              list(APPEND V8_DEFINITIONS "-DV8_IMMINENT_DEPRECATION_WARNINGS;")
              list(APPEND V8_DEFINITIONS "-DV8_DEPRECATION_WARNINGS;")
              ${{ (matrix.cpu == 'x64' || matrix.cpu == 'arm64') && 'list(APPEND V8_DEFINITIONS "-DV8_COMPRESS_POINTERS;")' || ''}}
              set(V8_DEFINITIONS ${V8_DEFINITIONS} PARENT_SCOPE)

              set(V8_INCLUDE_DIRECTORIES)
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include;")
              string(APPEND V8_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include/v8;")
              set(V8_INCLUDE_DIRECTORIES ${V8_INCLUDE_DIRECTORIES} PARENT_SCOPE)

              set(V8_LINKING_MODE static PARENT_SCOPE)
        write-mode: overwrite
    - name: Generate Readme
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/artifact/README.md
        contents: |
              This v8 release is auto generated by Github Action([${{ github.run_id }}][2]).

              _Do NOT modify this release manually._

              Refs: [v8/v8@${{ steps.merge_all_artifact.outputs.head_lite }}][1]

              Branch/Tag: ${{ github.event.inputs.v8_revision }}

              [1]: https://github.com/v8/v8/tree/${{ steps.merge_all_artifact.outputs.head_full }}
              [2]: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        write-mode: overwrite
    - name: Release package
      working-directory: ./v8/out
      run: |
        tar -zcvf macos-${{ matrix.arch }}.tgz -C artifact .
    - name: Publish package
      working-directory: ./v8/out
      run: |
        pip3 install coscmd
        coscmd config -a ${{ secrets.TC_SECRET_ID }} -s ${{ secrets.TC_SECRET_KEY }} -b ${{ secrets.COS_BUCKET }} -r ${{ secrets.COS_REGION }}
        coscmd upload -r macos-${{ matrix.arch }}.tgz /hippy/third_party/v8/${{ github.event.inputs.package_tag }}/

  notification:
    if: ${{ always() }}
    needs: [android_prebuilt, windows_prebuilt, macos_prebuilt]
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      WECHAT_WORK_BOT_WEBHOOK: ${{ secrets.WECHAT_WORK_BOT_WEBHOOK }}
    steps:
    - name: Wechat Work notification
      uses: chf007/action-wechat-work@1.0.5
      with:
        msgtype: markdown
        content: "Github [Action] Notification\n
        > repository: ${{ github.repository }}\n
        > workflow: ${{ github.workflow }}\n
        > result: ${{ needs.pull-request.result == 'success' && '<font color=\"info\">success</font>' || '<font color=\"warning\">failure</font>'}}\n
        > run: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
