group 'com.tencent.flutter_render'
version '1.0-SNAPSHOT'

buildscript {
  ext {
    kotlin_version = '1.6.20'

    THIRD_PARTY_LIBRARY_PATH = "$projectDir.absolutePath/src/main/jni/third_party"
    JNI_LIBRARY_PATH = "$projectDir.absolutePath/libs"

    // 默认不编译C++代码，可以加快编译速度和调试速度(默认关闭LLVM调试器)
    // 如果需要本地调试/修改C++代码，打开这个即可
    enableLocalCmake = true

    if (!enableLocalCmake) {
      def enable = System.getenv("ENABLE_LOCAL_CMAKE")

      println("system env enable local cmake:$enable")

      if (enable == "true") {
        println("system env enable local cmake inner:$enable")
        enableLocalCmake = false
      } else {
        // 系统环境里面没有从local.properties里面取
        def dir = System.getProperty("user.dir")
        def file = new File(dir, 'local.properties')
        Properties properties = new Properties()
        if (file.exists()) {
          properties.load(file.newDataInputStream())
          enableLocalCmake = Boolean.valueOf(properties.getProperty('enableLocalCmake', "false"))
        }
      }
    }
    println("enable local cmake:$enableLocalCmake")
  }


  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.0.4'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.novoda:bintray-release:0.9.2'
  }
}

rootProject.allprojects {
  repositories {
    mavenCentral()
    google()
    jcenter()
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def v8Release = "official-release"
def v8Debug = "official-release"
if (V8_TAG == "latest") {
  v8Release = v8Debug
} else if (project.hasProperty('V8_RELEASE')) {
  v8Release = V8_RELEASE
  v8Debug = V8_RELEASE
}

android {
  compileSdkVersion 28
  android.ndkVersion "21.4.7075529"

  defaultConfig {
    minSdkVersion 21

    if (enableLocalCmake) {
        externalNativeBuild {
            cmake {
               cppFlags "-std=c++17"
               arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_STL=c++_shared"
            }
        }
    }

  }


  buildTypes {
    profile {
      minifyEnabled false
    }
    release {
      minifyEnabled true
    }
    debug {
      minifyEnabled false
      jniDebuggable true
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }


  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main {
      if (!enableLocalCmake) {
        jniLibs.srcDirs = ['libs']
      }
    }
  }

  if (enableLocalCmake) {
    externalNativeBuild {
      cmake {
        version "3.10.2"
        path "../core/CMakeLists.txt"
      }
    }
  }

  lintOptions {
    disable 'InvalidPackage'
  }

}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task buildSo(type: Copy) {
  println("config local cmake:$enableLocalCmake, buildDir:$buildDir/intermediates/cmake/release/obj/")

  copy {
    from "$buildDir/intermediates/cmake/release/obj/"  // 调用 from 方法
    into 'libs/'  // 调用 into 方法
  }

  println("$projectDir.absolutePath/src/main/jni/third_party/v8/$V8_TAG/$v8Release/libs/armeabi-v7a/libc++_shared.so")
  copy {
    from "$projectDir.absolutePath/src/main/jni/third_party/v8/$V8_TAG/$v8Release/libs/armeabi-v7a/libc++_shared.so"
    into 'libs/armeabi-v7a/'
  }

  println("$projectDir.absolutePath/src/main/jni/third_party/v8/$V8_TAG/$v8Release/libs/arm64-v8a/libc++_shared.so")
  copy {
    from "$projectDir.absolutePath/src/main/jni/third_party/v8/$V8_TAG/$v8Release/libs/arm64-v8a/libc++_shared.so"
    into 'libs/arm64-v8a/'
  }
}
