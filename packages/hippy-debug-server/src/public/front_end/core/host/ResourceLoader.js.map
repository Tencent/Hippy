{"version":3,"file":"ResourceLoader.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/ResourceLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {LoadNetworkResourceResult} from './InspectorFrontendHostAPI.js'; // eslint-disable-line no-unused-vars\n\nconst UIStrings = {\n  /**\n  *@description Name of an error category used in error messages\n  */\n  systemError: 'System error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  connectionError: 'Connection error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  certificateError: 'Certificate error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  httpError: 'HTTP error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  cacheError: 'Cache error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  signedExchangeError: 'Signed Exchange error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  ftpError: 'FTP error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  certificateManagerError: 'Certificate manager error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  dnsResolverError: 'DNS resolver error',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  unknownError: 'Unknown error',\n  /**\n  *@description Phrase used in error messages that carry a network error name\n  *@example {404} PH1\n  *@example {net::ERR_INSUFFICIENT_RESOURCES} PH2\n  */\n  httpErrorStatusCodeSS: 'HTTP error: status code {PH1}, {PH2}',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  invalidUrl: 'Invalid URL',\n  /**\n  *@description Name of an error category used in error messages\n  */\n  decodingDataUrlFailed: 'Decoding Data URL failed',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/host/ResourceLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const ResourceLoader = {};\n\nlet _lastStreamId = 0;\n\nconst _boundStreams: {\n  [x: number]: Common.StringOutputStream.OutputStream,\n} = {};\n\nconst _bindOutputStream = function(stream: Common.StringOutputStream.OutputStream): number {\n  _boundStreams[++_lastStreamId] = stream;\n  return _lastStreamId;\n};\n\nconst _discardOutputStream = function(id: number): void {\n  _boundStreams[id].close();\n  delete _boundStreams[id];\n};\n\nexport const streamWrite = function(id: number, chunk: string): void {\n  _boundStreams[id].write(chunk);\n};\nexport interface LoadErrorDescription {\n  statusCode: number;\n  netError?: number;\n  netErrorName?: string;\n  urlValid?: boolean;\n  message?: string;\n}\n\nexport let load = function(\n    url: string, headers: {\n      [x: string]: string,\n    }|null,\n    callback: (\n        arg0: boolean, arg1: {\n          [x: string]: string,\n        },\n        arg2: string, arg3: LoadErrorDescription) => void): void {\n  const stream = new Common.StringOutputStream.StringOutputStream();\n  loadAsStream(url, headers, stream, mycallback);\n\n  function mycallback(\n      success: boolean, headers: {\n        [x: string]: string,\n      },\n      errorDescription: LoadErrorDescription): void {\n    callback(success, headers, stream.data(), errorDescription);\n  }\n};\n\nexport function setLoadForTest(\n    newLoad: (\n        arg0: string, arg1: {\n          [x: string]: string,\n        }|null,\n        arg2: (\n            arg0: boolean, arg1: {\n              [x: string]: string,\n            },\n            arg2: string, arg3: LoadErrorDescription) => void) => void): void {\n  load = newLoad;\n}\n\nfunction getNetErrorCategory(netError: number): string {\n  if (netError > -100) {\n    return i18nString(UIStrings.systemError);\n  }\n  if (netError > -200) {\n    return i18nString(UIStrings.connectionError);\n  }\n  if (netError > -300) {\n    return i18nString(UIStrings.certificateError);\n  }\n  if (netError > -400) {\n    return i18nString(UIStrings.httpError);\n  }\n  if (netError > -500) {\n    return i18nString(UIStrings.cacheError);\n  }\n  if (netError > -600) {\n    return i18nString(UIStrings.signedExchangeError);\n  }\n  if (netError > -700) {\n    return i18nString(UIStrings.ftpError);\n  }\n  if (netError > -800) {\n    return i18nString(UIStrings.certificateManagerError);\n  }\n  if (netError > -900) {\n    return i18nString(UIStrings.dnsResolverError);\n  }\n  return i18nString(UIStrings.unknownError);\n}\n\nfunction isHTTPError(netError: number): boolean {\n  return netError <= -300 && netError > -400;\n}\n\nexport function netErrorToMessage(\n    netError: number|undefined, httpStatusCode: number|undefined, netErrorName: string|undefined): string|null {\n  if (netError === undefined || netErrorName === undefined) {\n    return null;\n  }\n  if (netError !== 0) {\n    if (isHTTPError(netError)) {\n      return i18nString(UIStrings.httpErrorStatusCodeSS, {PH1: httpStatusCode, PH2: netErrorName});\n    }\n    const errorCategory = getNetErrorCategory(netError);\n    // We don't localize here, as `errorCategory` is already localized,\n    // and `netErrorName` is an error code like 'net::ERR_CERT_AUTHORITY_INVALID'.\n    return `${errorCategory}: ${netErrorName}`;\n  }\n  return null;\n}\n\nfunction createErrorMessageFromResponse(response: LoadNetworkResourceResult): {\n  success: boolean,\n  description: LoadErrorDescription,\n} {\n  const {statusCode, netError, netErrorName, urlValid, messageOverride} = response;\n  let message = '';\n  const success = statusCode >= 200 && statusCode < 300;\n  if (typeof messageOverride === 'string') {\n    message = messageOverride;\n  } else if (!success) {\n    if (typeof netError === 'undefined') {\n      if (urlValid === false) {\n        message = i18nString(UIStrings.invalidUrl);\n      } else {\n        message = i18nString(UIStrings.unknownError);\n      }\n    } else {\n      const maybeMessage = netErrorToMessage(netError, statusCode, netErrorName);\n      if (maybeMessage) {\n        message = maybeMessage;\n      }\n    }\n  }\n  console.assert(success === (message.length === 0));\n  return {success, description: {statusCode, netError, netErrorName, urlValid, message}};\n}\n\nconst loadXHR = (url: string): Promise<string> => {\n  return new Promise((successCallback, failureCallback) => {\n    function onReadyStateChanged(): void {\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (xhr.status !== 200) {\n        xhr.onreadystatechange = null;\n        failureCallback(new Error(String(xhr.status)));\n        return;\n      }\n      xhr.onreadystatechange = null;\n      successCallback(xhr.responseText);\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.withCredentials = false;\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = onReadyStateChanged;\n    xhr.send(null);\n  });\n};\n\nexport const loadAsStream = function(\n    url: string, headers: {\n      [x: string]: string,\n    }|null,\n    stream: Common.StringOutputStream.OutputStream,\n    callback?:\n        ((arg0: boolean, arg1: {\n           [x: string]: string,\n         },\n          arg2: LoadErrorDescription) => void)): void {\n  const streamId = _bindOutputStream(stream);\n  const parsedURL = new Common.ParsedURL.ParsedURL(url);\n  if (parsedURL.isDataURL()) {\n    loadXHR(url).then(dataURLDecodeSuccessful).catch(dataURLDecodeFailed);\n    return;\n  }\n\n  const rawHeaders = [];\n  if (headers) {\n    for (const key in headers) {\n      rawHeaders.push(key + ': ' + headers[key]);\n    }\n  }\n  InspectorFrontendHostInstance.loadNetworkResource(url, rawHeaders.join('\\r\\n'), streamId, finishedCallback);\n\n  function finishedCallback(response: LoadNetworkResourceResult): void {\n    if (callback) {\n      const {success, description} = createErrorMessageFromResponse(response);\n      callback(success, response.headers || {}, description);\n    }\n    _discardOutputStream(streamId);\n  }\n\n  function dataURLDecodeSuccessful(text: string): void {\n    streamWrite(streamId, text);\n    finishedCallback(({statusCode: 200} as LoadNetworkResourceResult));\n  }\n\n  function dataURLDecodeFailed(_xhrStatus: Error): void {\n    const messageOverride: string = i18nString(UIStrings.decodingDataUrlFailed);\n    finishedCallback(({statusCode: 404, messageOverride} as LoadNetworkResourceResult));\n  }\n};\n"]}