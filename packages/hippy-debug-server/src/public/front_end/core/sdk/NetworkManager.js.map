{"version":3,"file":"NetworkManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/NetworkManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as TextUtils from '../../models/text_utils/text_utils.js'; // eslint-disable-line no-unused-vars\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Cookie} from './Cookie.js';\nimport type {BlockedCookieWithReason, ContentData, ExtraRequestInfo, ExtraResponseInfo, MIME_TYPE, NameValue, WebBundleInfo, WebBundleInnerRequestInfo} from './NetworkRequest.js';\nimport {Events as NetworkRequestEvents, NetworkRequest} from './NetworkRequest.js';  // eslint-disable-line no-unused-vars\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate that network throttling is disabled\n  */\n  noThrottling: 'No throttling',\n  /**\n  *@description Text to indicate the network connectivity is offline\n  */\n  offline: 'Offline',\n  /**\n  *@description Text in Network Manager\n  */\n  slowG: 'Slow 3G',\n  /**\n  *@description Text in Network Manager\n  */\n  fastG: 'Fast 3G',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  */\n  setcookieHeaderIsIgnoredIn:\n      'Set-Cookie header is ignored in response from url: {PH1}. Cookie length should be less than or equal to 4096 characters.',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  */\n  requestWasBlockedByDevtoolsS: 'Request was blocked by DevTools: \"{PH1}\"',\n  /**\n  *@description Text in Network Manager\n  *@example {https://example.com} PH1\n  *@example {application} PH2\n  */\n  crossoriginReadBlockingCorb:\n      'Cross-Origin Read Blocking (CORB) blocked cross-origin response {PH1} with MIME type {PH2}. See https://www.chromestatus.com/feature/5629709824032768 for more details.',\n  /**\n  *@description Message in Network Manager\n  *@example {XHR} PH1\n  *@example {GET} PH2\n  *@example {https://example.com} PH3\n  */\n  sFailedLoadingSS: '{PH1} failed loading: {PH2} \"{PH3}\".',\n  /**\n  *@description Message in Network Manager\n  *@example {XHR} PH1\n  *@example {GET} PH2\n  *@example {https://example.com} PH3\n  */\n  sFinishedLoadingSS: '{PH1} finished loading: {PH2} \"{PH3}\".',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst requestToManagerMap = new WeakMap<NetworkRequest, NetworkManager>();\n\nconst CONNECTION_TYPES = new Map([\n  ['2g', Protocol.Network.ConnectionType.Cellular2g],\n  ['3g', Protocol.Network.ConnectionType.Cellular3g],\n  ['4g', Protocol.Network.ConnectionType.Cellular4g],\n  ['bluetooth', Protocol.Network.ConnectionType.Bluetooth],\n  ['wifi', Protocol.Network.ConnectionType.Wifi],\n  ['wimax', Protocol.Network.ConnectionType.Wimax],\n]);\n\nexport class NetworkManager extends SDKModel {\n  _dispatcher: NetworkDispatcher;\n  _networkAgent: ProtocolProxyApi.NetworkApi;\n  _bypassServiceWorkerSetting: Common.Settings.Setting<boolean>;\n\n  constructor(target: Target) {\n    super(target);\n    this._dispatcher = new NetworkDispatcher(this);\n    this._networkAgent = target.networkAgent();\n    target.registerNetworkDispatcher(this._dispatcher);\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      this._networkAgent.invoke_setCacheDisabled({cacheDisabled: true});\n    }\n\n    this._networkAgent.invoke_enable({maxPostDataSize: MAX_EAGER_POST_REQUEST_BODY_LENGTH});\n    this._networkAgent.invoke_setAttachDebugStack({enabled: true});\n\n    this._bypassServiceWorkerSetting = Common.Settings.Settings.instance().createSetting('bypassServiceWorker', false);\n    if (this._bypassServiceWorkerSetting.get()) {\n      this._bypassServiceWorkerChanged();\n    }\n    this._bypassServiceWorkerSetting.addChangeListener(this._bypassServiceWorkerChanged, this);\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .addChangeListener(this._cacheDisabledSettingChanged, this);\n  }\n\n  static forRequest(request: NetworkRequest): NetworkManager|null {\n    return requestToManagerMap.get(request) || null;\n  }\n\n  static canReplayRequest(request: NetworkRequest): boolean {\n    return Boolean(requestToManagerMap.get(request)) &&\n        request.resourceType() === Common.ResourceType.resourceTypes.XHR;\n  }\n\n  static replayRequest(request: NetworkRequest): void {\n    const manager = requestToManagerMap.get(request);\n    if (!manager) {\n      return;\n    }\n    manager._networkAgent.invoke_replayXHR({requestId: request.requestId()});\n  }\n\n  static async searchInRequest(request: NetworkRequest, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return [];\n    }\n    const response = await manager._networkAgent.invoke_searchInResponseBody(\n        {requestId: request.requestId(), query: query, caseSensitive: caseSensitive, isRegex: isRegex});\n    return response.result || [];\n  }\n\n  static async requestContentData(request: NetworkRequest): Promise<ContentData> {\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return {error: 'Content for WebSockets is currently not supported', content: null, encoded: false};\n    }\n    if (!request.finished) {\n      await request.once(NetworkRequestEvents.FinishedLoading);\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request', content: null, encoded: false};\n    }\n    const response = await manager._networkAgent.invoke_getResponseBody({requestId: request.requestId()});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n\n  static async requestPostData(request: NetworkRequest): Promise<string|null> {\n    const manager = NetworkManager.forRequest(request);\n    if (manager) {\n      try {\n        const {postData} =\n            await manager._networkAgent.invoke_getRequestPostData({requestId: request.backendRequestId()});\n        return postData;\n      } catch (e) {\n        return e.message;\n      }\n    }\n    console.error('No network manager for request');\n    return null;\n  }\n\n  static _connectionType(conditions: Conditions): Protocol.Network.ConnectionType {\n    if (!conditions.download && !conditions.upload) {\n      return Protocol.Network.ConnectionType.None;\n    }\n    const title =\n        typeof conditions.title === 'function' ? conditions.title().toLowerCase() : conditions.title.toLowerCase();\n    for (const [name, protocolType] of CONNECTION_TYPES) {\n      if (title.includes(name)) {\n        return protocolType;\n      }\n    }\n    return Protocol.Network.ConnectionType.Other;\n  }\n\n  static lowercaseHeaders(headers: {\n    [x: string]: string,\n  }): {\n    [x: string]: string,\n  } {\n    const newHeaders: {\n      [x: string]: string,\n    } = {};\n    for (const headerName in headers) {\n      newHeaders[headerName.toLowerCase()] = headers[headerName];\n    }\n    return newHeaders;\n  }\n\n  requestForURL(url: string): NetworkRequest|null {\n    return this._dispatcher.requestForURL(url);\n  }\n\n  _cacheDisabledSettingChanged(event: Common.EventTarget.EventTargetEvent): void {\n    const enabled = (event.data as boolean);\n    this._networkAgent.invoke_setCacheDisabled({cacheDisabled: enabled});\n  }\n\n  dispose(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .removeChangeListener(this._cacheDisabledSettingChanged, this);\n  }\n\n  _bypassServiceWorkerChanged(): void {\n    this._networkAgent.invoke_setBypassServiceWorker({bypass: this._bypassServiceWorkerSetting.get()});\n  }\n\n  async getSecurityIsolationStatus(frameId: string): Promise<Protocol.Network.SecurityIsolationStatus|null> {\n    const result = await this._networkAgent.invoke_getSecurityIsolationStatus({frameId});\n    if (result.getError()) {\n      return null;\n    }\n    return result.status;\n  }\n\n  async loadNetworkResource(frameId: string, url: string, options: Protocol.Network.LoadNetworkResourceOptions):\n      Promise<Protocol.Network.LoadNetworkResourcePageResult> {\n    const result = await this._networkAgent.invoke_loadNetworkResource({frameId, url, options});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return result.resource;\n  }\n\n  clearRequests(): void {\n    this._dispatcher.clearRequests();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RequestStarted = 'RequestStarted',\n  RequestUpdated = 'RequestUpdated',\n  RequestFinished = 'RequestFinished',\n  RequestUpdateDropped = 'RequestUpdateDropped',\n  ResponseReceived = 'ResponseReceived',\n  MessageGenerated = 'MessageGenerated',\n  RequestRedirected = 'RequestRedirected',\n  LoadingFinished = 'LoadingFinished',\n}\n\n\nexport const NoThrottlingConditions: Conditions = {\n  title: i18nLazyString(UIStrings.noThrottling),\n  download: -1,\n  upload: -1,\n  latency: 0,\n};\n\nexport const OfflineConditions: Conditions = {\n  title: i18nLazyString(UIStrings.offline),\n  download: 0,\n  upload: 0,\n  latency: 0,\n};\n\nexport const Slow3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.slowG),\n  download: 500 * 1000 / 8 * .8,\n  upload: 500 * 1000 / 8 * .8,\n  latency: 400 * 5,\n};\n\nexport const Fast3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fastG),\n  download: 1.6 * 1000 * 1000 / 8 * .9,\n  upload: 750 * 1000 / 8 * .9,\n  latency: 150 * 3.75,\n};\n\nconst MAX_EAGER_POST_REQUEST_BODY_LENGTH = 64 * 1024;  // bytes\n\nexport class NetworkDispatcher implements ProtocolProxyApi.NetworkDispatcher {\n  _manager: NetworkManager;\n  private requestsById: Map<string, NetworkRequest>;\n  private requestsByURL: Map<string, NetworkRequest>;\n  _requestIdToExtraInfoBuilder: Map<string, ExtraInfoBuilder>;\n  _requestIdToTrustTokenEvent: Map<string, Protocol.Network.TrustTokenOperationDoneEvent>;\n  constructor(manager: NetworkManager) {\n    this._manager = manager;\n    this.requestsById = new Map();\n    this.requestsByURL = new Map();\n    this._requestIdToExtraInfoBuilder = new Map();\n    /**\n     * In case of an early abort or a cache hit, the Trust Token done event is\n     * reported before the request itself is created in `requestWillBeSent`.\n     * This causes the event to be lost as no `NetworkRequest` instance has been\n     * created yet.\n     * This map caches the events temporarliy and populates the NetworKRequest\n     * once it is created in `requestWillBeSent`.\n     */\n    this._requestIdToTrustTokenEvent = new Map();\n  }\n\n  _headersMapToHeadersArray(headersMap: Protocol.Network.Headers): NameValue[] {\n    const result = [];\n    for (const name in headersMap) {\n      const values = headersMap[name].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        result.push({name: name, value: values[i]});\n      }\n    }\n    return result;\n  }\n\n  _updateNetworkRequestWithRequest(networkRequest: NetworkRequest, request: Protocol.Network.Request): void {\n    networkRequest.requestMethod = request.method;\n    networkRequest.setRequestHeaders(this._headersMapToHeadersArray(request.headers));\n    networkRequest.setRequestFormData(Boolean(request.hasPostData), request.postData || null);\n    networkRequest.setInitialPriority(request.initialPriority);\n    networkRequest.mixedContentType = request.mixedContentType || Protocol.Security.MixedContentType.None;\n    networkRequest.setReferrerPolicy(request.referrerPolicy);\n  }\n\n  _updateNetworkRequestWithResponse(networkRequest: NetworkRequest, response: Protocol.Network.Response): void {\n    if (response.url && networkRequest.url() !== response.url) {\n      networkRequest.setUrl(response.url);\n    }\n    networkRequest.mimeType = (response.mimeType as MIME_TYPE);\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    if (!networkRequest.hasExtraResponseInfo()) {\n      networkRequest.responseHeaders = this._headersMapToHeadersArray(response.headers);\n    }\n\n    if (response.encodedDataLength >= 0) {\n      networkRequest.setTransferSize(response.encodedDataLength);\n    }\n\n    if (response.requestHeaders && !networkRequest.hasExtraRequestInfo()) {\n      // TODO(http://crbug.com/1004979): Stop using response.requestHeaders and\n      //   response.requestHeadersText once shared workers\n      //   emit Network.*ExtraInfo events for their network requests.\n      networkRequest.setRequestHeaders(this._headersMapToHeadersArray(response.requestHeaders));\n      networkRequest.setRequestHeadersText(response.requestHeadersText || '');\n    }\n\n    networkRequest.connectionReused = response.connectionReused;\n    networkRequest.connectionId = String(response.connectionId);\n    if (response.remoteIPAddress) {\n      networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);\n    }\n\n    if (response.fromServiceWorker) {\n      networkRequest.fetchedViaServiceWorker = true;\n    }\n\n    if (response.fromDiskCache) {\n      networkRequest.setFromDiskCache();\n    }\n\n    if (response.fromPrefetchCache) {\n      networkRequest.setFromPrefetchCache();\n    }\n\n    if (response.cacheStorageCacheName) {\n      networkRequest.setResponseCacheStorageCacheName(response.cacheStorageCacheName);\n    }\n\n    if (response.responseTime) {\n      networkRequest.setResponseRetrievalTime(new Date(response.responseTime));\n    }\n\n    networkRequest.timing = response.timing;\n\n    networkRequest.protocol = response.protocol || '';\n\n    if (response.serviceWorkerResponseSource) {\n      networkRequest.setServiceWorkerResponseSource(response.serviceWorkerResponseSource);\n    }\n\n    networkRequest.setSecurityState(response.securityState);\n\n    if (response.securityDetails) {\n      networkRequest.setSecurityDetails(response.securityDetails);\n    }\n\n    const newResourceType = Common.ResourceType.ResourceType.fromMimeTypeOverride(networkRequest.mimeType);\n    if (newResourceType) {\n      networkRequest.setResourceType(newResourceType);\n    }\n  }\n\n  requestForId(url: string): NetworkRequest|null {\n    return this.requestsById.get(url) || null;\n  }\n\n  requestForURL(url: string): NetworkRequest|null {\n    return this.requestsByURL.get(url) || null;\n  }\n\n  resourceChangedPriority({requestId, newPriority}: Protocol.Network.ResourceChangedPriorityEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (networkRequest) {\n      networkRequest.setPriority(newPriority);\n    }\n  }\n\n  signedExchangeReceived({requestId, info}: Protocol.Network.SignedExchangeReceivedEvent): void {\n    // While loading a signed exchange, a signedExchangeReceived event is sent\n    // between two requestWillBeSent events.\n    // 1. The first requestWillBeSent is sent while starting the navigation (or\n    //    prefetching).\n    // 2. This signedExchangeReceived event is sent when the browser detects the\n    //    signed exchange.\n    // 3. The second requestWillBeSent is sent with the generated redirect\n    //    response and a new redirected request which URL is the inner request\n    //    URL of the signed exchange.\n    let networkRequest = this.requestsById.get(requestId);\n    // |requestId| is available only for navigation requests. If the request was\n    // sent from a renderer process for prefetching, it is not available. In the\n    // case, need to fallback to look for the URL.\n    // TODO(crbug/841076): Sends the request ID of prefetching to the browser\n    // process and DevTools to find the matching request.\n    if (!networkRequest) {\n      networkRequest = this.requestsByURL.get(info.outerResponse.url);\n      if (!networkRequest) {\n        return;\n      }\n    }\n    networkRequest.setSignedExchangeInfo(info);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.SignedExchange);\n\n    this._updateNetworkRequestWithResponse(networkRequest, info.outerResponse);\n    this._updateNetworkRequest(networkRequest);\n    this._manager.dispatchEventToListeners(\n        Events.ResponseReceived, {request: networkRequest, response: info.outerResponse});\n  }\n\n  requestWillBeSent(\n      {requestId, loaderId, documentURL, request, timestamp, wallTime, initiator, redirectResponse, type, frameId}:\n          Protocol.Network.RequestWillBeSentEvent): void {\n    let networkRequest = this.requestsById.get(requestId);\n    if (networkRequest) {\n      // FIXME: move this check to the backend.\n      if (!redirectResponse) {\n        return;\n      }\n      // If signedExchangeReceived event has already been sent for the request,\n      // ignores the internally generated |redirectResponse|. The\n      // |outerResponse| of SignedExchangeInfo was set to |networkRequest| in\n      // signedExchangeReceived().\n      if (!networkRequest.signedExchangeInfo()) {\n        this.responseReceived({\n          requestId,\n          loaderId,\n          timestamp,\n          type: type || Protocol.Network.ResourceType.Other,\n          response: redirectResponse,\n          frameId,\n        });\n      }\n      networkRequest = this._appendRedirect(requestId, timestamp, request.url);\n      this._manager.dispatchEventToListeners(Events.RequestRedirected, networkRequest);\n    } else {\n      networkRequest =\n          this._createNetworkRequest(requestId, frameId || '', loaderId, request.url, documentURL, initiator);\n    }\n    networkRequest.hasNetworkData = true;\n    this._updateNetworkRequestWithRequest(networkRequest, request);\n    networkRequest.setIssueTime(timestamp, wallTime);\n    networkRequest.setResourceType(\n        type ? Common.ResourceType.resourceTypes[type] : Common.ResourceType.resourceTypes.Other);\n    if (request.trustTokenParams) {\n      networkRequest.setTrustTokenParams(request.trustTokenParams);\n    }\n    const maybeTrustTokenEvent = this._requestIdToTrustTokenEvent.get(requestId);\n    if (maybeTrustTokenEvent) {\n      networkRequest.setTrustTokenOperationDoneEvent(maybeTrustTokenEvent);\n      this._requestIdToTrustTokenEvent.delete(requestId);\n    }\n\n    this._getExtraInfoBuilder(requestId).addRequest(networkRequest);\n\n    this._startNetworkRequest(networkRequest, request);\n  }\n\n  requestServedFromCache({requestId}: Protocol.Network.RequestServedFromCacheEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.setFromMemoryCache();\n  }\n\n  responseReceived({requestId, loaderId, timestamp, type, response, frameId}: Protocol.Network.ResponseReceivedEvent):\n      void {\n    const networkRequest = this.requestsById.get(requestId);\n    const lowercaseHeaders = NetworkManager.lowercaseHeaders(response.headers);\n    if (!networkRequest) {\n      const lastModifiedHeader = lowercaseHeaders['last-modified'];\n      // We missed the requestWillBeSent.\n      const eventData: RequestUpdateDroppedEventData = {\n        url: response.url,\n        frameId: frameId || '',\n        loaderId: loaderId,\n        resourceType: type,\n        mimeType: response.mimeType,\n        lastModified: lastModifiedHeader ? new Date(lastModifiedHeader) : null,\n      };\n      this._manager.dispatchEventToListeners(Events.RequestUpdateDropped, eventData);\n      return;\n    }\n\n    networkRequest.responseReceivedTime = timestamp;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[type]);\n\n    // net::ParsedCookie::kMaxCookieSize = 4096 (net/cookies/parsed_cookie.h)\n    if ('set-cookie' in lowercaseHeaders && lowercaseHeaders['set-cookie'].length > 4096) {\n      const values = lowercaseHeaders['set-cookie'].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        if (values[i].length <= 4096) {\n          continue;\n        }\n        const message = i18nString(UIStrings.setcookieHeaderIsIgnoredIn, {PH1: response.url});\n        this._manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n\n    this._updateNetworkRequestWithResponse(networkRequest, response);\n\n    this._updateNetworkRequest(networkRequest);\n    this._manager.dispatchEventToListeners(Events.ResponseReceived, {request: networkRequest, response});\n  }\n\n  dataReceived({requestId, timestamp, dataLength, encodedDataLength}: Protocol.Network.DataReceivedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this._maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.resourceSize += dataLength;\n    if (encodedDataLength !== -1) {\n      networkRequest.increaseTransferSize(encodedDataLength);\n    }\n    networkRequest.endTime = timestamp;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  loadingFinished({requestId, timestamp: finishTime, encodedDataLength, shouldReportCorbBlocking}:\n                      Protocol.Network.LoadingFinishedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this._maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    this._getExtraInfoBuilder(requestId).finished();\n    this._finishNetworkRequest(networkRequest, finishTime, encodedDataLength, shouldReportCorbBlocking);\n    this._manager.dispatchEventToListeners(Events.LoadingFinished, networkRequest);\n  }\n\n  loadingFailed({\n    requestId,\n    timestamp: time,\n    type: resourceType,\n    errorText: localizedDescription,\n    canceled,\n    blockedReason,\n    corsErrorStatus,\n  }: Protocol.Network.LoadingFailedEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.failed = true;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[resourceType]);\n    networkRequest.canceled = Boolean(canceled);\n    if (blockedReason) {\n      networkRequest.setBlockedReason(blockedReason);\n      if (blockedReason === Protocol.Network.BlockedReason.Inspector) {\n        const message = i18nString(UIStrings.requestWasBlockedByDevtoolsS, {PH1: networkRequest.url()});\n        this._manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n    if (corsErrorStatus) {\n      networkRequest.setCorsErrorStatus(corsErrorStatus);\n    }\n    networkRequest.localizedFailDescription = localizedDescription;\n    this._getExtraInfoBuilder(requestId).finished();\n    this._finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  webSocketCreated({requestId, url: requestURL, initiator}: Protocol.Network.WebSocketCreatedEvent): void {\n    const networkRequest = new NetworkRequest(requestId, requestURL, '', '', '', initiator || null);\n    requestToManagerMap.set(networkRequest, this._manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    this._startNetworkRequest(networkRequest, null);\n  }\n\n  webSocketWillSendHandshakeRequest({requestId, timestamp: time, wallTime, request}:\n                                        Protocol.Network.WebSocketWillSendHandshakeRequestEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.requestMethod = 'GET';\n    networkRequest.setRequestHeaders(this._headersMapToHeadersArray(request.headers));\n    networkRequest.setIssueTime(time, wallTime);\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webSocketHandshakeResponseReceived({requestId, timestamp: time, response}:\n                                         Protocol.Network.WebSocketHandshakeResponseReceivedEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    networkRequest.responseHeaders = this._headersMapToHeadersArray(response.headers);\n    networkRequest.responseHeadersText = response.headersText || '';\n    if (response.requestHeaders) {\n      networkRequest.setRequestHeaders(this._headersMapToHeadersArray(response.requestHeaders));\n    }\n    if (response.requestHeadersText) {\n      networkRequest.setRequestHeadersText(response.requestHeadersText);\n    }\n    networkRequest.responseReceivedTime = time;\n    networkRequest.protocol = 'websocket';\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameReceived({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameReceivedEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, false);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameSent({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameSentEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, true);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameError({requestId, timestamp: time, errorMessage}: Protocol.Network.WebSocketFrameErrorEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrameError(errorMessage, time);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webSocketClosed({requestId, timestamp: time}: Protocol.Network.WebSocketClosedEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    this._finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  eventSourceMessageReceived({requestId, timestamp: time, eventName, eventId, data}:\n                                 Protocol.Network.EventSourceMessageReceivedEvent): void {\n    const networkRequest = this.requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addEventSourceMessage(time, eventName, eventId, data);\n  }\n\n  requestIntercepted({\n    interceptionId,\n    request,\n    frameId,\n    resourceType,\n    isNavigationRequest,\n    isDownload,\n    redirectUrl,\n    authChallenge,\n    responseErrorReason,\n    responseStatusCode,\n    responseHeaders,\n    requestId,\n  }: Protocol.Network.RequestInterceptedEvent): void {\n    MultitargetNetworkManager.instance()._requestIntercepted(new InterceptedRequest(\n        this._manager.target().networkAgent(), interceptionId, request, frameId, resourceType, isNavigationRequest,\n        isDownload, redirectUrl, authChallenge, responseErrorReason, responseStatusCode, responseHeaders, requestId));\n  }\n\n  requestWillBeSentExtraInfo({requestId, associatedCookies, headers, clientSecurityState}:\n                                 Protocol.Network.RequestWillBeSentExtraInfoEvent): void {\n    const blockedRequestCookies: BlockedCookieWithReason[] = [];\n    const includedRequestCookies = [];\n    for (const {blockedReasons, cookie} of associatedCookies) {\n      if (blockedReasons.length === 0) {\n        includedRequestCookies.push(Cookie.fromProtocolCookie(cookie));\n      } else {\n        blockedRequestCookies.push({blockedReasons, cookie: Cookie.fromProtocolCookie(cookie)});\n      }\n    }\n    const extraRequestInfo = {\n      blockedRequestCookies,\n      includedRequestCookies,\n      requestHeaders: this._headersMapToHeadersArray(headers),\n      clientSecurityState: clientSecurityState,\n    };\n    this._getExtraInfoBuilder(requestId).addRequestExtraInfo(extraRequestInfo);\n  }\n\n  responseReceivedExtraInfo({requestId, blockedCookies, headers, headersText, resourceIPAddressSpace}:\n                                Protocol.Network.ResponseReceivedExtraInfoEvent): void {\n    const extraResponseInfo: ExtraResponseInfo = {\n      blockedResponseCookies: blockedCookies.map(blockedCookie => {\n        return {\n          blockedReasons: blockedCookie.blockedReasons,\n          cookieLine: blockedCookie.cookieLine,\n          cookie: blockedCookie.cookie ? Cookie.fromProtocolCookie(blockedCookie.cookie) : null,\n        };\n      }),\n      responseHeaders: this._headersMapToHeadersArray(headers),\n      responseHeadersText: headersText,\n      resourceIPAddressSpace,\n    };\n    this._getExtraInfoBuilder(requestId).addResponseExtraInfo(extraResponseInfo);\n  }\n\n  _getExtraInfoBuilder(requestId: string): ExtraInfoBuilder {\n    let builder: ExtraInfoBuilder;\n    if (!this._requestIdToExtraInfoBuilder.has(requestId)) {\n      builder = new ExtraInfoBuilder();\n      this._requestIdToExtraInfoBuilder.set(requestId, builder);\n    } else {\n      builder = (this._requestIdToExtraInfoBuilder.get(requestId) as ExtraInfoBuilder);\n    }\n    return builder;\n  }\n\n  _appendRedirect(requestId: string, time: number, redirectURL: string): NetworkRequest {\n    const originalNetworkRequest = this.requestsById.get(requestId);\n    if (!originalNetworkRequest) {\n      throw new Error(`Could not find original network request for ${requestId}`);\n    }\n    let redirectCount = 0;\n    for (let redirect = originalNetworkRequest.redirectSource(); redirect; redirect = redirect.redirectSource()) {\n      redirectCount++;\n    }\n\n    originalNetworkRequest.markAsRedirect(redirectCount);\n    this._finishNetworkRequest(originalNetworkRequest, time, -1);\n    const newNetworkRequest = this._createNetworkRequest(\n        requestId, originalNetworkRequest.frameId, originalNetworkRequest.loaderId, redirectURL,\n        originalNetworkRequest.documentURL, originalNetworkRequest.initiator());\n    newNetworkRequest.setRedirectSource(originalNetworkRequest);\n    originalNetworkRequest.setRedirectDestination(newNetworkRequest);\n    return newNetworkRequest;\n  }\n\n  _maybeAdoptMainResourceRequest(requestId: string): NetworkRequest|null {\n    const request = MultitargetNetworkManager.instance()._inflightMainResourceRequests.get(requestId);\n    if (!request) {\n      return null;\n    }\n    const oldDispatcher = (NetworkManager.forRequest(request) as NetworkManager)._dispatcher;\n    oldDispatcher.requestsById.delete(requestId);\n    oldDispatcher.requestsByURL.delete(request.url());\n    this.requestsById.set(requestId, request);\n    this.requestsByURL.set(request.url(), request);\n    requestToManagerMap.set(request, this._manager);\n    return request;\n  }\n\n  _startNetworkRequest(networkRequest: NetworkRequest, originalRequest: Protocol.Network.Request|null): void {\n    this.requestsById.set(networkRequest.requestId(), networkRequest);\n    this.requestsByURL.set(networkRequest.url(), networkRequest);\n    // The following relies on the fact that loaderIds and requestIds are\n    // globally unique and that the main request has them equal.\n    if (networkRequest.loaderId === networkRequest.requestId()) {\n      MultitargetNetworkManager.instance()._inflightMainResourceRequests.set(\n          networkRequest.requestId(), networkRequest);\n    }\n\n    this._manager.dispatchEventToListeners(Events.RequestStarted, {request: networkRequest, originalRequest});\n  }\n\n  _updateNetworkRequest(networkRequest: NetworkRequest): void {\n    this._manager.dispatchEventToListeners(Events.RequestUpdated, networkRequest);\n  }\n\n  _finishNetworkRequest(\n      networkRequest: NetworkRequest, finishTime: number, encodedDataLength: number,\n      shouldReportCorbBlocking?: boolean): void {\n    networkRequest.endTime = finishTime;\n    networkRequest.finished = true;\n    if (encodedDataLength >= 0) {\n      const redirectSource = networkRequest.redirectSource();\n      if (redirectSource && redirectSource.signedExchangeInfo()) {\n        networkRequest.setTransferSize(0);\n        redirectSource.setTransferSize(encodedDataLength);\n        this._updateNetworkRequest(redirectSource);\n      } else {\n        networkRequest.setTransferSize(encodedDataLength);\n      }\n    }\n    this._manager.dispatchEventToListeners(Events.RequestFinished, networkRequest);\n    MultitargetNetworkManager.instance()._inflightMainResourceRequests.delete(networkRequest.requestId());\n\n    if (shouldReportCorbBlocking) {\n      const message =\n          i18nString(UIStrings.crossoriginReadBlockingCorb, {PH1: networkRequest.url(), PH2: networkRequest.mimeType});\n      this._manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: true});\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('monitoringXHREnabled').get() &&\n        networkRequest.resourceType().category() === Common.ResourceType.resourceCategories.XHR) {\n      let message;\n      const failedToLoad = networkRequest.failed || networkRequest.hasErrorStatusCode();\n      if (failedToLoad) {\n        message = i18nString(\n            UIStrings.sFailedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      } else {\n        message = i18nString(\n            UIStrings.sFinishedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      }\n\n      this._manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: false});\n    }\n  }\n\n  _createNetworkRequest(\n      requestId: string, frameId: string, loaderId: string, url: string, documentURL: string,\n      initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    const request = new NetworkRequest(requestId, url, documentURL, frameId, loaderId, initiator);\n    requestToManagerMap.set(request, this._manager);\n    return request;\n  }\n\n  clearRequests(): void {\n    this.requestsById.clear();\n    this.requestsByURL.clear();\n    this._requestIdToExtraInfoBuilder.clear();\n  }\n\n  webTransportCreated({transportId, url: requestURL, timestamp: time, initiator}:\n                          Protocol.Network.WebTransportCreatedEvent): void {\n    const networkRequest = new NetworkRequest(transportId, requestURL, '', '', '', initiator || null);\n    networkRequest.hasNetworkData = true;\n    requestToManagerMap.set(networkRequest, this._manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebTransport);\n    networkRequest.setIssueTime(time, 0);\n    // TODO(yoichio): Add appropreate events to address abort cases.\n    this._startNetworkRequest(networkRequest, null);\n  }\n\n  webTransportConnectionEstablished({transportId, timestamp: time}:\n                                        Protocol.Network.WebTransportConnectionEstablishedEvent): void {\n    const networkRequest = this.requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    // This dummy deltas are needed to show this request as being\n    // downloaded(blue) given typical WebTransport is kept for a while.\n    // TODO(yoichio): Add appropreate events to fix these dummy datas.\n    // DNS lookup?\n    networkRequest.responseReceivedTime = time;\n    networkRequest.endTime = time + 0.001;\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  webTransportClosed({transportId, timestamp: time}: Protocol.Network.WebTransportClosedEvent): void {\n    const networkRequest = this.requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.endTime = time;\n    this._finishNetworkRequest(networkRequest, time, 0);\n  }\n\n  trustTokenOperationDone(event: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    const request = this.requestsById.get(event.requestId);\n    if (!request) {\n      this._requestIdToTrustTokenEvent.set(event.requestId, event);\n      return;\n    }\n    request.setTrustTokenOperationDoneEvent(event);\n  }\n\n\n  subresourceWebBundleMetadataReceived({requestId, urls}: Protocol.Network.SubresourceWebBundleMetadataReceivedEvent):\n      void {\n    this._getExtraInfoBuilder(requestId).setWebBundleInfo({resourceUrls: urls});\n  }\n\n  subresourceWebBundleMetadataError({requestId, errorMessage}: Protocol.Network.SubresourceWebBundleMetadataErrorEvent):\n      void {\n    this._getExtraInfoBuilder(requestId).setWebBundleInfo({errorMessage});\n  }\n\n  subresourceWebBundleInnerResponseParsed({innerRequestId, bundleRequestId}:\n                                              Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent): void {\n    this._getExtraInfoBuilder(innerRequestId).setWebBundleInnerRequestInfo({bundleRequestId});\n  }\n\n  subresourceWebBundleInnerResponseError({innerRequestId, errorMessage}:\n                                             Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent): void {\n    this._getExtraInfoBuilder(innerRequestId).setWebBundleInnerRequestInfo({errorMessage});\n  }\n}\n\nlet multiTargetNetworkManagerInstance: MultitargetNetworkManager|null;\n\nexport class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper implements\n    SDKModelObserver<NetworkManager> {\n  _userAgentOverride: string;\n  _userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null;\n  _customAcceptedEncodings: Protocol.Network.ContentEncoding[]|null;\n  _agents: Set<ProtocolProxyApi.NetworkApi>;\n  _inflightMainResourceRequests: Map<string, NetworkRequest>;\n  _networkConditions: Conditions;\n  _updatingInterceptionPatternsPromise: Promise<void>|null;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _blockingEnabledSetting: Common.Settings.Setting<any>;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _blockedPatternsSetting: Common.Settings.Setting<any>;\n  _effectiveBlockedURLs: string[];\n  _urlsForRequestInterceptor:\n      Platform.MapUtilities.Multimap<(arg0: InterceptedRequest) => Promise<void>, InterceptionPattern>;\n  _extraHeaders?: Protocol.Network.Headers;\n  _customUserAgent?: string;\n\n  constructor() {\n    super();\n    this._userAgentOverride = '';\n    this._userAgentMetadataOverride = null;\n    this._customAcceptedEncodings = null;\n    this._agents = new Set();\n    this._inflightMainResourceRequests = new Map();\n    this._networkConditions = NoThrottlingConditions;\n    this._updatingInterceptionPatternsPromise = null;\n\n    // TODO(allada) Remove these and merge it with request interception.\n    this._blockingEnabledSetting = Common.Settings.Settings.instance().moduleSetting('requestBlockingEnabled');\n    this._blockedPatternsSetting = Common.Settings.Settings.instance().createSetting('networkBlockedPatterns', []);\n    this._effectiveBlockedURLs = [];\n    this._updateBlockedPatterns();\n\n    this._urlsForRequestInterceptor = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().observeModels(NetworkManager, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): MultitargetNetworkManager {\n    const {forceNew} = opts;\n    if (!multiTargetNetworkManagerInstance || forceNew) {\n      multiTargetNetworkManagerInstance = new MultitargetNetworkManager();\n    }\n\n    return multiTargetNetworkManagerInstance;\n  }\n\n  static getChromeVersion(): string {\n    const chromeRegex = /(?:^|\\W)(?:Chrome|HeadlessChrome)\\/(\\S+)/;\n    const chromeMatch = navigator.userAgent.match(chromeRegex);\n    if (chromeMatch && chromeMatch.length > 1) {\n      return chromeMatch[1];\n    }\n    return '';\n  }\n\n  static patchUserAgentWithChromeVersion(uaString: string): string {\n    // Patches Chrome/ChrOS version from user agent (\"1.2.3.4\" when user agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      // \"1.2.3.4\" becomes \"1.0.100.0\"\n      const additionalAppVersion = chromeVersion.split('.', 1)[0] + '.0.100.0';\n      return Platform.StringUtilities.sprintf(uaString, chromeVersion, additionalAppVersion);\n    }\n    return uaString;\n  }\n\n  static patchUserAgentMetadataWithChromeVersion(userAgentMetadata: Protocol.Emulation.UserAgentMetadata): void {\n    // Patches Chrome/ChrOS version from user agent metadata (\"1.2.3.4\" when user agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    if (!userAgentMetadata.brands) {\n      return;\n    }\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length === 0) {\n      return;\n    }\n\n    for (const brand of userAgentMetadata.brands) {\n      if (brand.version.includes('%s')) {\n        brand.version = Platform.StringUtilities.sprintf(brand.version, chromeVersion);\n      }\n    }\n  }\n\n  modelAdded(networkManager: NetworkManager): void {\n    const networkAgent = networkManager.target().networkAgent();\n    if (this._extraHeaders) {\n      networkAgent.invoke_setExtraHTTPHeaders({headers: this._extraHeaders});\n    }\n    if (this.currentUserAgent()) {\n      networkAgent.invoke_setUserAgentOverride(\n          {userAgent: this.currentUserAgent(), userAgentMetadata: this._userAgentMetadataOverride || undefined});\n    }\n    if (this._effectiveBlockedURLs.length) {\n      networkAgent.invoke_setBlockedURLs({urls: this._effectiveBlockedURLs});\n    }\n    if (this.isIntercepting()) {\n      networkAgent.invoke_setRequestInterception({patterns: this._urlsForRequestInterceptor.valuesArray()});\n    }\n    if (this._customAcceptedEncodings === null) {\n      networkAgent.invoke_clearAcceptedEncodingsOverride();\n    } else {\n      networkAgent.invoke_setAcceptedEncodings({encodings: this._customAcceptedEncodings});\n    }\n    this._agents.add(networkAgent);\n    if (this.isThrottling()) {\n      this._updateNetworkConditions(networkAgent);\n    }\n  }\n\n  modelRemoved(networkManager: NetworkManager): void {\n    for (const entry of this._inflightMainResourceRequests) {\n      const manager = NetworkManager.forRequest((entry[1] as NetworkRequest));\n      if (manager !== networkManager) {\n        continue;\n      }\n      this._inflightMainResourceRequests.delete((entry[0] as string));\n    }\n    this._agents.delete(networkManager.target().networkAgent());\n  }\n\n  isThrottling(): boolean {\n    return this._networkConditions.download >= 0 || this._networkConditions.upload >= 0 ||\n        this._networkConditions.latency > 0;\n  }\n\n  isOffline(): boolean {\n    return !this._networkConditions.download && !this._networkConditions.upload;\n  }\n\n  setNetworkConditions(conditions: Conditions): void {\n    this._networkConditions = conditions;\n    for (const agent of this._agents) {\n      this._updateNetworkConditions(agent);\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ConditionsChanged);\n  }\n\n  networkConditions(): Conditions {\n    return this._networkConditions;\n  }\n\n  _updateNetworkConditions(networkAgent: ProtocolProxyApi.NetworkApi): void {\n    const conditions = this._networkConditions;\n    if (!this.isThrottling()) {\n      networkAgent.invoke_emulateNetworkConditions(\n          {offline: false, latency: 0, downloadThroughput: 0, uploadThroughput: 0});\n    } else {\n      networkAgent.invoke_emulateNetworkConditions({\n        offline: this.isOffline(),\n        latency: conditions.latency,\n        downloadThroughput: conditions.download < 0 ? 0 : conditions.download,\n        uploadThroughput: conditions.upload < 0 ? 0 : conditions.upload,\n        connectionType: NetworkManager._connectionType(conditions),\n      });\n    }\n  }\n\n  setExtraHTTPHeaders(headers: Protocol.Network.Headers): void {\n    this._extraHeaders = headers;\n    for (const agent of this._agents) {\n      agent.invoke_setExtraHTTPHeaders({headers: this._extraHeaders});\n    }\n  }\n\n  currentUserAgent(): string {\n    return this._customUserAgent ? this._customUserAgent : this._userAgentOverride;\n  }\n\n  _updateUserAgentOverride(): void {\n    const userAgent = this.currentUserAgent();\n    for (const agent of this._agents) {\n      agent.invoke_setUserAgentOverride(\n          {userAgent: userAgent, userAgentMetadata: this._userAgentMetadataOverride || undefined});\n    }\n  }\n\n  setUserAgentOverride(userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null): void {\n    const uaChanged = (this._userAgentOverride !== userAgent);\n    this._userAgentOverride = userAgent;\n    if (!this._customUserAgent) {\n      this._userAgentMetadataOverride = userAgentMetadataOverride;\n      this._updateUserAgentOverride();\n    } else {\n      this._userAgentMetadataOverride = null;\n    }\n\n    if (uaChanged) {\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.UserAgentChanged);\n    }\n  }\n\n  userAgentOverride(): string {\n    return this._userAgentOverride;\n  }\n\n  setCustomUserAgentOverride(\n      userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null = null): void {\n    this._customUserAgent = userAgent;\n    this._userAgentMetadataOverride = userAgentMetadataOverride;\n    this._updateUserAgentOverride();\n  }\n\n  setCustomAcceptedEncodingsOverride(acceptedEncodings: Protocol.Network.ContentEncoding[]): void {\n    this._customAcceptedEncodings = acceptedEncodings;\n    this._updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  clearCustomAcceptedEncodingsOverride(): void {\n    this._customAcceptedEncodings = null;\n    this._updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  isAcceptedEncodingOverrideSet(): boolean {\n    return this._customAcceptedEncodings !== null;\n  }\n\n  _updateAcceptedEncodingsOverride(): void {\n    const customAcceptedEncodings = this._customAcceptedEncodings;\n    for (const agent of this._agents) {\n      if (customAcceptedEncodings === null) {\n        agent.invoke_clearAcceptedEncodingsOverride();\n      } else {\n        agent.invoke_setAcceptedEncodings({encodings: customAcceptedEncodings});\n      }\n    }\n  }\n\n  // TODO(allada) Move all request blocking into interception and let view manage blocking.\n  blockedPatterns(): BlockedPattern[] {\n    return this._blockedPatternsSetting.get().slice();\n  }\n\n  blockingEnabled(): boolean {\n    return this._blockingEnabledSetting.get();\n  }\n\n  isBlocking(): boolean {\n    return Boolean(this._effectiveBlockedURLs.length);\n  }\n\n  setBlockedPatterns(patterns: BlockedPattern[]): void {\n    this._blockedPatternsSetting.set(patterns);\n    this._updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  setBlockingEnabled(enabled: boolean): void {\n    if (this._blockingEnabledSetting.get() === enabled) {\n      return;\n    }\n    this._blockingEnabledSetting.set(enabled);\n    this._updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  _updateBlockedPatterns(): void {\n    const urls = [];\n    if (this._blockingEnabledSetting.get()) {\n      for (const pattern of this._blockedPatternsSetting.get()) {\n        if (pattern.enabled) {\n          urls.push(pattern.url);\n        }\n      }\n    }\n\n    if (!urls.length && !this._effectiveBlockedURLs.length) {\n      return;\n    }\n    this._effectiveBlockedURLs = urls;\n    for (const agent of this._agents) {\n      agent.invoke_setBlockedURLs({urls: this._effectiveBlockedURLs});\n    }\n  }\n\n  isIntercepting(): boolean {\n    return Boolean(this._urlsForRequestInterceptor.size);\n  }\n\n  setInterceptionHandlerForPatterns(\n      patterns: InterceptionPattern[], requestInterceptor: (arg0: InterceptedRequest) => Promise<void>): Promise<void> {\n    // Note: requestInterceptors may recieve interception requests for patterns they did not subscribe to.\n    this._urlsForRequestInterceptor.deleteAll(requestInterceptor);\n    for (const newPattern of patterns) {\n      this._urlsForRequestInterceptor.set(requestInterceptor, newPattern);\n    }\n    return this._updateInterceptionPatternsOnNextTick();\n  }\n\n  _updateInterceptionPatternsOnNextTick(): Promise<void> {\n    // This is used so we can register and unregister patterns in loops without sending lots of protocol messages.\n    if (!this._updatingInterceptionPatternsPromise) {\n      this._updatingInterceptionPatternsPromise = Promise.resolve().then(this._updateInterceptionPatterns.bind(this));\n    }\n    return this._updatingInterceptionPatternsPromise;\n  }\n\n  async _updateInterceptionPatterns(): Promise<void> {\n    if (!Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      Common.Settings.Settings.instance().moduleSetting('cacheDisabled').set(true);\n    }\n    this._updatingInterceptionPatternsPromise = null;\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const promises = ([] as Promise<any>[]);\n    for (const agent of this._agents) {\n      promises.push(agent.invoke_setRequestInterception({patterns: this._urlsForRequestInterceptor.valuesArray()}));\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.InterceptorsChanged);\n    await Promise.all(promises);\n  }\n\n  async _requestIntercepted(interceptedRequest: InterceptedRequest): Promise<void> {\n    for (const requestInterceptor of this._urlsForRequestInterceptor.keysArray()) {\n      await requestInterceptor(interceptedRequest);\n      if (interceptedRequest.hasResponded()) {\n        return;\n      }\n    }\n    if (!interceptedRequest.hasResponded()) {\n      interceptedRequest.continueRequestWithoutChange();\n    }\n  }\n\n  clearBrowserCache(): void {\n    for (const agent of this._agents) {\n      agent.invoke_clearBrowserCache();\n    }\n  }\n\n  clearBrowserCookies(): void {\n    for (const agent of this._agents) {\n      agent.invoke_clearBrowserCookies();\n    }\n  }\n\n  async getCertificate(origin: string): Promise<string[]> {\n    const target = TargetManager.instance().mainTarget();\n    if (!target) {\n      return [];\n    }\n    const certificate = await target.networkAgent().invoke_getCertificate({origin});\n    if (!certificate) {\n      return [];\n    }\n    return certificate.tableNames;\n  }\n\n  async loadResource(url: string): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    const headers: {\n      [x: string]: string,\n    } = {};\n\n    const currentUserAgent = this.currentUserAgent();\n    if (currentUserAgent) {\n      headers['User-Agent'] = currentUserAgent;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      headers['Cache-Control'] = 'no-cache';\n    }\n\n    return new Promise(\n        resolve => Host.ResourceLoader.load(url, headers, (success, _responseHeaders, content, errorDescription) => {\n          resolve({success, content, errorDescription});\n        }));\n  }\n}\n\nexport namespace MultitargetNetworkManager {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    BlockedPatternsChanged = 'BlockedPatternsChanged',\n    ConditionsChanged = 'ConditionsChanged',\n    UserAgentChanged = 'UserAgentChanged',\n    InterceptorsChanged = 'InterceptorsChanged',\n    AcceptedEncodingsChanged = 'AcceptedEncodingsChanged',\n  }\n}\n\nexport class InterceptedRequest {\n  _networkAgent: ProtocolProxyApi.NetworkApi;\n  _interceptionId: string;\n  _hasResponded: boolean;\n  request: Protocol.Network.Request;\n  frameId: string;\n  resourceType: Protocol.Network.ResourceType;\n  isNavigationRequest: boolean;\n  isDownload: boolean;\n  redirectUrl: string|undefined;\n  authChallenge: Protocol.Network.AuthChallenge|undefined;\n  responseErrorReason: Protocol.Network.ErrorReason|undefined;\n  responseStatusCode: number|undefined;\n  responseHeaders: Protocol.Network.Headers|undefined;\n  requestId: string|undefined;\n\n  constructor(\n      networkAgent: ProtocolProxyApi.NetworkApi, interceptionId: string, request: Protocol.Network.Request,\n      frameId: string, resourceType: Protocol.Network.ResourceType, isNavigationRequest: boolean, isDownload?: boolean,\n      redirectUrl?: string, authChallenge?: Protocol.Network.AuthChallenge,\n      responseErrorReason?: Protocol.Network.ErrorReason, responseStatusCode?: number,\n      responseHeaders?: Protocol.Network.Headers, requestId?: string) {\n    this._networkAgent = networkAgent;\n    this._interceptionId = interceptionId;\n    this._hasResponded = false;\n    this.request = request;\n    this.frameId = frameId;\n    this.resourceType = resourceType;\n    this.isNavigationRequest = isNavigationRequest;\n    this.isDownload = Boolean(isDownload);\n    this.redirectUrl = redirectUrl;\n    this.authChallenge = authChallenge;\n    this.responseErrorReason = responseErrorReason;\n    this.responseStatusCode = responseStatusCode;\n    this.responseHeaders = responseHeaders;\n    this.requestId = requestId;\n  }\n\n  hasResponded(): boolean {\n    return this._hasResponded;\n  }\n\n  async continueRequestWithContent(contentBlob: Blob): Promise<void> {\n    this._hasResponded = true;\n    const headers = [\n      'HTTP/1.1 200 OK',\n      'Date: ' + (new Date()).toUTCString(),\n      'Server: Chrome Devtools Request Interceptor',\n      'Connection: closed',\n      'Content-Length: ' + contentBlob.size,\n      'Content-Type: ' + contentBlob.type || 'text/x-unknown',\n    ];\n    const encodedResponse = await blobToBase64(new Blob([headers.join('\\r\\n'), '\\r\\n\\r\\n', contentBlob]));\n    this._networkAgent.invoke_continueInterceptedRequest(\n        {interceptionId: this._interceptionId, rawResponse: encodedResponse});\n\n    async function blobToBase64(blob: Blob): Promise<string> {\n      const reader = new FileReader();\n      const fileContentsLoadedPromise = new Promise(resolve => {\n        reader.onloadend = resolve;\n      });\n      reader.readAsDataURL(blob);\n      await fileContentsLoadedPromise;\n      if (reader.error) {\n        console.error('Could not convert blob to base64.', reader.error);\n        return '';\n      }\n      const result = reader.result;\n      if (result === undefined || result === null || typeof result !== 'string') {\n        console.error('Could not convert blob to base64.');\n        return '';\n      }\n      return result.substring(result.indexOf(',') + 1);\n    }\n  }\n\n  continueRequestWithoutChange(): void {\n    console.assert(!this._hasResponded);\n    this._hasResponded = true;\n    this._networkAgent.invoke_continueInterceptedRequest({interceptionId: this._interceptionId});\n  }\n\n  continueRequestWithError(errorReason: Protocol.Network.ErrorReason): void {\n    console.assert(!this._hasResponded);\n    this._hasResponded = true;\n    this._networkAgent.invoke_continueInterceptedRequest({interceptionId: this._interceptionId, errorReason});\n  }\n\n  async responseBody(): Promise<ContentData> {\n    const response =\n        await this._networkAgent.invoke_getResponseBodyForInterception({interceptionId: this._interceptionId});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n}\n\n/**\n * Helper class to match requests created from requestWillBeSent with\n * requestWillBeSentExtraInfo and responseReceivedExtraInfo when they have the\n * same requestId due to redirects.\n */\nclass ExtraInfoBuilder {\n  _requests: NetworkRequest[];\n  _requestExtraInfos: (ExtraRequestInfo|null)[];\n  _responseExtraInfos: (ExtraResponseInfo|null)[];\n  _finished: boolean;\n  _hasExtraInfo: boolean;\n  private webBundleInfo: WebBundleInfo|null;\n  private webBundleInnerRequestInfo: WebBundleInnerRequestInfo|null;\n\n  constructor() {\n    this._requests = [];\n    this._requestExtraInfos = [];\n    this._responseExtraInfos = [];\n    this._finished = false;\n    this._hasExtraInfo = false;\n    this.webBundleInfo = null;\n    this.webBundleInnerRequestInfo = null;\n  }\n\n  addRequest(req: NetworkRequest): void {\n    this._requests.push(req);\n    this._sync(this._requests.length - 1);\n  }\n\n  addRequestExtraInfo(info: ExtraRequestInfo): void {\n    this._hasExtraInfo = true;\n    this._requestExtraInfos.push(info);\n    this._sync(this._requestExtraInfos.length - 1);\n  }\n\n  addResponseExtraInfo(info: ExtraResponseInfo): void {\n    this._responseExtraInfos.push(info);\n    this._sync(this._responseExtraInfos.length - 1);\n  }\n\n  setWebBundleInfo(info: WebBundleInfo): void {\n    this.webBundleInfo = info;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo): void {\n    this.webBundleInnerRequestInfo = info;\n    this.updateFinalRequest();\n  }\n\n  finished(): void {\n    this._finished = true;\n    this.updateFinalRequest();\n  }\n\n  _sync(index: number): void {\n    const req = this._requests[index];\n    if (!req) {\n      return;\n    }\n\n    const requestExtraInfo = this._requestExtraInfos[index];\n    if (requestExtraInfo) {\n      req.addExtraRequestInfo(requestExtraInfo);\n      this._requestExtraInfos[index] = null;\n    }\n\n    const responseExtraInfo = this._responseExtraInfos[index];\n    if (responseExtraInfo) {\n      req.addExtraResponseInfo(responseExtraInfo);\n      this._responseExtraInfos[index] = null;\n    }\n  }\n\n  private updateFinalRequest(): void {\n    if (!this._finished) {\n      return;\n    }\n    const finalRequest = this._requests[this._requests.length - 1];\n    finalRequest?.setWebBundleInfo(this.webBundleInfo);\n    finalRequest?.setWebBundleInnerRequestInfo(this.webBundleInnerRequestInfo);\n  }\n}\n\nSDKModel.register(NetworkManager, {capabilities: Capability.Network, autostart: true});\nexport interface Conditions {\n  download: number;\n  upload: number;\n  latency: number;\n  title: string|(() => string);\n}\n\nexport interface BlockedPattern {\n  url: string;\n  enabled: boolean;\n}\n\nexport interface Message {\n  message: string;\n  requestId: string;\n  warning: boolean;\n}\n\nexport interface InterceptionPattern {\n  urlPattern: string;\n  interceptionStage: Protocol.Network.InterceptionStage;\n}\n\nexport type RequestInterceptor = (request: InterceptedRequest) => Promise<void>;\n\nexport interface RequestUpdateDroppedEventData {\n  url: string;\n  frameId: string;\n  loaderId: string;\n  resourceType: Protocol.Network.ResourceType;\n  mimeType: string;\n  lastModified: Date|null;\n}\n"]}