{"version":3,"file":"PerformanceMetricsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PerformanceMetricsModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class PerformanceMetricsModel extends SDKModel {\n  _agent: ProtocolProxyApi.PerformanceApi;\n  _metricModes: Map<string, MetricMode>;\n  _metricData: Map<string, {\n    lastValue: (number | undefined),\n    lastTimestamp: (number|undefined),\n  }>;\n\n  constructor(target: Target) {\n    super(target);\n    this._agent = target.performanceAgent();\n\n    this._metricModes = new Map([\n      ['TaskDuration', MetricMode.CumulativeTime],\n      ['ScriptDuration', MetricMode.CumulativeTime],\n      ['LayoutDuration', MetricMode.CumulativeTime],\n      ['RecalcStyleDuration', MetricMode.CumulativeTime],\n      ['LayoutCount', MetricMode.CumulativeCount],\n      ['RecalcStyleCount', MetricMode.CumulativeCount],\n    ]);\n\n    this._metricData = new Map();\n  }\n\n  enable(): Promise<Object> {\n    return this._agent.invoke_enable({});\n  }\n\n  disable(): Promise<Object> {\n    return this._agent.invoke_disable();\n  }\n\n  async requestMetrics(): Promise<{\n    metrics: Map<string, number>,\n    timestamp: number,\n  }> {\n    const rawMetrics = await this._agent.invoke_getMetrics() || [];\n    const metrics = new Map<string, number>();\n    const timestamp = performance.now();\n    for (const metric of rawMetrics.metrics) {\n      let data = this._metricData.get(metric.name);\n      if (!data) {\n        data = {lastValue: undefined, lastTimestamp: undefined};\n        this._metricData.set(metric.name, data);\n      }\n      let value;\n      switch (this._metricModes.get(metric.name)) {\n        case MetricMode.CumulativeTime:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Platform.NumberUtilities.clamp(\n                  (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp), 0, 1) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        case MetricMode.CumulativeCount:\n          value = (data.lastTimestamp && data.lastValue) ?\n              Math.max(0, (metric.value - data.lastValue) * 1000 / (timestamp - data.lastTimestamp)) :\n              0;\n          data.lastValue = metric.value;\n          data.lastTimestamp = timestamp;\n          break;\n        default:\n          value = metric.value;\n          break;\n      }\n      metrics.set(metric.name, value);\n    }\n    return {metrics: metrics, timestamp: timestamp};\n  }\n}\n\nconst enum MetricMode {\n  CumulativeTime = 'CumulativeTime',\n  CumulativeCount = 'CumulativeCount',\n}\n\nSDKModel.register(PerformanceMetricsModel, {capabilities: Capability.DOM, autostart: false});\n"]}