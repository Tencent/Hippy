{"version":3,"file":"LayerTreeBase.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/LayerTreeBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {DOMNode} from './DOMModel.js';\nimport {DOMModel} from './DOMModel.js';                   // eslint-disable-line no-unused-vars\nimport type {SnapshotWithRect} from './PaintProfiler.js'; // eslint-disable-line no-unused-vars\nimport type {Target} from './Target.js';                  // eslint-disable-line no-unused-vars\n\nexport interface Layer {\n  id(): string;\n\n  parentId(): string|null;\n\n  parent(): Layer|null;\n\n  isRoot(): boolean;\n\n  children(): Layer[];\n\n  addChild(child: Layer): void;\n\n  node(): DOMNode|null;\n\n  nodeForSelfOrAncestor(): DOMNode|null;\n\n  offsetX(): number;\n\n  offsetY(): number;\n\n  width(): number;\n\n  height(): number;\n\n  transform(): number[]|null;\n\n  quad(): number[];\n\n  anchorPoint(): number[];\n\n  invisible(): boolean;\n\n  paintCount(): number;\n\n  lastPaintRect(): Protocol.DOM.Rect|null;\n\n  scrollRects(): Protocol.LayerTree.ScrollRect[];\n\n  stickyPositionConstraint(): StickyPositionConstraint|null;\n\n  gpuMemoryUsage(): number;\n\n  requestCompositingReasonIds(): Promise<string[]>;\n\n  drawsContent(): boolean;\n\n  snapshots(): Promise<SnapshotWithRect|null>[];\n}\n\nexport namespace Layer {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum ScrollRectType {\n    NonFastScrollable = 'NonFastScrollable',\n    TouchEventHandler = 'TouchEventHandler',\n    WheelEventHandler = 'WheelEventHandler',\n    RepaintsOnScroll = 'RepaintsOnScroll',\n    MainThreadScrollingReason = 'MainThreadScrollingReason',\n  }\n}\n\nexport class StickyPositionConstraint {\n  _stickyBoxRect: Protocol.DOM.Rect;\n  _containingBlockRect: Protocol.DOM.Rect;\n  _nearestLayerShiftingStickyBox: Layer|null;\n  _nearestLayerShiftingContainingBlock: Layer|null;\n\n  constructor(layerTree: LayerTreeBase|null, constraint: Protocol.LayerTree.StickyPositionConstraint) {\n    this._stickyBoxRect = constraint.stickyBoxRect;\n    this._containingBlockRect = constraint.containingBlockRect;\n    this._nearestLayerShiftingStickyBox = null;\n    if (layerTree && constraint.nearestLayerShiftingStickyBox) {\n      this._nearestLayerShiftingStickyBox = layerTree.layerById(constraint.nearestLayerShiftingStickyBox);\n    }\n\n    this._nearestLayerShiftingContainingBlock = null;\n    if (layerTree && constraint.nearestLayerShiftingContainingBlock) {\n      this._nearestLayerShiftingContainingBlock = layerTree.layerById(constraint.nearestLayerShiftingContainingBlock);\n    }\n  }\n\n  stickyBoxRect(): Protocol.DOM.Rect {\n    return this._stickyBoxRect;\n  }\n\n  containingBlockRect(): Protocol.DOM.Rect {\n    return this._containingBlockRect;\n  }\n\n  nearestLayerShiftingStickyBox(): Layer|null {\n    return this._nearestLayerShiftingStickyBox;\n  }\n\n  nearestLayerShiftingContainingBlock(): Layer|null {\n    return this._nearestLayerShiftingContainingBlock;\n  }\n}\n\nexport class LayerTreeBase {\n  _target: Target|null;\n  _domModel: DOMModel|null;\n  layersById: Map<string|number, Layer>;\n  _root: Layer|null;\n  _contentRoot: Layer|null;\n  _backendNodeIdToNode: Map<number, DOMNode|null>;\n  _viewportSize?: {\n    width: number,\n    height: number,\n  };\n\n  constructor(target: Target|null) {\n    this._target = target;\n    this._domModel = target ? target.model(DOMModel) : null;\n    this.layersById = new Map();\n    this._root = null;\n    this._contentRoot = null;\n    this._backendNodeIdToNode = new Map();\n  }\n\n  target(): Target|null {\n    return this._target;\n  }\n\n  root(): Layer|null {\n    return this._root;\n  }\n\n  setRoot(root: Layer|null): void {\n    this._root = root;\n  }\n\n  contentRoot(): Layer|null {\n    return this._contentRoot;\n  }\n\n  setContentRoot(contentRoot: Layer|null): void {\n    this._contentRoot = contentRoot;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  forEachLayer(callback: (arg0: Layer) => any, root?: Layer|null): any {\n    if (!root) {\n      root = this.root();\n      if (!root) {\n        return false;\n      }\n    }\n    return callback(root) || root.children().some(this.forEachLayer.bind(this, callback));\n  }\n\n  layerById(id: string): Layer|null {\n    return this.layersById.get(id) || null;\n  }\n\n  async resolveBackendNodeIds(requestedNodeIds: Set<number>): Promise<void> {\n    if (!requestedNodeIds.size || !this._domModel) {\n      return;\n    }\n\n    const nodesMap = await this._domModel.pushNodesByBackendIdsToFrontend(requestedNodeIds);\n\n    if (!nodesMap) {\n      return;\n    }\n    for (const nodeId of nodesMap.keys()) {\n      this._backendNodeIdToNode.set(nodeId, nodesMap.get(nodeId) || null);\n    }\n  }\n\n  backendNodeIdToNode(): Map<number, DOMNode|null> {\n    return this._backendNodeIdToNode;\n  }\n\n  setViewportSize(viewportSize: {\n    width: number,\n    height: number,\n  }): void {\n    this._viewportSize = viewportSize;\n  }\n\n  viewportSize(): {\n    width: number,\n    height: number,\n  }|undefined {\n    return this._viewportSize;\n  }\n\n  _nodeForId(id: number): DOMNode|null {\n    return this._domModel ? this._domModel.nodeForId(id) : null;\n  }\n}\n"]}