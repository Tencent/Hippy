{"version":3,"file":"CSSPropertyParser.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSPropertyParser.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAS,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AAEtE,MAAM,SAAS,GAAG,gBAAgB,CAAC;AACnC,MAAM,SAAS,GAAG,gCAAgC,CAAC;AACnD,MAAM,2BAA2B,GAC7B,IAAI,MAAM,CAAC,QAAQ,SAAS,CAAC,MAAM,YAAY,SAAS,CAAC,MAAM,WAAW,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AAEnG;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CAAC,KAAa;IAItD,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,QAAQ,EAAE;QAC/D,OAAO,EAAE,CAAC;KACX;IACD,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;QACxD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACzD,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,IAAI,CAAC;gBACX,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;gBACzB,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC5B,CAAC,CAAC;SACJ;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,iBAAiB;AACjB,MAAM,gBAAgB,GAAG,iBAAiB,CAAC;AAE3C;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,KAAa;IAC3C,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IACD,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,MAAM,MAAM,IAAI,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;QACvD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC7C,IAAI,KAAK,EAAE;YACT,gEAAgE;YAChE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACpC;aAAM;YACL,gCAAgC;YAChC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAa;IACzC,OAAO,KAAK,CAAC,UAAU,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;AACvD,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nconst globalValues = new Set<string>(['inherit', 'initial', 'unset']);\n\nconst tagRegexp = /[\\x20-\\x7E]{4}/;\nconst numRegexp = /[+-]?(?:\\d*\\.)?\\d+(?:[eE]\\d+)?/;\nconst fontVariationSettingsRegexp =\n    new RegExp(`(?:'(${tagRegexp.source})')|(?:\"(${tagRegexp.source})\")\\\\s+(${numRegexp.source})`);\n\n/**\n * Extracts information about font variation settings assuming\n * value is valid according to the spec: https://drafts.csswg.org/css-fonts-4/#font-variation-settings-def\n */\nexport function parseFontVariationSettings(value: string): {\n  tag: string,\n  value: number,\n}[] {\n  if (globalValues.has(value.trim()) || value.trim() === 'normal') {\n    return [];\n  }\n  const results = [];\n  for (const setting of splitByComma(stripComments(value))) {\n    const match = setting.match(fontVariationSettingsRegexp);\n    if (match) {\n      results.push({\n        tag: match[1] || match[2],\n        value: parseFloat(match[3]),\n      });\n    }\n  }\n  return results;\n}\n\n// \"str\" or 'str'\nconst fontFamilyRegexp = /^\"(.+)\"|'(.+)'$/;\n\n/**\n * Extracts font families assuming the value is valid according to\n * the spec: https://drafts.csswg.org/css-fonts-4/#font-family-prop\n */\nexport function parseFontFamily(value: string): string[] {\n  if (globalValues.has(value.trim())) {\n    return [];\n  }\n  const results = [];\n  for (const family of splitByComma(stripComments(value))) {\n    const match = family.match(fontFamilyRegexp);\n    if (match) {\n      // Either the 1st or 2nd group matches if the value is in quotes\n      results.push(match[1] || match[2]);\n    } else {\n      // Value without without quotes.\n      results.push(family);\n    }\n  }\n  return results;\n}\n\n/**\n * Splits a list of values by comma and trims parts\n */\nexport function splitByComma(value: string): string[] {\n  return value.split(',').map(part => part.trim());\n}\n\nexport function stripComments(value: string): string {\n  return value.replaceAll(/(\\/\\*(?:.|\\s)*?\\*\\/)/g, '');\n}\n"]}