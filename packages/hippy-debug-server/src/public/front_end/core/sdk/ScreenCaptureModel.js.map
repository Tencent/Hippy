{"version":3,"file":"ScreenCaptureModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ScreenCaptureModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {OverlayModel} from './OverlayModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class ScreenCaptureModel extends SDKModel implements ProtocolProxyApi.PageDispatcher {\n  _agent: ProtocolProxyApi.PageApi;\n  _onScreencastFrame: ((arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void)|null;\n  _onScreencastVisibilityChanged: ((arg0: boolean) => void)|null;\n  constructor(target: Target) {\n    super(target);\n    this._agent = target.pageAgent();\n    this._onScreencastFrame = null;\n    this._onScreencastVisibilityChanged = null;\n    target.registerPageDispatcher(this);\n  }\n\n  startScreencast(\n      format: Protocol.Page.StartScreencastRequestFormat, quality: number, maxWidth: number|undefined,\n      maxHeight: number|undefined, everyNthFrame: number|undefined,\n      onFrame: (arg0: Protocol.binary, arg1: Protocol.Page.ScreencastFrameMetadata) => void,\n      onVisibilityChanged: (arg0: boolean) => void): void {\n    this._onScreencastFrame = onFrame;\n    this._onScreencastVisibilityChanged = onVisibilityChanged;\n    this._agent.invoke_startScreencast({format, quality, maxWidth, maxHeight, everyNthFrame});\n  }\n\n  stopScreencast(): void {\n    this._onScreencastFrame = null;\n    this._onScreencastVisibilityChanged = null;\n    this._agent.invoke_stopScreencast();\n  }\n\n  async captureScreenshot(\n      format: Protocol.Page.CaptureScreenshotRequestFormat, quality: number,\n      clip?: Protocol.Page.Viewport): Promise<string|null> {\n    await OverlayModel.muteHighlight();\n    const result = await this._agent.invoke_captureScreenshot(\n        {format, quality, clip, fromSurface: true, captureBeyondViewport: true});\n    await OverlayModel.unmuteHighlight();\n    return result.data;\n  }\n\n  async fetchLayoutMetrics(): Promise<{\n    viewportX: number,\n    viewportY: number,\n    viewportScale: number,\n    contentWidth: number,\n    contentHeight: number,\n  }|null> {\n    const response = await this._agent.invoke_getLayoutMetrics();\n    if (response.getError()) {\n      return null;\n    }\n    return {\n      viewportX: response.cssVisualViewport.pageX,\n      viewportY: response.cssVisualViewport.pageY,\n      viewportScale: response.cssVisualViewport.scale,\n      contentWidth: response.cssContentSize.width,\n      contentHeight: response.cssContentSize.height,\n    };\n  }\n\n  screencastFrame({data, metadata, sessionId}: Protocol.Page.ScreencastFrameEvent): void {\n    this._agent.invoke_screencastFrameAck({sessionId});\n    if (this._onScreencastFrame) {\n      this._onScreencastFrame.call(null, data, metadata);\n    }\n  }\n\n  screencastVisibilityChanged({visible}: Protocol.Page.ScreencastVisibilityChangedEvent): void {\n    if (this._onScreencastVisibilityChanged) {\n      this._onScreencastVisibilityChanged.call(null, visible);\n    }\n  }\n\n  backForwardCacheNotUsed(_params: Protocol.Page.BackForwardCacheNotUsedEvent): void {\n  }\n\n  domContentEventFired(_params: Protocol.Page.DomContentEventFiredEvent): void {\n  }\n\n  loadEventFired(_params: Protocol.Page.LoadEventFiredEvent): void {\n  }\n\n  lifecycleEvent(_params: Protocol.Page.LifecycleEventEvent): void {\n  }\n\n  navigatedWithinDocument(_params: Protocol.Page.NavigatedWithinDocumentEvent): void {\n  }\n\n  frameAttached(_params: Protocol.Page.FrameAttachedEvent): void {\n  }\n\n  frameNavigated(_params: Protocol.Page.FrameNavigatedEvent): void {\n  }\n\n  documentOpened(_params: Protocol.Page.DocumentOpenedEvent): void {\n  }\n\n  frameDetached(_params: Protocol.Page.FrameDetachedEvent): void {\n  }\n\n  frameStartedLoading(_params: Protocol.Page.FrameStartedLoadingEvent): void {\n  }\n\n  frameStoppedLoading(_params: Protocol.Page.FrameStoppedLoadingEvent): void {\n  }\n\n  frameRequestedNavigation(_params: Protocol.Page.FrameRequestedNavigationEvent): void {\n  }\n\n  frameScheduledNavigation(_params: Protocol.Page.FrameScheduledNavigationEvent): void {\n  }\n\n  frameClearedScheduledNavigation(_params: Protocol.Page.FrameClearedScheduledNavigationEvent): void {\n  }\n\n  frameResized(): void {\n  }\n\n  javascriptDialogOpening(_params: Protocol.Page.JavascriptDialogOpeningEvent): void {\n  }\n\n  javascriptDialogClosed(_params: Protocol.Page.JavascriptDialogClosedEvent): void {\n  }\n\n  interstitialShown(): void {\n  }\n\n  interstitialHidden(): void {\n  }\n\n  windowOpen(_params: Protocol.Page.WindowOpenEvent): void {\n  }\n\n  fileChooserOpened(_params: Protocol.Page.FileChooserOpenedEvent): void {\n  }\n\n  compilationCacheProduced(_params: Protocol.Page.CompilationCacheProducedEvent): void {\n  }\n\n  downloadWillBegin(_params: Protocol.Page.DownloadWillBeginEvent): void {\n  }\n\n  downloadProgress(): void {\n  }\n}\n\nSDKModel.register(ScreenCaptureModel, {capabilities: Capability.ScreenCapture, autostart: false});\n"]}