{"version":3,"file":"PaintProfiler.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PaintProfiler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class PaintProfilerModel extends SDKModel {\n  _layerTreeAgent: ProtocolProxyApi.LayerTreeApi;\n\n  constructor(target: Target) {\n    super(target);\n    this._layerTreeAgent = target.layerTreeAgent();\n  }\n\n  async loadSnapshotFromFragments(tiles: Protocol.LayerTree.PictureTile[]): Promise<PaintProfilerSnapshot|null> {\n    const {snapshotId} = await this._layerTreeAgent.invoke_loadSnapshot({tiles});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n\n  loadSnapshot(encodedPicture: Protocol.binary): Promise<PaintProfilerSnapshot|null> {\n    const fragment = {x: 0, y: 0, picture: encodedPicture};\n    return this.loadSnapshotFromFragments([fragment]);\n  }\n\n  async makeSnapshot(layerId: Protocol.LayerTree.LayerId): Promise<PaintProfilerSnapshot|null> {\n    const {snapshotId} = await this._layerTreeAgent.invoke_makeSnapshot({layerId});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n}\n\nexport class PaintProfilerSnapshot {\n  _paintProfilerModel: PaintProfilerModel;\n  _id: Protocol.LayerTree.SnapshotId;\n  _refCount: number;\n\n  constructor(paintProfilerModel: PaintProfilerModel, snapshotId: Protocol.LayerTree.SnapshotId) {\n    this._paintProfilerModel = paintProfilerModel;\n    this._id = snapshotId;\n    this._refCount = 1;\n  }\n\n  release(): void {\n    console.assert(this._refCount > 0, 'release is already called on the object');\n    if (!--this._refCount) {\n      this._paintProfilerModel._layerTreeAgent.invoke_releaseSnapshot({snapshotId: this._id});\n    }\n  }\n\n  addReference(): void {\n    ++this._refCount;\n    console.assert(this._refCount > 0, 'Referencing a dead object');\n  }\n\n  async replay(scale?: number, fromStep?: number, toStep?: number): Promise<string|null> {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_replaySnapshot(\n        {snapshotId: this._id, fromStep, toStep, scale: scale || 1.0});\n    return response.dataURL;\n  }\n\n  async profile(clipRect: Protocol.DOM.Rect|null): Promise<Protocol.LayerTree.PaintProfile[]> {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_profileSnapshot(\n        {snapshotId: this._id, minRepeatCount: 5, minDuration: 1, clipRect: clipRect || undefined});\n\n    return response.timings;\n  }\n\n  async commandLog(): Promise<PaintProfilerLogItem[]|null> {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_snapshotCommandLog({snapshotId: this._id});\n\n    return response.commandLog ? response.commandLog.map((entry, index) => new PaintProfilerLogItem(entry, index)) :\n                                 null;\n  }\n}\n\n\nexport class PaintProfilerLogItem {\n  method: string;\n  params: RawPaintProfilerLogItemParams|null;\n  commandIndex: number;\n\n  constructor(rawEntry: RawPaintProfilerLogItem, commandIndex: number) {\n    this.method = rawEntry.method;\n    this.params = rawEntry.params;\n    this.commandIndex = commandIndex;\n  }\n}\n\nSDKModel.register(PaintProfilerModel, {capabilities: Capability.DOM, autostart: false});\n\nexport type RawPaintProfilerLogItemParamValue = string|{[key: string]: RawPaintProfilerLogItemParamValue};\nexport type RawPaintProfilerLogItemParams = {\n  [key: string]: RawPaintProfilerLogItemParamValue,\n};\n\nexport interface SnapshotWithRect {\n  rect: Protocol.DOM.Rect;\n  snapshot: PaintProfilerSnapshot;\n}\n\nexport interface PictureFragment {\n  x: number;\n  y: number;\n  picture: string;\n}\n\nexport interface RawPaintProfilerLogItem {\n  method: string;\n  params: RawPaintProfilerLogItemParams|null;\n}\n"]}