{"version":3,"file":"SDKModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SDKModel.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAS9C,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAoD,CAAC;AAErF,MAAM,OAAO,QAAS,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAa;IAC9D,OAAO,CAAS;IAEhB,YAAY,MAAc;QACxB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe,CAAC,OAAgB;IACtC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAgB;IACnC,CAAC;IAED,KAAK,CAAC,WAAW;IACjB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe;IACrB,CAAC;IAED,OAAO;IACP,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,UAAyC,EAAE,gBAAkC;QAC3F,IAAI,gBAAgB,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,2BAA2B,UAAU,CAAC,IAAI,qCAAqC,CAAC,CAAC;SAClG;QACD,gBAAgB,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,KAAK,gBAAgB;QACzB,OAAO,gBAAgB,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../common/common.js';\nimport type {Target} from './Target.js';\n\nexport interface RegistrationInfo {\n  capabilities: number;\n  autostart: boolean;\n  early?: boolean;\n}\n\nconst registeredModels = new Map<new (arg1: Target) => SDKModel, RegistrationInfo>();\n\nexport class SDKModel extends Common.ObjectWrapper.ObjectWrapper {\n  _target: Target;\n\n  constructor(target: Target) {\n    super();\n    this._target = target;\n  }\n\n  target(): Target {\n    return this._target;\n  }\n\n  /**\n   * Override this method to perform tasks that are required to suspend the\n   * model and that still need other models in an unsuspended state.\n   */\n  async preSuspendModel(_reason?: string): Promise<void> {\n  }\n\n  async suspendModel(_reason?: string): Promise<void> {\n  }\n\n  async resumeModel(): Promise<void> {\n  }\n\n  /**\n   * Override this method to perform tasks that are required to after resuming\n   * the model and that require all models already in an unsuspended state.\n   */\n  async postResumeModel(): Promise<void> {\n  }\n\n  dispose(): void {\n  }\n\n  static register(modelClass: new(arg1: Target) => SDKModel, registrationInfo: RegistrationInfo): void {\n    if (registrationInfo.early && !registrationInfo.autostart) {\n      throw new Error(`Error registering model ${modelClass.name}: early models must be autostarted.`);\n    }\n    registeredModels.set(modelClass, registrationInfo);\n  }\n\n  static get registeredModels(): typeof registeredModels {\n    return registeredModels;\n  }\n}\n"]}