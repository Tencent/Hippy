{"version":3,"file":"FrameManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/FrameManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../common/common.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Resource} from './Resource.js'; // eslint-disable-line no-unused-vars\nimport type {ResourceTreeFrame} from './ResourceTreeModel.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';  // eslint-disable-line no-unused-vars\nimport type {Target} from './Target.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet frameManagerInstance: FrameManager|null = null;\n\n/**\n * The FrameManager is a central storage for all frames. It collects frames from all\n * ResourceTreeModel-instances (one per target), so that frames can be found by id\n * without needing to know their target.\n */\nexport class FrameManager extends Common.ObjectWrapper.ObjectWrapper implements SDKModelObserver<ResourceTreeModel> {\n  _eventListeners: WeakMap<ResourceTreeModel, Common.EventTarget.EventDescriptor[]>;\n  _frames: Map<string, {\n    frame: ResourceTreeFrame,\n    count: number,\n  }>;\n  _framesForTarget: Map<string, Set<string>>;\n  _topFrame: ResourceTreeFrame|null;\n  private creationStackTraceDataForTransferringFrame:\n      Map<string, {creationStackTrace: Protocol.Runtime.StackTrace | null, creationStackTraceTarget: Target}>;\n  private awaitedFrames: Map<string, {notInTarget?: Target, resolve: (frame: ResourceTreeFrame) => void}> = new Map();\n\n  constructor() {\n    super();\n    this._eventListeners = new WeakMap();\n    TargetManager.instance().observeModels(ResourceTreeModel, this);\n\n    // Maps frameIds to frames and a count of how many ResourceTreeModels contain this frame.\n    // (OOPIFs are usually first attached to a new target and then detached from their old target,\n    // therefore being contained in 2 models for a short period of time.)\n    this._frames = new Map();\n\n    // Maps targetIds to a set of frameIds.\n    this._framesForTarget = new Map();\n\n    this._topFrame = null;\n    this.creationStackTraceDataForTransferringFrame = new Map();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): FrameManager {\n    if (!frameManagerInstance || forceNew) {\n      frameManagerInstance = new FrameManager();\n    }\n    return frameManagerInstance;\n  }\n\n  modelAdded(resourceTreeModel: ResourceTreeModel): void {\n    const addListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameAdded, this._frameAdded, this);\n    const detachListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameDetached, this._frameDetached, this);\n    const navigatedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameNavigated, this._frameNavigated, this);\n    const resourceAddedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.ResourceAdded, this._resourceAdded, this);\n    this._eventListeners.set(\n        resourceTreeModel, [addListener, detachListener, navigatedListener, resourceAddedListener]);\n    this._framesForTarget.set(resourceTreeModel.target().id(), new Set());\n  }\n\n  modelRemoved(resourceTreeModel: ResourceTreeModel): void {\n    const listeners = this._eventListeners.get(resourceTreeModel);\n    if (listeners) {\n      Common.EventTarget.EventTarget.removeEventListeners(listeners);\n    }\n\n    // Iterate over this model's frames and decrease their count or remove them.\n    // (The ResourceTreeModel does not send FrameDetached events when a model\n    // is removed.)\n    const frameSet = this._framesForTarget.get(resourceTreeModel.target().id());\n    if (frameSet) {\n      for (const frameId of frameSet) {\n        this._decreaseOrRemoveFrame(frameId);\n      }\n    }\n    this._framesForTarget.delete(resourceTreeModel.target().id());\n  }\n\n  _frameAdded(event: Common.EventTarget.EventTargetEvent): void {\n    const frame = (event.data as ResourceTreeFrame);\n    const frameData = this._frames.get(frame.id);\n    // If the frame is already in the map, increase its count, otherwise add it to the map.\n    if (frameData) {\n      // In order to not lose frame creation stack trace information during\n      // an OOPIF transfer we need to copy it to the new frame\n      frame.setCreationStackTrace(frameData.frame.getCreationStackTraceData());\n      this._frames.set(frame.id, {frame, count: frameData.count + 1});\n    } else {\n      // If the transferring frame's detached event is received before its frame added\n      // event in the new target, the persisted frame creation stacktrace is reassigned.\n      const traceData = this.creationStackTraceDataForTransferringFrame.get(frame.id);\n      if (traceData && traceData.creationStackTrace) {\n        frame.setCreationStackTrace(traceData);\n      }\n      this._frames.set(frame.id, {frame, count: 1});\n      this.creationStackTraceDataForTransferringFrame.delete(frame.id);\n    }\n    this._resetTopFrame();\n\n    // Add the frameId to the the targetId's set of frameIds.\n    const frameSet = this._framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.add(frame.id);\n    }\n\n    this.dispatchEventToListeners(Events.FrameAddedToTarget, {frame});\n    const wasAwaited = this.awaitedFrames.get(frame.id);\n    if (wasAwaited && (!wasAwaited.notInTarget || wasAwaited.notInTarget !== frame.resourceTreeModel().target())) {\n      this.awaitedFrames.delete(frame.id);\n      wasAwaited.resolve(frame);\n    }\n  }\n\n  _frameDetached(event: Common.EventTarget.EventTargetEvent): void {\n    const frame = event.data.frame as ResourceTreeFrame;\n    const isSwap = event.data.isSwap as boolean;\n    // Decrease the frame's count or remove it entirely from the map.\n    this._decreaseOrRemoveFrame(frame.id);\n\n    // If the transferring frame's detached event is received before its frame\n    // added event in the new target, we persist the frame creation stacktrace here\n    // so that later on the frame added event in the new target it can be reassigned.\n    if (isSwap && !this._frames.get(frame.id)) {\n      const traceData = frame.getCreationStackTraceData();\n      if (traceData.creationStackTrace) {\n        this.creationStackTraceDataForTransferringFrame.set(frame.id, traceData);\n      }\n    }\n\n    // Remove the frameId from the target's set of frameIds.\n    const frameSet = this._framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.delete(frame.id);\n    }\n  }\n\n  _frameNavigated(event: Common.EventTarget.EventTargetEvent): void {\n    const frame = (event.data as ResourceTreeFrame);\n    this.dispatchEventToListeners(Events.FrameNavigated, {frame});\n    if (frame.isTopFrame()) {\n      this.dispatchEventToListeners(Events.TopFrameNavigated, {frame});\n    }\n  }\n\n  _resourceAdded(event: Common.EventTarget.EventTargetEvent): void {\n    const resource = (event.data as Resource);\n    this.dispatchEventToListeners(Events.ResourceAdded, {resource});\n  }\n\n  _decreaseOrRemoveFrame(frameId: string): void {\n    const frameData = this._frames.get(frameId);\n    if (frameData) {\n      if (frameData.count === 1) {\n        this._frames.delete(frameId);\n        this._resetTopFrame();\n        this.dispatchEventToListeners(Events.FrameRemoved, {frameId});\n      } else {\n        frameData.count--;\n      }\n    }\n  }\n\n  /**\n   * Looks for the top frame in `_frames` and sets `_topFrame` accordingly.\n   *\n   * Important: This method needs to be called everytime `_frames` is updated.\n   */\n  _resetTopFrame(): void {\n    const topFrames = this.getAllFrames().filter(frame => frame.isTopFrame());\n    this._topFrame = topFrames.length > 0 ? topFrames[0] : null;\n  }\n\n  /**\n   * Returns the ResourceTreeFrame with a given frameId.\n   * When a frame is being detached a new ResourceTreeFrame but with the same\n   * frameId is created. Consequently getFrame() will return a different\n   * ResourceTreeFrame after detachment. Callers of getFrame() should therefore\n   * immediately use the function return value and not store it for later use.\n   */\n  getFrame(frameId: string): ResourceTreeFrame|null {\n    const frameData = this._frames.get(frameId);\n    if (frameData) {\n      return frameData.frame;\n    }\n    return null;\n  }\n\n  getAllFrames(): ResourceTreeFrame[] {\n    return Array.from(this._frames.values(), frameData => frameData.frame);\n  }\n\n  getTopFrame(): ResourceTreeFrame|null {\n    return this._topFrame;\n  }\n\n  async getOrWaitForFrame(frameId: string, notInTarget?: Target): Promise<ResourceTreeFrame> {\n    const frame = this.getFrame(frameId);\n    if (frame && (!notInTarget || notInTarget !== frame.resourceTreeModel().target())) {\n      return frame;\n    }\n    return new Promise<ResourceTreeFrame>(resolve => {\n      this.awaitedFrames.set(frameId, {notInTarget, resolve});\n    });\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  // The FrameAddedToTarget event is sent whenever a frame is added to a target.\n  // This means that for OOPIFs it is sent twice: once when it's added to a\n  // parent target and a second time when it's added to its own target.\n  FrameAddedToTarget = 'FrameAddedToTarget',\n  FrameNavigated = 'FrameNavigated',\n  // The FrameRemoved event is only sent when a frame has been detached from\n  // all targets.\n  FrameRemoved = 'FrameRemoved',\n  ResourceAdded = 'ResourceAdded',\n  TopFrameNavigated = 'TopFrameNavigated',\n}\n"]}