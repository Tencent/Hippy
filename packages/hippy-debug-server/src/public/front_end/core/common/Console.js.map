{"version":3,"file":"Console.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Console.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,eAAe,CAAC;AAErC,IAAI,eAAwB,CAAC;AAE7B,MAAM,OAAO,OAAQ,SAAQ,aAAa;IACxC,SAAS,CAAY;IACrB;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,EAAC,QAAQ,KAErB,EAAC,QAAQ,EAAE,KAAK,EAAC;QACnB,IAAI,CAAC,eAAe,IAAI,QAAQ,EAAE;YAChC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;SACjC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,UAAU,CAAC,IAAY,EAAE,KAAmB,EAAE,IAAc;QAC1D,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,IAAI,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,GAAG,CAAC,IAAY;QACd,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,IAAI,CAAC,IAAY;QACf,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;CACF;AAED,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,MAEX;AAFD,WAAY,MAAM;IAChB,uCAA6B,CAAA;AAC/B,CAAC,EAFW,MAAM,KAAN,MAAM,QAEjB;AAGD,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,mCAAmB,CAAA;IACnB,+BAAe,CAAA;AACjB,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAGD,MAAM,OAAO,OAAO;IAClB,IAAI,CAAS;IACb,KAAK,CAAe;IACpB,SAAS,CAAS;IAClB,IAAI,CAAU;IACd,YAAY,IAAY,EAAE,KAAmB,EAAE,SAAiB,EAAE,IAAa;QAC7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\nlet consoleInstance: Console;\n\nexport class Console extends ObjectWrapper {\n  _messages: Message[];\n  /**\n   * Instantiable via the instance() factory below.\n   */\n  private constructor() {\n    super();\n    this._messages = [];\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): Console {\n    if (!consoleInstance || forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  addMessage(text: string, level: MessageLevel, show?: boolean): void {\n    const message = new Message(text, level || MessageLevel.Info, Date.now(), show || false);\n    this._messages.push(message);\n    this.dispatchEventToListeners(Events.MessageAdded, message);\n  }\n\n  log(text: string): void {\n    this.addMessage(text, MessageLevel.Info);\n  }\n\n  warn(text: string): void {\n    this.addMessage(text, MessageLevel.Warning);\n  }\n\n  error(text: string): void {\n    this.addMessage(text, MessageLevel.Error, true);\n  }\n\n  messages(): Message[] {\n    return this._messages;\n  }\n\n  show(): void {\n    this.showPromise();\n  }\n\n  showPromise(): Promise<void> {\n    return reveal(this);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  MessageAdded = 'messageAdded',\n}\n\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum MessageLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n}\n\n\nexport class Message {\n  text: string;\n  level: MessageLevel;\n  timestamp: number;\n  show: boolean;\n  constructor(text: string, level: MessageLevel, timestamp: number, show: boolean) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n  }\n}\n"]}