{"version":3,"file":"Linkifier.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Linkifier.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,MAAM,OAAgB,SAAS;IAG7B,MAAM,CAAC,OAAO,CAAC,MAAmB,EAAE,OAAiB;QACnD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,GAAG,MAAM,CAAC,CAAC,CAAC;SAC9D;QACD,MAAM,qBAAqB,GAAG,iCAAiC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,qBAAqB,EAAE;YAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,sCAAsC,GAAG,MAAM,CAAC,CAAC,CAAC;SACnF;QACD,OAAO,qBAAqB,CAAC,aAAa,EAAE,CAAC,IAAI,CAC7C,SAAS,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5G,CAAC;CACF;AAMD,MAAM,oBAAoB,GAA4B,EAAE,CAAC;AAEzD,MAAM,UAAU,iBAAiB,CAAC,YAAmC;IACnE,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,iCAAiC,CAAC,MAAc;IAC9D,OAAO,oBAAoB,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;IAExE,SAAS,mCAAmC,CAAC,qBAA4C;QACvF,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;QACD,KAAK,MAAM,WAAW,IAAI,qBAAqB,CAAC,YAAY,EAAE,EAAE;YAC9D,mEAAmE;YACnE,mBAAmB;YACnB,IAAI,MAAM,YAAY,WAAW,EAAE;gBACjC,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nexport abstract class Linkifier {\n  abstract linkify(object: Object, options?: Options): Node;\n\n  static linkify(object: Object|null, options?: Options): Promise<Node> {\n    if (!object) {\n      return Promise.reject(new Error('Can\\'t linkify ' + object));\n    }\n    const linkifierRegistration = getApplicableRegisteredlinkifiers(object)[0];\n    if (!linkifierRegistration) {\n      return Promise.reject(new Error('No linkifiers registered for object ' + object));\n    }\n    return linkifierRegistration.loadLinkifier().then(\n        linkifier => /** @type {!Linkifier} */ (linkifier).linkify(/** @type {!Object} */ (object), options));\n  }\n}\nexport interface Options {\n  tooltip?: string;\n  preventKeyboardFocus?: boolean;\n}\n\nconst registeredLinkifiers: LinkifierRegistration[] = [];\n\nexport function registerLinkifier(registration: LinkifierRegistration): void {\n  registeredLinkifiers.push(registration);\n}\n\nexport function getApplicableRegisteredlinkifiers(object: Object): LinkifierRegistration[] {\n  return registeredLinkifiers.filter(isLinkifierApplicableToContextTypes);\n\n  function isLinkifierApplicableToContextTypes(linkifierRegistration: LinkifierRegistration): boolean {\n    if (!linkifierRegistration.contextTypes) {\n      return true;\n    }\n    for (const contextType of linkifierRegistration.contextTypes()) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      if (object instanceof contextType) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface LinkifierRegistration {\n  loadLinkifier: () => Promise<Linkifier>;\n  contextTypes?: (() => Array<unknown>);\n}\n"]}