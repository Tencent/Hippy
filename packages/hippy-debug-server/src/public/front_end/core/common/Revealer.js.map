{"version":3,"file":"Revealer.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Revealer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js'; // eslint-disable-line no-unused-vars\n\nconst UIStrings = {\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  elementsPanel: 'Elements panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  stylesSidebar: 'styles sidebar',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  changesDrawer: 'Changes drawer',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  issuesView: 'Issues view',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  networkPanel: 'Network panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  applicationPanel: 'Application panel',\n  /**\n  *@description The UI destination when right clicking an item that can be revealed\n  */\n  sourcesPanel: 'Sources panel',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/common/Revealer.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport abstract class Revealer {\n  abstract reveal(object: Object, omitFocus?: boolean): Promise<void>;\n}\n\nexport let reveal = async function(revealable: Object|null, omitFocus?: boolean): Promise<void> {\n  if (!revealable) {\n    return Promise.reject(new Error('Can\\'t reveal ' + revealable));\n  }\n  const revealers =\n      await Promise.all(getApplicableRegisteredRevealers(revealable).map(registration => registration.loadRevealer()));\n\n  return reveal(revealers);\n  function reveal(revealers: Revealer[]): Promise<void> {\n    const promises = [];\n    for (let i = 0; i < revealers.length; ++i) {\n      promises.push(revealers[i].reveal((revealable as Object), omitFocus));\n    }\n    return Promise.race(promises);\n  }\n};\n\nexport function setRevealForTest(newReveal: (arg0: Object|null, arg1?: boolean|undefined) => Promise<undefined>): void {\n  reveal = newReveal;\n}\n\nexport const revealDestination = function(revealable: Object|null): string|null {\n  const extension = revealable ? getApplicableRegisteredRevealers(revealable)[0] : registeredRevealers[0];\n  if (!extension) {\n    return null;\n  }\n  return extension.destination?.() || null;\n};\n\nconst registeredRevealers: RevealerRegistration[] = [];\n\nexport function registerRevealer(registration: RevealerRegistration): void {\n  registeredRevealers.push(registration);\n}\n\nfunction getApplicableRegisteredRevealers(revealable: Object): RevealerRegistration[] {\n  return registeredRevealers.filter(isRevealerApplicableToContextTypes);\n\n  function isRevealerApplicableToContextTypes(revealerRegistration: RevealerRegistration): boolean {\n    if (!revealerRegistration.contextTypes) {\n      return true;\n    }\n    for (const contextType of revealerRegistration.contextTypes()) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      if (revealable instanceof contextType) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface RevealerRegistration {\n  contextTypes: () => Array<unknown>;\n  loadRevealer: () => Promise<Revealer>;\n  destination?: RevealerDestination;\n}\n\nexport const RevealerDestination = {\n  ELEMENTS_PANEL: i18nLazyString(UIStrings.elementsPanel),\n  STYLES_SIDEBAR: i18nLazyString(UIStrings.stylesSidebar),\n  CHANGES_DRAWER: i18nLazyString(UIStrings.changesDrawer),\n  ISSUES_VIEW: i18nLazyString(UIStrings.issuesView),\n  NETWORK_PANEL: i18nLazyString(UIStrings.networkPanel),\n  APPLICATION_PANEL: i18nLazyString(UIStrings.applicationPanel),\n  SOURCES_PANEL: i18nLazyString(UIStrings.sourcesPanel),\n};\n\nexport type RevealerDestination = () => Platform.UIString.LocalizedString;\n"]}