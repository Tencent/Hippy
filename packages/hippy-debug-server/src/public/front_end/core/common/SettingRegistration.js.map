{"version":3,"file":"SettingRegistration.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SettingRegistration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport type {SettingStorageType} from './Settings.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the Elements Panel\n  */\n  elements: 'Elements',\n  /**\n  *@description Text for DevTools appearance\n  */\n  appearance: 'Appearance',\n  /**\n  *@description Name of the Sources panel\n  */\n  sources: 'Sources',\n  /**\n  *@description Title of the Network tool\n  */\n  network: 'Network',\n  /**\n  *@description Text for the performance of something\n  */\n  performance: 'Performance',\n  /**\n  *@description Title of the Console tool\n  */\n  console: 'Console',\n  /**\n  *@description A title of the 'Persistence' setting category\n  */\n  persistence: 'Persistence',\n  /**\n  *@description Text that refers to the debugger\n  */\n  debugger: 'Debugger',\n  /**\n  *@description Text describing global shortcuts and settings that are available throughout the DevTools\n  */\n  global: 'Global',\n  /**\n  *@description Title of the Rendering tool\n  */\n  rendering: 'Rendering',\n  /**\n  *@description Title of a section on CSS Grid tooling\n  */\n  grid: 'Grid',\n  /**\n  *@description Text for the mobile platform, as opposed to desktop\n  */\n  mobile: 'Mobile',\n  /**\n  *@description Text for the memory of the page\n  */\n  memory: 'Memory',\n  /**\n  *@description Text for the extension of the page\n  */\n  extension: 'Extension',\n  /**\n  *@description Text for the adorner of the page\n  */\n  adorner: 'Adorner',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/common/SettingRegistration.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet registeredSettings: Array<SettingRegistration> = [];\nconst settingNameSet = new Set<string>();\n\n\nexport function registerSettingExtension(registration: SettingRegistration): void {\n  const settingName = registration.settingName;\n  if (settingNameSet.has(settingName)) {\n    throw new Error(`Duplicate setting name '${settingName}'`);\n  }\n  settingNameSet.add(settingName);\n  registeredSettings.push(registration);\n}\n\nexport function getRegisteredSettings(): Array<SettingRegistration> {\n  return registeredSettings.filter(\n      setting =>\n          Root.Runtime.Runtime.isDescriptorEnabled({experiment: setting.experiment, condition: setting.condition}));\n}\n\nexport function registerSettingsForTest(settings: Array<SettingRegistration>, forceReset: boolean = false): void {\n  if (registeredSettings.length === 0 || forceReset) {\n    registeredSettings = settings;\n    settingNameSet.clear();\n    for (const setting of settings) {\n      const settingName = setting.settingName;\n      if (settingNameSet.has(settingName)) {\n        throw new Error(`Duplicate setting name '${settingName}'`);\n      }\n      settingNameSet.add(settingName);\n    }\n  }\n}\n\nexport function resetSettings(): void {\n  registeredSettings = [];\n}\n\nexport function maybeRemoveSettingExtension(settingName: string): boolean {\n  const settingIndex = registeredSettings.findIndex(setting => setting.settingName === settingName);\n  if (settingIndex < 0 || !settingNameSet.delete(settingName)) {\n    return false;\n  }\n  registeredSettings.splice(settingIndex, 1);\n  return true;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum SettingCategory {\n  NONE = '',  // `NONE` must be a falsy value. Legacy code uses if-checks for the category.\n  ELEMENTS = 'ELEMENTS',\n  APPEARANCE = 'APPEARANCE',\n  SOURCES = 'SOURCES',\n  NETWORK = 'NETWORK',\n  PERFORMANCE = 'PERFORMANCE',\n  CONSOLE = 'CONSOLE',\n  PERSISTENCE = 'PERSISTENCE',\n  DEBUGGER = 'DEBUGGER',\n  GLOBAL = 'GLOBAL',\n  RENDERING = 'RENDERING',\n  GRID = 'GRID',\n  MOBILE = 'MOBILE',\n  EMULATION = 'EMULATION',\n  MEMORY = 'MEMORY',\n  EXTENSIONS = 'EXTENSIONS',\n  ADORNER = 'ADORNER',\n}\n\nexport function getLocalizedSettingsCategory(category: SettingCategory): string|Platform.UIString.LocalizedString {\n  switch (category) {\n    case SettingCategory.ELEMENTS:\n      return i18nString(UIStrings.elements);\n    case SettingCategory.APPEARANCE:\n      return i18nString(UIStrings.appearance);\n    case SettingCategory.SOURCES:\n      return i18nString(UIStrings.sources);\n    case SettingCategory.NETWORK:\n      return i18nString(UIStrings.network);\n    case SettingCategory.PERFORMANCE:\n      return i18nString(UIStrings.performance);\n    case SettingCategory.CONSOLE:\n      return i18nString(UIStrings.console);\n    case SettingCategory.PERSISTENCE:\n      return i18nString(UIStrings.persistence);\n    case SettingCategory.DEBUGGER:\n      return i18nString(UIStrings.debugger);\n    case SettingCategory.GLOBAL:\n      return i18nString(UIStrings.global);\n    case SettingCategory.RENDERING:\n      return i18nString(UIStrings.rendering);\n    case SettingCategory.GRID:\n      return i18nString(UIStrings.grid);\n    case SettingCategory.MOBILE:\n      return i18nString(UIStrings.mobile);\n    case SettingCategory.EMULATION:\n      return i18nString(UIStrings.console);\n    case SettingCategory.MEMORY:\n      return i18nString(UIStrings.memory);\n    case SettingCategory.EXTENSIONS:\n      return i18nString(UIStrings.extension);\n    case SettingCategory.ADORNER:\n      return i18nString(UIStrings.adorner);\n    case SettingCategory.NONE:\n      return '';\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum SettingType {\n  ARRAY = 'array',\n  REGEX = 'regex',\n  ENUM = 'enum',\n  BOOLEAN = 'boolean',\n}\n\nexport interface RegExpSettingItem {\n  pattern: string;\n  disabled?: boolean;\n}\n\nexport interface SettingRegistration {\n  /**\n   * The category with which the setting is displayed in the UI.\n   */\n  category?: SettingCategory;\n  /**\n   * Used to sort on screen the settings that belong to the same category.\n   */\n  order?: number;\n  /**\n   * The title with which the setting is shown on screen.\n   */\n  title?: () => Platform.UIString.LocalizedString;\n  /**\n   * The title with which the setting is shown on screen, if the platform running DevTools is 'mac'.\n   * If not set, the 'title' field will be used instead.\n   */\n  titleMac?: () => Platform.UIString.LocalizedString;\n  /**\n   * The identifier of the setting.\n   */\n  settingName: string;\n  /**\n   * Determines how the possible values of the setting are expressed.\n   *\n   * - If the setting can only be enabled and disabled use BOOLEAN\n   * - If the setting has a list of possible values use ENUM\n   * - If each setting value is a set of objects use ARRAY\n   * - If the setting value is a regular expression use REGEX\n   */\n  settingType: SettingType;\n  /**\n   * The value set by default to the setting.\n   */\n  defaultValue: unknown;\n  /**\n   * Words used to find a setting in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * The possible values the setting can have, each with a description composed of a title and an optional text.\n   */\n  options?: Array<SettingExtensionOption>;\n  /**\n   * Whether DevTools must be reloaded for a change in the setting to take effect.\n   */\n  reloadRequired?: boolean;\n  /**\n   * Determines if the setting value is stored in the global, local or session storage.\n   */\n  storageType?: SettingStorageType;\n  /**\n   * A condition that, when present in the queryParamsObject of Runtime, constraints the value\n   * of the setting to be changed only if the user set it.\n   */\n  userActionCondition?: string;\n  /**\n   * The name of the experiment a setting is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the setting respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition represented as a string the setting's availability depends on. Conditions come\n   * from the queryParamsObject defined in Runtime and just as the experiment field, they determine the availability\n   * of the setting. A condition can be negated by prepending a ‘!’ to the value of the condition\n   * property and in that case the behaviour of the setting's availability will be inverted.\n   */\n  condition?: Root.Runtime.ConditionName;\n}\ninterface LocalizedSettingExtensionOption {\n  value: boolean|string;\n  title: () => Platform.UIString.LocalizedString;\n  text?: () => Platform.UIString.LocalizedString;\n  raw?: false;\n}\ninterface RawSettingExtensionOption {\n  value: boolean|string;\n  title: () => Platform.UIString.LocalizedString;\n  /**\n   * Text used to describe the option. Must be localized if 'raw' is false.\n   */\n  text?: string;\n  raw: true;\n}\nexport type SettingExtensionOption = LocalizedSettingExtensionOption|RawSettingExtensionOption;\n"]}