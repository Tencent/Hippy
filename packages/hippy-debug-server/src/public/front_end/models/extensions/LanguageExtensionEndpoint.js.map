{"version":3,"file":"LanguageExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/LanguageExtensionEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as SDK from '../../core/sdk/sdk.js';    // eslint-disable-line no-unused-vars\nimport * as Bindings from '../bindings/bindings.js';  // eslint-disable-line no-unused-vars\n\nexport class LanguageExtensionEndpoint extends Bindings.DebuggerLanguagePlugins.DebuggerLanguagePlugin {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _commands: any;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _events: any;\n  _supportedScriptTypes: {\n    language: string,\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    symbol_types: Array<string>,\n  };\n  _port: MessagePort;\n  _nextRequestId: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _pendingRequests: Map<any, any>;\n  constructor(\n      name: string, supportedScriptTypes: {\n        language: string,\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        symbol_types: Array<string>,\n      },\n      port: MessagePort) {\n    super(name);\n    // @ts-expect-error TODO(crbug.com/1011811): Fix after extensionAPI is migrated.\n    this._commands = Extensions.extensionAPI.LanguageExtensionPluginCommands;\n    // @ts-expect-error TODO(crbug.com/1011811): Fix after extensionAPI is migrated.\n    this._events = Extensions.extensionAPI.LanguageExtensionPluginEvents;\n    this._supportedScriptTypes = supportedScriptTypes;\n    this._port = port;\n    this._port.onmessage = this._onResponse.bind(this);\n    this._nextRequestId = 0;\n    this._pendingRequests = new Map();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _sendRequest(method: string, parameters: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const requestId = this._nextRequestId++;\n      this._pendingRequests.set(requestId, {resolve, reject});\n      this._port.postMessage({requestId, method, parameters});\n    });\n  }\n\n  _onResponse({data}: MessageEvent<{\n    requestId: number,\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    result: any,\n    error: Error|null,\n  }|{\n    event: string,\n  }>): void {\n    if ('event' in data) {\n      const {event} = data;\n      switch (event) {\n        case this._events.UnregisteredLanguageExtensionPlugin: {\n          for (const {reject} of this._pendingRequests.values()) {\n            reject(new Error('Language extension endpoint disconnected'));\n          }\n          this._pendingRequests.clear();\n          this._port.close();\n          const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n          if (pluginManager) {\n            pluginManager.removePlugin(this);\n          }\n          break;\n        }\n      }\n      return;\n    }\n    const {requestId, result, error} = data;\n    if (!this._pendingRequests.has(requestId)) {\n      console.error(`No pending request ${requestId}`);\n      return;\n    }\n    const {resolve, reject} = this._pendingRequests.get(requestId);\n    this._pendingRequests.delete(requestId);\n    if (error) {\n      reject(new Error(error.message));\n    } else {\n      resolve(result);\n    }\n  }\n\n  handleScript(script: SDK.Script.Script): boolean {\n    const language = script.scriptLanguage();\n    return language !== null && script.debugSymbols !== null && language === this._supportedScriptTypes.language &&\n        this._supportedScriptTypes.symbol_types.includes(script.debugSymbols.type);\n  }\n\n  /** Notify the plugin about a new script\n     */\n  addRawModule(rawModuleId: string, symbolsURL: string, rawModule: Bindings.DebuggerLanguagePlugins.RawModule):\n      Promise<string[]> {\n    return /** @type {!Promise<!Array<string>>} */ this._sendRequest(\n               this._commands.AddRawModule, {rawModuleId, symbolsURL, rawModule}) as Promise<string[]>;\n  }\n\n  /**\n   * Notifies the plugin that a script is removed.\n   */\n  removeRawModule(rawModuleId: string): Promise<void> {\n    return /** @type {!Promise<void>} */ this._sendRequest(this._commands.RemoveRawModule, {rawModuleId}) as\n        Promise<void>;\n  }\n\n  /** Find locations in raw modules from a location in a source file\n     */\n  sourceLocationToRawLocation(sourceLocation: Bindings.DebuggerLanguagePlugins.SourceLocation):\n      Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]> {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ this._sendRequest(\n               this._commands.SourceLocationToRawLocation, {sourceLocation}) as\n        Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]>;\n  }\n\n  /** Find locations in source files from a location in a raw module\n     */\n  rawLocationToSourceLocation(rawLocation: Bindings.DebuggerLanguagePlugins.RawLocation):\n      Promise<Bindings.DebuggerLanguagePlugins.SourceLocation[]> {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.SourceLocation>>} */ this._sendRequest(\n               this._commands.RawLocationToSourceLocation, {rawLocation}) as\n        Promise<Bindings.DebuggerLanguagePlugins.SourceLocation[]>;\n  }\n\n  getScopeInfo(type: string): Promise<Bindings.DebuggerLanguagePlugins.ScopeInfo> {\n    return /** @type {!Promise<!Bindings.DebuggerLanguagePlugins.ScopeInfo>} */ this._sendRequest(\n               this._commands.GetScopeInfo, {type}) as Promise<Bindings.DebuggerLanguagePlugins.ScopeInfo>;\n  }\n\n  /** List all variables in lexical scope at a given location in a raw module\n     */\n  listVariablesInScope(rawLocation: Bindings.DebuggerLanguagePlugins.RawLocation):\n      Promise<Bindings.DebuggerLanguagePlugins.Variable[]> {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.Variable>>} */ this._sendRequest(\n               this._commands.ListVariablesInScope, {rawLocation}) as\n        Promise<Bindings.DebuggerLanguagePlugins.Variable[]>;\n  }\n\n  /** List all function names (including inlined frames) at location\n     */\n  getFunctionInfo(rawLocation: Bindings.DebuggerLanguagePlugins.RawLocation): Promise<{\n    frames: Array<Bindings.DebuggerLanguagePlugins.FunctionInfo>,\n  }> {\n    return /** @type {!Promise<!{frames: !Array<!Bindings.DebuggerLanguagePlugins.FunctionInfo>}>} */ this._sendRequest(\n               this._commands.GetFunctionInfo, {rawLocation}) as Promise<{\n             frames: Array<Bindings.DebuggerLanguagePlugins.FunctionInfo>,\n           }>;\n  }\n\n  /** Find locations in raw modules corresponding to the inline function\n     *  that rawLocation is in.\n     */\n  getInlinedFunctionRanges(rawLocation: Bindings.DebuggerLanguagePlugins.RawLocation):\n      Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]> {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ this._sendRequest(\n               this._commands.GetInlinedFunctionRanges, {rawLocation}) as\n        Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]>;\n  }\n\n  /** Find locations in raw modules corresponding to inline functions\n     *  called by the function or inline frame that rawLocation is in.\n     */\n  getInlinedCalleesRanges(rawLocation: Bindings.DebuggerLanguagePlugins.RawLocation):\n      Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]> {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ this._sendRequest(\n               this._commands.GetInlinedCalleesRanges, {rawLocation}) as\n        Promise<Bindings.DebuggerLanguagePlugins.RawLocationRange[]>;\n  }\n\n  getTypeInfo(expression: string, context: Bindings.DebuggerLanguagePlugins.RawLocation): Promise<{\n    typeInfos: Array<Bindings.DebuggerLanguagePlugins.TypeInfo>,\n    base: Bindings.DebuggerLanguagePlugins.EvalBase,\n  }|null> {\n    return /** @type {!Promise<?{typeInfos: !Array<!Bindings.DebuggerLanguagePlugins.TypeInfo>, base: !Bindings.DebuggerLanguagePlugins.EvalBase}>} */ this\n               ._sendRequest(this._commands.GetTypeInfo, {expression, context}) as Promise<{\n             typeInfos: Array<Bindings.DebuggerLanguagePlugins.TypeInfo>,\n             base: Bindings.DebuggerLanguagePlugins.EvalBase,\n           }|null>;\n  }\n\n  getFormatter(\n      expressionOrField: string|{\n        base: Bindings.DebuggerLanguagePlugins.EvalBase,\n        field: Array<Bindings.DebuggerLanguagePlugins.FieldInfo>,\n      },\n      context: Bindings.DebuggerLanguagePlugins.RawLocation): Promise<{\n    js: string,\n  }> {\n    return /** @type {!Promise<!{js: string}>} */ this._sendRequest(\n               this._commands.GetFormatter, {expressionOrField, context}) as Promise<{\n             js: string,\n           }>;\n  }\n\n  getInspectableAddress(field: {\n    base: Bindings.DebuggerLanguagePlugins.EvalBase,\n    field: Array<Bindings.DebuggerLanguagePlugins.FieldInfo>,\n  }): Promise<{\n    js: string,\n  }> {\n    return /** @type {!Promise<!{js: string}>}} */ this._sendRequest(this._commands.GetInspectableAddress, {field}) as\n        Promise<{\n             js: string,\n           }>;\n  }\n\n  async getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[]|undefined> {\n    return /** {!Promise<!Array<number>|undefined>} */ (\n        this._sendRequest(this._commands.GetMappedLines, {rawModuleId, sourceFileURL}));\n  }\n\n  dispose(): void {\n  }\n}\n"]}