{"version":3,"file":"TempFile.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/TempFile.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';  // eslint-disable-line no-unused-vars\n\nimport type * as SDK from '../../core/sdk/sdk.js'; // eslint-disable-line no-unused-vars\n\nimport type {ChunkedReader} from './FileUtils.js';\nimport {ChunkedFileReader} from './FileUtils.js';  // eslint-disable-line no-unused-vars\n\nexport class TempFile {\n  _lastBlob: Blob|null;\n  constructor() {\n    this._lastBlob = null;\n  }\n\n  write(pieces: (string|Blob)[]): void {\n    if (this._lastBlob) {\n      pieces.unshift(this._lastBlob);\n    }\n    this._lastBlob = new Blob(pieces, {type: 'text/plain'});\n  }\n\n  read(): Promise<string|null> {\n    return this.readRange();\n  }\n\n  size(): number {\n    return this._lastBlob ? this._lastBlob.size : 0;\n  }\n\n  async readRange(startOffset?: number, endOffset?: number): Promise<string|null> {\n    if (!this._lastBlob) {\n      Common.Console.Console.instance().error('Attempt to read a temp file that was never written');\n      return '';\n    }\n    const blob = typeof startOffset === 'number' || typeof endOffset === 'number' ?\n        this._lastBlob.slice((startOffset as number), (endOffset as number)) :\n        this._lastBlob;\n\n    const reader = new FileReader();\n    try {\n      await new Promise((resolve, reject) => {\n        reader.onloadend = resolve;\n        reader.onerror = reject;\n        reader.readAsText(blob);\n      });\n    } catch (error) {\n      Common.Console.Console.instance().error('Failed to read from temp file: ' + error.message);\n    }\n\n    return reader.result as string | null;\n  }\n\n  async copyToOutputStream(\n      outputStream: Common.StringOutputStream.OutputStream,\n      progress?: ((arg0: ChunkedReader) => void)): Promise<DOMError|null> {\n    if (!this._lastBlob) {\n      outputStream.close();\n      return null;\n    }\n    const reader = new ChunkedFileReader((this._lastBlob as File), 10 * 1000 * 1000, progress);\n    return reader.read(outputStream).then(success => success ? null : reader.error());\n  }\n\n  remove(): void {\n    this._lastBlob = null;\n  }\n}\n\nexport class TempFileBackingStorage implements SDK.TracingModel.BackingStorage {\n  _file: TempFile|null;\n  _strings!: string[];\n  _stringsLength!: number;\n\n  constructor() {\n    this._file = null;\n    this.reset();\n  }\n\n  appendString(string: string): void {\n    this._strings.push(string);\n    this._stringsLength += string.length;\n    const flushStringLength = 10 * 1024 * 1024;\n    if (this._stringsLength > flushStringLength) {\n      this._flush();\n    }\n  }\n\n  appendAccessibleString(string: string): () => Promise<string|null> {\n    this._flush();\n    if (!this._file) {\n      return async(): Promise<null> => null;\n    }\n    const startOffset = this._file.size();\n    this._strings.push(string);\n    this._flush();\n    return this._file.readRange.bind(this._file, startOffset, this._file.size());\n  }\n\n  _flush(): void {\n    if (!this._strings.length) {\n      return;\n    }\n    if (!this._file) {\n      this._file = new TempFile();\n    }\n    this._stringsLength = 0;\n    this._file.write(this._strings.splice(0));\n  }\n\n  finishWriting(): void {\n    this._flush();\n  }\n\n  reset(): void {\n    if (this._file) {\n      this._file.remove();\n    }\n    this._file = null;\n    this._strings = [];\n    this._stringsLength = 0;\n  }\n\n  writeToStream(outputStream: Common.StringOutputStream.OutputStream): Promise<DOMError|null> {\n    return this._file ? this._file.copyToOutputStream(outputStream) : Promise.resolve(null);\n  }\n}\n"]}