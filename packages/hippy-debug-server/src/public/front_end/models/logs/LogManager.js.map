{"version":3,"file":"LogManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/logs/LogManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {NetworkLog} from './NetworkLog.js';\n\nconst modelToEventListeners = new WeakMap<SDK.LogModel.LogModel, Common.EventTarget.EventDescriptor[]>();\n\nlet instance: LogManager|null = null;\n\nexport class LogManager implements SDK.TargetManager.SDKModelObserver<SDK.LogModel.LogModel> {\n  private constructor() {\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.LogModel.LogModel, this);\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): LogManager {\n    if (!instance || forceNew) {\n      instance = new LogManager();\n    }\n\n    return instance;\n  }\n\n  modelAdded(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = [];\n    eventListeners.push(logModel.addEventListener(SDK.LogModel.Events.EntryAdded, this.logEntryAdded, this));\n    modelToEventListeners.set(logModel, eventListeners);\n  }\n\n  modelRemoved(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = modelToEventListeners.get(logModel);\n    if (eventListeners) {\n      Common.EventTarget.EventTarget.removeEventListeners(eventListeners);\n    }\n  }\n\n  private logEntryAdded(event: Common.EventTarget.EventTargetEvent): void {\n    const data = event.data as {\n      logModel: SDK.LogModel.LogModel,\n      entry: Protocol.Log.LogEntry,\n    };\n    const target = data.logModel.target();\n\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        target.model(SDK.RuntimeModel.RuntimeModel), data.entry.source, data.entry.level, data.entry.text, undefined,\n        data.entry.url, data.entry.lineNumber, undefined, [data.entry.text, ...(data.entry.args || [])],\n        data.entry.stackTrace, data.entry.timestamp, undefined, undefined, data.entry.workerId);\n\n    if (data.entry.networkRequestId) {\n      NetworkLog.instance().associateConsoleMessageWithRequest(consoleMessage, data.entry.networkRequestId);\n    }\n\n    if (consoleMessage.source === Protocol.Log.LogEntrySource.Worker) {\n      const workerId = consoleMessage.workerId || '';\n      // We have a copy of worker messages reported through the page, so that\n      // user can see messages from the worker which has been already destroyed.\n      // When opening DevTools, give us some time to connect to the worker and\n      // not report the message twice if the worker is still alive.\n      if (SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n        return;\n      }\n      setTimeout(() => {\n        if (!SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n          SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n        }\n      }, 1000);\n    } else {\n      SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n    }\n  }\n}\n"]}