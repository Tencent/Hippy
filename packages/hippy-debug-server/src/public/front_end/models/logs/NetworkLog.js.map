{"version":3,"file":"NetworkLog.js","sourceRoot":"","sources":["../../../../../../front_end/models/logs/NetworkLog.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Network Log\n  */\n  anonymous: '<anonymous>',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/logs/NetworkLog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _instance: NetworkLog;\n\nexport class NetworkLog extends Common.ObjectWrapper.ObjectWrapper implements\n    SDK.TargetManager.SDKModelObserver<SDK.NetworkManager.NetworkManager> {\n  _requests: SDK.NetworkRequest.NetworkRequest[];\n  _sentNetworkRequests: Protocol.Network.Request[];\n  _receivedNetworkResponses: Protocol.Network.Response[];\n  _requestsSet: Set<SDK.NetworkRequest.NetworkRequest>;\n  _requestsMap: Map<string, SDK.NetworkRequest.NetworkRequest[]>;\n  _pageLoadForManager: Map<SDK.NetworkManager.NetworkManager, SDK.PageLoad.PageLoad>;\n  _isRecording: boolean;\n  _modelListeners: WeakMap<SDK.NetworkManager.NetworkManager, Common.EventTarget.EventDescriptor[]>;\n  _initiatorData: WeakMap<SDK.NetworkRequest.NetworkRequest, InitiatorData>;\n  _unresolvedPreflightRequests: Map<string, SDK.NetworkRequest.NetworkRequest>;\n\n  constructor() {\n    super();\n    this._requests = [];\n    this._sentNetworkRequests = [];\n    this._receivedNetworkResponses = [];\n    this._requestsSet = new Set();\n    this._requestsMap = new Map();\n    this._pageLoadForManager = new Map();\n    this._isRecording = true;\n    this._modelListeners = new WeakMap();\n    this._initiatorData = new WeakMap();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    const recordLogSetting: Common.Settings.Setting<boolean> =\n        Common.Settings.Settings.instance().moduleSetting('network_log.record-log');\n    recordLogSetting.addChangeListener(() => {\n      const preserveLogSetting = Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log');\n      if (!preserveLogSetting.get() && recordLogSetting.get()) {\n        this.reset(true);\n      }\n      this.setIsRecording((recordLogSetting.get() as boolean));\n    }, this);\n    this._unresolvedPreflightRequests = new Map();\n  }\n\n  static instance(): NetworkLog {\n    if (!_instance) {\n      _instance = new NetworkLog();\n    }\n    return _instance;\n  }\n\n  modelAdded(networkManager: SDK.NetworkManager.NetworkManager): void {\n    const eventListeners = [];\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, this._onRequestStarted, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestUpdated, this._onRequestUpdated, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestRedirected, this._onRequestRedirect, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this._onRequestUpdated, this));\n    eventListeners.push(networkManager.addEventListener(\n        SDK.NetworkManager.Events.MessageGenerated, this._networkMessageGenerated.bind(this, networkManager)));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this._onResponseReceived, this));\n\n    const resourceTreeModel = networkManager.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      eventListeners.push(\n          resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.WillReloadPage, this._willReloadPage, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.MainFrameNavigated, this._onMainFrameNavigated, this));\n      eventListeners.push(resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.Load, this._onLoad, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.DOMContentLoaded, this._onDOMContentLoaded.bind(this, resourceTreeModel)));\n    }\n\n    this._modelListeners.set(networkManager, eventListeners);\n  }\n\n  modelRemoved(networkManager: SDK.NetworkManager.NetworkManager): void {\n    this._removeNetworkManagerListeners(networkManager);\n  }\n\n  _removeNetworkManagerListeners(networkManager: SDK.NetworkManager.NetworkManager): void {\n    Common.EventTarget.EventTarget.removeEventListeners(this._modelListeners.get(networkManager) || []);\n  }\n\n  setIsRecording(enabled: boolean): void {\n    if (this._isRecording === enabled) {\n      return;\n    }\n    this._isRecording = enabled;\n    if (enabled) {\n      SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    } else {\n      SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.NetworkManager.NetworkManager, this);\n      SDK.TargetManager.TargetManager.instance()\n          .models(SDK.NetworkManager.NetworkManager)\n          .forEach(this._removeNetworkManagerListeners.bind(this));\n    }\n  }\n\n  requestForURL(url: string): SDK.NetworkRequest.NetworkRequest|null {\n    return this._requests.find(request => request.url() === url) || null;\n  }\n\n  originalRequestForURL(url: string): Protocol.Network.Request|null {\n    return this._sentNetworkRequests.find(request => request.url === url) || null;\n  }\n\n  originalResponseForURL(url: string): Protocol.Network.Response|null {\n    return this._receivedNetworkResponses.find(response => response.url === url) || null;\n  }\n\n  requests(): SDK.NetworkRequest.NetworkRequest[] {\n    return this._requests;\n  }\n\n  requestByManagerAndId(networkManager: SDK.NetworkManager.NetworkManager, requestId: string):\n      SDK.NetworkRequest.NetworkRequest|null {\n    // We iterate backwards because the last item will likely be the one needed for console network request lookups.\n    for (let i = this._requests.length - 1; i >= 0; i--) {\n      const request = this._requests[i];\n      if (requestId === request.requestId() &&\n          networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  _requestByManagerAndURL(networkManager: SDK.NetworkManager.NetworkManager, url: string):\n      SDK.NetworkRequest.NetworkRequest|null {\n    for (const request of this._requests) {\n      if (url === request.url() && networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  _initializeInitiatorSymbolIfNeeded(request: SDK.NetworkRequest.NetworkRequest): InitiatorData {\n    let initiatorInfo = this._initiatorData.get(request);\n    if (initiatorInfo) {\n      return initiatorInfo;\n    }\n    initiatorInfo = {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n    this._initiatorData.set(request, initiatorInfo);\n    return initiatorInfo;\n  }\n\n  initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest): _InitiatorInfo {\n    const initiatorInfo = this._initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorInfo.info) {\n      return initiatorInfo.info;\n    }\n\n    let type = SDK.NetworkRequest.InitiatorType.Other;\n    let url = '';\n    let lineNumber: number = -Infinity;\n    let columnNumber: number = -Infinity;\n    let scriptId: string|null = null;\n    let initiatorStack: Protocol.Runtime.StackTrace|null = null;\n    let initiatorRequest: (SDK.NetworkRequest.NetworkRequest|null)|null = null;\n    const initiator = request.initiator();\n\n    const redirectSource = request.redirectSource();\n    if (redirectSource) {\n      type = SDK.NetworkRequest.InitiatorType.Redirect;\n      url = redirectSource.url();\n    } else if (initiator) {\n      if (initiator.type === Protocol.Network.InitiatorType.Parser) {\n        type = SDK.NetworkRequest.InitiatorType.Parser;\n        url = initiator.url ? initiator.url : url;\n        lineNumber = typeof initiator.lineNumber === 'number' ? initiator.lineNumber : lineNumber;\n        columnNumber = typeof initiator.columnNumber === 'number' ? initiator.columnNumber : columnNumber;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Script) {\n        for (let stack: (Protocol.Runtime.StackTrace|undefined) = initiator.stack; stack;) {\n          const topFrame = stack.callFrames.length ? stack.callFrames[0] : null;\n          if (!topFrame) {\n            stack = stack.parent;\n            continue;\n          }\n          type = SDK.NetworkRequest.InitiatorType.Script;\n          url = topFrame.url || i18nString(UIStrings.anonymous);\n          lineNumber = topFrame.lineNumber;\n          columnNumber = topFrame.columnNumber;\n          scriptId = topFrame.scriptId;\n          break;\n        }\n        if (!initiator.stack && initiator.url) {\n          type = SDK.NetworkRequest.InitiatorType.Script;\n          url = initiator.url;\n          lineNumber = initiator.lineNumber || 0;\n        }\n        if (initiator.stack && initiator.stack.callFrames && initiator.stack.callFrames.length) {\n          initiatorStack = initiator.stack || null;\n        }\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preload) {\n        type = SDK.NetworkRequest.InitiatorType.Preload;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preflight) {\n        type = SDK.NetworkRequest.InitiatorType.Preflight;\n        initiatorRequest = request.preflightInitiatorRequest();\n      } else if (initiator.type === Protocol.Network.InitiatorType.SignedExchange) {\n        type = SDK.NetworkRequest.InitiatorType.SignedExchange;\n        url = initiator.url || '';\n      }\n    }\n\n    initiatorInfo.info = {type, url, lineNumber, columnNumber, scriptId, stack: initiatorStack, initiatorRequest};\n    return initiatorInfo.info;\n  }\n\n  initiatorGraphForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorGraph {\n    const initiated = new Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>();\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    for (const otherRequest of this._requests) {\n      const otherRequestManager = SDK.NetworkManager.NetworkManager.forRequest(otherRequest);\n      if (networkManager === otherRequestManager && this._initiatorChain(otherRequest).has(request)) {\n        // save parent request of otherRequst in order to build the initiator chain table later\n        const initiatorRequest = this._initiatorRequest(otherRequest);\n        if (initiatorRequest) {\n          initiated.set(otherRequest, initiatorRequest);\n        }\n      }\n    }\n    return {initiators: this._initiatorChain(request), initiated: initiated};\n  }\n\n  _initiatorChain(request: SDK.NetworkRequest.NetworkRequest): Set<SDK.NetworkRequest.NetworkRequest> {\n    const initiatorDataForRequest = this._initializeInitiatorSymbolIfNeeded(request);\n    let initiatorChainCache = initiatorDataForRequest.chain;\n    if (initiatorChainCache) {\n      return initiatorChainCache;\n    }\n\n    initiatorChainCache = new Set();\n\n    let checkRequest: SDK.NetworkRequest.NetworkRequest|null = request;\n    while (checkRequest) {\n      const initiatorData = this._initializeInitiatorSymbolIfNeeded(checkRequest);\n      if (initiatorData.chain) {\n        Platform.SetUtilities.addAll(initiatorChainCache, initiatorData.chain);\n        break;\n      }\n      if (initiatorChainCache.has(checkRequest)) {\n        break;\n      }\n      initiatorChainCache.add(checkRequest);\n      checkRequest = this._initiatorRequest(checkRequest);\n    }\n    initiatorDataForRequest.chain = initiatorChainCache;\n    return initiatorChainCache;\n  }\n\n  _initiatorRequest(request: SDK.NetworkRequest.NetworkRequest): SDK.NetworkRequest.NetworkRequest|null {\n    const initiatorData = this._initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorData.request !== undefined) {\n      return initiatorData.request;\n    }\n    const url = this.initiatorInfoForRequest(request).url;\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    initiatorData.request = networkManager ? this._requestByManagerAndURL(networkManager, url) : null;\n    return initiatorData.request;\n  }\n\n  _willReloadPage(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log').get()) {\n      this.reset(true);\n    }\n  }\n\n  _onMainFrameNavigated(event: Common.EventTarget.EventTargetEvent): void {\n    const mainFrame = (event.data as SDK.ResourceTreeModel.ResourceTreeFrame);\n    const manager = mainFrame.resourceTreeModel().target().model(SDK.NetworkManager.NetworkManager);\n    if (!manager || mainFrame.resourceTreeModel().target().parentTarget()) {\n      return;\n    }\n\n    // If a page resulted in an error, the browser will navigate to an internal error page\n    // hosted at 'chrome-error://...'. In this case, skip the frame navigated event to preserve\n    // the network log.\n    if (mainFrame.url !== mainFrame.unreachableUrl() && mainFrame.url.startsWith('chrome-error://')) {\n      return;\n    }\n\n    const preserveLog = Common.Settings.Settings.instance().moduleSetting('network_log.preserve-log').get();\n\n    const oldRequests = this._requests;\n    const oldManagerRequests =\n        this._requests.filter(request => SDK.NetworkManager.NetworkManager.forRequest(request) === manager);\n    const oldRequestsSet = this._requestsSet;\n    this._requests = [];\n    this._sentNetworkRequests = [];\n    this._receivedNetworkResponses = [];\n    this._requestsSet = new Set();\n    this._requestsMap.clear();\n    this._unresolvedPreflightRequests.clear();\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved: !preserveLog});\n\n    // Preserve requests from the new session.\n    let currentPageLoad: SDK.PageLoad.PageLoad|null = null;\n    const requestsToAdd = [];\n    for (const request of oldManagerRequests) {\n      if (request.loaderId !== mainFrame.loaderId) {\n        continue;\n      }\n      if (!currentPageLoad) {\n        currentPageLoad = new SDK.PageLoad.PageLoad(request);\n        let redirectSource = request.redirectSource();\n        while (redirectSource) {\n          requestsToAdd.push(redirectSource);\n          redirectSource = redirectSource.redirectSource();\n        }\n      }\n      requestsToAdd.push(request);\n    }\n\n    // Preserve service worker requests from the new session.\n    const serviceWorkerRequestsToAdd = [];\n    for (const swRequest of oldRequests) {\n      if (!swRequest.initiatedByServiceWorker()) {\n        continue;\n      }\n\n      // If there is a matching request that came before this one, keep it.\n      const keepRequest = requestsToAdd.some(\n          request => request.url() === swRequest.url() && request.issueTime() <= swRequest.issueTime());\n      if (keepRequest) {\n        serviceWorkerRequestsToAdd.push(swRequest);\n      }\n    }\n    requestsToAdd.push(...serviceWorkerRequestsToAdd);\n\n    for (const request of requestsToAdd) {\n      // TODO: Use optional chaining here once closure is gone.\n      if (currentPageLoad) {\n        currentPageLoad.bindRequest(request);\n      }\n      oldRequestsSet.delete(request);\n      this._addRequest(request);\n    }\n\n    if (preserveLog) {\n      for (const request of oldRequestsSet) {\n        this._addRequest(request);\n      }\n    }\n\n    if (currentPageLoad) {\n      this._pageLoadForManager.set(manager, currentPageLoad);\n    }\n  }\n\n  _addRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    this._requests.push(request);\n    this._requestsSet.add(request);\n    const requestList = this._requestsMap.get(request.requestId());\n    if (!requestList) {\n      this._requestsMap.set(request.requestId(), [request]);\n    } else {\n      requestList.push(request);\n    }\n    this._tryResolvePreflightRequests(request);\n    this.dispatchEventToListeners(Events.RequestAdded, request);\n  }\n\n  _tryResolvePreflightRequests(request: SDK.NetworkRequest.NetworkRequest): void {\n    if (request.isPreflightRequest()) {\n      const initiator = request.initiator();\n      if (initiator && initiator.requestId) {\n        const [initiatorRequest] = this.requestsForId(initiator.requestId);\n        if (initiatorRequest) {\n          request.setPreflightInitiatorRequest(initiatorRequest);\n          initiatorRequest.setPreflightRequest(request);\n        } else {\n          this._unresolvedPreflightRequests.set(initiator.requestId, request);\n        }\n      }\n    } else {\n      const preflightRequest = this._unresolvedPreflightRequests.get(request.requestId());\n      if (preflightRequest) {\n        this._unresolvedPreflightRequests.delete(request.requestId());\n        request.setPreflightRequest(preflightRequest);\n        preflightRequest.setPreflightInitiatorRequest(request);\n        // Force recomputation of initiator info, if it already exists.\n        const data = this._initiatorData.get(preflightRequest);\n        if (data) {\n          data.info = null;\n        }\n        this.dispatchEventToListeners(Events.RequestUpdated, preflightRequest);\n      }\n    }\n  }\n\n  importRequests(requests: SDK.NetworkRequest.NetworkRequest[]): void {\n    this.reset(true);\n    this._requests = [];\n    this._sentNetworkRequests = [];\n    this._receivedNetworkResponses = [];\n    this._requestsSet.clear();\n    this._requestsMap.clear();\n    this._unresolvedPreflightRequests.clear();\n    for (const request of requests) {\n      this._addRequest(request);\n    }\n  }\n\n  _onRequestStarted(event: Common.EventTarget.EventTargetEvent): void {\n    const request = (event.data.request as SDK.NetworkRequest.NetworkRequest);\n    if (event.data.originalRequest) {\n      this._sentNetworkRequests.push(event.data.originalRequest);\n    }\n    this._requestsSet.add(request);\n    const manager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    const pageLoad = manager ? this._pageLoadForManager.get(manager) : null;\n    if (pageLoad) {\n      pageLoad.bindRequest(request);\n    }\n    this._addRequest(request);\n  }\n\n  _onResponseReceived(event: Common.EventTarget.EventTargetEvent): void {\n    const response = (event.data.response as Protocol.Network.Response);\n    this._receivedNetworkResponses.push(response);\n  }\n\n  _onRequestUpdated(event: Common.EventTarget.EventTargetEvent): void {\n    const request = (event.data as SDK.NetworkRequest.NetworkRequest);\n    if (!this._requestsSet.has(request)) {\n      return;\n    }\n    this.dispatchEventToListeners(Events.RequestUpdated, request);\n  }\n\n  _onRequestRedirect(event: Common.EventTarget.EventTargetEvent): void {\n    const request = (event.data as SDK.NetworkRequest.NetworkRequest);\n    this._initiatorData.delete(request);\n  }\n\n  _onDOMContentLoaded(\n      resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, event: Common.EventTarget.EventTargetEvent): void {\n    const networkManager = resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this._pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.contentLoadTime = (event.data as number);\n    }\n  }\n\n  _onLoad(event: Common.EventTarget.EventTargetEvent): void {\n    const networkManager = event.data.resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this._pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.loadTime = (event.data.loadTime as number);\n    }\n  }\n\n  reset(clearIfPreserved: boolean): void {\n    this._requests = [];\n    this._sentNetworkRequests = [];\n    this._receivedNetworkResponses = [];\n    this._requestsSet.clear();\n    this._requestsMap.clear();\n    this._unresolvedPreflightRequests.clear();\n    const managers = new Set<SDK.NetworkManager.NetworkManager>(\n        SDK.TargetManager.TargetManager.instance().models(SDK.NetworkManager.NetworkManager));\n    for (const manager of this._pageLoadForManager.keys()) {\n      if (!managers.has(manager)) {\n        this._pageLoadForManager.delete(manager);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved});\n  }\n\n  _networkMessageGenerated(\n      networkManager: SDK.NetworkManager.NetworkManager, event: Common.EventTarget.EventTargetEvent): void {\n    const message = (event.data as SDK.NetworkManager.Message);\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        networkManager.target().model(SDK.RuntimeModel.RuntimeModel), Protocol.Log.LogEntrySource.Network,\n        message.warning ? Protocol.Log.LogEntryLevel.Warning : Protocol.Log.LogEntryLevel.Info, message.message);\n    this.associateConsoleMessageWithRequest(consoleMessage, message.requestId);\n    SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n  }\n\n  associateConsoleMessageWithRequest(consoleMessage: SDK.ConsoleModel.ConsoleMessage, requestId: string): void {\n    const target = consoleMessage.target();\n    const networkManager = target ? target.model(SDK.NetworkManager.NetworkManager) : null;\n    if (!networkManager) {\n      return;\n    }\n    const request = this.requestByManagerAndId(networkManager, requestId);\n    if (!request) {\n      return;\n    }\n    consoleMessageToRequest.set(consoleMessage, request);\n    const initiator = request.initiator();\n    if (initiator) {\n      consoleMessage.stackTrace = initiator.stack || undefined;\n      if (initiator.url) {\n        consoleMessage.url = initiator.url;\n        consoleMessage.line = initiator.lineNumber || 0;\n      }\n    }\n  }\n\n  static requestForConsoleMessage(consoleMessage: SDK.ConsoleModel.ConsoleMessage): SDK.NetworkRequest.NetworkRequest\n      |null {\n    return consoleMessageToRequest.get(consoleMessage) || null;\n  }\n\n  requestsForId(requestId: string): SDK.NetworkRequest.NetworkRequest[] {\n    return this._requestsMap.get(requestId) || [];\n  }\n}\n\nconst consoleMessageToRequest = new WeakMap<SDK.ConsoleModel.ConsoleMessage, SDK.NetworkRequest.NetworkRequest>();\n\nexport const Events = {\n  Reset: Symbol('Reset'),\n  RequestAdded: Symbol('RequestAdded'),\n  RequestUpdated: Symbol('RequestUpdated'),\n};\n\ninterface InitiatorData {\n  info: _InitiatorInfo|null;\n  chain: Set<SDK.NetworkRequest.NetworkRequest>|null;\n  request?: SDK.NetworkRequest.NetworkRequest|null;\n}\n\nexport interface InitiatorGraph {\n  initiators: Set<SDK.NetworkRequest.NetworkRequest>;\n  initiated: Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>;\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _InitiatorInfo {\n  type: SDK.NetworkRequest.InitiatorType;\n  url: string;\n  lineNumber: number;\n  columnNumber: number;\n  scriptId: string|null;\n  stack: Protocol.Runtime.StackTrace|null;\n  initiatorRequest: SDK.NetworkRequest.NetworkRequest|null;\n}\n"]}