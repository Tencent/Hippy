{"version":3,"file":"RecorderModel.js","sourceRoot":"","sources":["../../../../../../front_end/models/recorder/RecorderModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Workspace from '../workspace/workspace.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {RecordingPlayer} from './RecordingPlayer.js';\nimport {RecordingSession} from './RecordingSession.js';\nimport type {UserFlow} from './Steps.js';\nimport {findRecordingsProject} from './RecordingFileSystem.js';\nimport {RecordingScriptWriter} from './RecordingScriptWriter.js';\n\nconst enum RecorderState {\n  Recording = 'Recording',\n  Replaying = 'Replaying',\n  Idle = 'Idle',\n}\n\nexport class RecorderModel extends SDK.SDKModel.SDKModel {\n  _debuggerAgent: ProtocolProxyApi.DebuggerApi;\n  _domDebuggerAgent: ProtocolProxyApi.DOMDebuggerApi;\n  _runtimeAgent: ProtocolProxyApi.RuntimeApi;\n  _accessibilityAgent: ProtocolProxyApi.AccessibilityApi;\n  _toggleRecordAction: UI.ActionRegistration.Action;\n  _replayAction: UI.ActionRegistration.Action;\n  _state: RecorderState;\n  _currentRecordingSession: RecordingSession|null;\n  _indentation: string;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this._debuggerAgent = target.debuggerAgent();\n    this._domDebuggerAgent = target.domdebuggerAgent();\n    this._runtimeAgent = target.runtimeAgent();\n    this._accessibilityAgent = target.accessibilityAgent();\n    this._toggleRecordAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('recorder.toggle-recording') as UI.ActionRegistration.Action;\n    this._replayAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('recorder.replay-recording') as UI.ActionRegistration.Action;\n\n    this._state = RecorderState.Idle;\n    this._currentRecordingSession = null;\n    this._indentation = Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n  }\n\n  async updateState(newState: RecorderState): Promise<void> {\n    this._state = newState;\n    this._toggleRecordAction.setToggled(this._state === RecorderState.Recording);\n    this._toggleRecordAction.setEnabled(this._state !== RecorderState.Replaying);\n    this._replayAction.setEnabled(this._state !== RecorderState.Replaying);\n  }\n\n  isRecording(): boolean {\n    return this._state === RecorderState.Recording;\n  }\n\n  parseUserFlow(source: string): UserFlow {\n    return JSON.parse(source) as UserFlow;\n  }\n\n  async replayRecording(userFlow: UserFlow): Promise<void> {\n    this.updateState(RecorderState.Replaying);\n    try {\n      const player = new RecordingPlayer(userFlow);\n      await player.play();\n    } finally {\n      this.updateState(RecorderState.Idle);\n    }\n  }\n\n  async toggleRecording(): Promise<RecordingSession|null> {\n    if (this._state === RecorderState.Idle) {\n      await this.startRecording();\n      await this.updateState(RecorderState.Recording);\n    } else if (this._state === RecorderState.Recording) {\n      await this.stopRecording();\n      await this.updateState(RecorderState.Idle);\n    }\n\n    return this._currentRecordingSession;\n  }\n\n  async startRecording(): Promise<RecordingSession> {\n    this._currentRecordingSession = new RecordingSession(this.target(), this._indentation);\n    await this._currentRecordingSession.start();\n    return this._currentRecordingSession;\n  }\n\n  async stopRecording(): Promise<void> {\n    if (!this._currentRecordingSession) {\n      return;\n    }\n\n    this._currentRecordingSession.stop();\n    this._currentRecordingSession = null;\n  }\n\n  async exportRecording(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const userFlow = this.parseUserFlow(uiSourceCode.content());\n    const writer = new RecordingScriptWriter('  ');\n    const filename = uiSourceCode.name();\n    const stream = new Bindings.FileUtils.FileOutputStream();\n    if (!await stream.open(filename + '.js')) {\n      return;\n    }\n    stream.write(writer.getScript(userFlow));\n    stream.close();\n  }\n\n  async getAvailableRecordings(): Promise<UserFlow[]> {\n    const project = findRecordingsProject();\n    const uiSourceCodes = project.uiSourceCodes();\n\n    const userFlows = [];\n    for (const uiSourceCode of uiSourceCodes) {\n      try {\n        userFlows.push(this.parseUserFlow(uiSourceCode.content()));\n      } catch {\n      }\n    }\n    return userFlows;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(RecorderModel, {capabilities: SDK.Target.Capability.None, autostart: false});\n"]}