{"version":3,"file":"MarkdownIssueDescription.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/MarkdownIssueDescription.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Marked from '../../third_party/marked/marked.js';\n\n\n/**\n * The description that subclasses of `Issue` use define the issue appearance:\n * `file` specifies the markdown file, substitutions can be used to replace\n * placeholders with, e.g. URLs. The `links` property is used to specify the\n * links at the bottom of the issue.\n */\nexport interface MarkdownIssueDescription {\n  file: string;\n  substitutions?: Map<string, string>;\n  links: {link: string, linkTitle: string}[];\n}\n\nexport interface LazyMarkdownIssueDescription {\n  file: string;\n  substitutions?: Map<string, () => string>;\n  links: {link: string, linkTitle: () => string}[];\n}\n\n/**\n * A lazy version of the description. Allows to specify a description as a\n * constant and at the same time delays resolution of the substitutions\n * and/or link titles to allow localization.\n */\nexport function resolveLazyDescription(lazyDescription: LazyMarkdownIssueDescription): MarkdownIssueDescription {\n  function linksMap(currentLink: {link: string, linkTitle: () => string}): {link: string, linkTitle: string} {\n    return {link: currentLink.link, linkTitle: currentLink.linkTitle()};\n  }\n\n  const substitutionMap = new Map();\n  lazyDescription.substitutions?.forEach((value, key) => {\n    substitutionMap.set(key, value());\n  });\n\n  const description = {\n    file: lazyDescription.file,\n    links: lazyDescription.links.map(linksMap),\n    substitutions: substitutionMap,\n  };\n  return description;\n}\n\n/**\n * A loaded and parsed issue description. This is usually obtained by loading\n * a `MarkdownIssueDescription` via `createIssueDescriptionFromMarkdown`.\n */\nexport interface IssueDescription {\n  title: string;\n  markdown: Marked.Marked.Token[];\n  links: {link: string, linkTitle: string}[];\n}\n\nexport async function getFileContent(url: URL): Promise<string> {\n  try {\n    const response = await fetch(url.toString());\n    return response.text();\n  } catch (error) {\n    throw new Error(\n        `Markdown file ${url.toString()} not found. Make sure it is correctly listed in the relevant BUILD.gn files.`);\n  }\n}\n\nexport async function getMarkdownFileContent(filename: string): Promise<string> {\n  return getFileContent(new URL(`descriptions/${filename}`, import.meta.url));\n}\n\nexport async function createIssueDescriptionFromMarkdown(description: MarkdownIssueDescription):\n    Promise<IssueDescription> {\n  const rawMarkdown = await getMarkdownFileContent(description.file);\n  const rawMarkdownWithPlaceholdersReplaced = substitutePlaceholders(rawMarkdown, description.substitutions);\n  return createIssueDescriptionFromRawMarkdown(rawMarkdownWithPlaceholdersReplaced, description);\n}\n\n/**\n * This function is exported separately for unit testing.\n */\nexport function createIssueDescriptionFromRawMarkdown(\n    markdown: string, description: MarkdownIssueDescription): IssueDescription {\n  const markdownAst = Marked.Marked.lexer(markdown);\n  const title = findTitleFromMarkdownAst(markdownAst);\n  if (!title) {\n    throw new Error('Markdown issue descriptions must start with a heading');\n  }\n\n  return {\n    title,\n    markdown: markdownAst.slice(1),\n    links: description.links,\n  };\n}\n\nconst validPlaceholderMatchPattern = /\\{(PLACEHOLDER_[a-zA-Z][a-zA-Z0-9]*)\\}/g;\nconst validPlaceholderNamePattern = /PLACEHOLDER_[a-zA-Z][a-zA-Z0-9]*/;\n\n/**\n * Replaces placeholders in markdown text with a string provided by the\n * `substitutions` map. To keep mental overhead to a minimum, the same\n * syntax is used as for l10n placeholders. Please note that the\n * placeholders require a mandatory 'PLACEHOLDER_' prefix.\n *\n * Example:\n *   const str = \"This is markdown with `code` and two placeholders, namely {PLACEHOLDER_PH1} and {PLACEHOLDER_PH2}\".\n *   const result = substitePlaceholders(str, new Map([['PLACEHOLDER_PH1', 'foo'], ['PLACEHOLDER_PH2', 'bar']]));\n *\n * Exported only for unit testing.\n */\nexport function substitutePlaceholders(markdown: string, substitutions?: Map<string, string>): string {\n  const unusedPlaceholders = new Set(substitutions ? substitutions.keys() : []);\n  validatePlaceholders(unusedPlaceholders);\n\n  const result = markdown.replace(validPlaceholderMatchPattern, (_, placeholder) => {\n    const replacement = substitutions ? substitutions.get(placeholder) : undefined;\n    if (!replacement) {\n      throw new Error(`No replacment provided for placeholder '${placeholder}'.`);\n    }\n    unusedPlaceholders.delete(placeholder);\n    return replacement;\n  });\n\n  if (unusedPlaceholders.size > 0) {\n    throw new Error(`Unused replacements provided: ${[...unusedPlaceholders]}`);\n  }\n\n  return result;\n}\n\n// Ensure that all provided placeholders match the naming pattern.\nfunction validatePlaceholders(placeholders: Set<string>): void {\n  const invalidPlaceholders = [...placeholders].filter(placeholder => !validPlaceholderNamePattern.test(placeholder));\n  if (invalidPlaceholders.length > 0) {\n    throw new Error(`Invalid placeholders provided in the substitutions map: ${invalidPlaceholders}`);\n  }\n}\n\nexport function findTitleFromMarkdownAst(markdownAst: Marked.Marked.Token[]): string|null {\n  if (markdownAst.length === 0 || markdownAst[0].type !== 'heading' || markdownAst[0].depth !== 1) {\n    return null;\n  }\n  return markdownAst[0].text;\n}\n"]}