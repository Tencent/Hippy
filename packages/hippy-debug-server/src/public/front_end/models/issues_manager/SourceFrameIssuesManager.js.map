{"version":3,"file":"SourceFrameIssuesManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/SourceFrameIssuesManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as Marked from '../../third_party/marked/marked.js';\n\nimport {ContentSecurityPolicyIssue, trustedTypesPolicyViolationCode, trustedTypesSinkViolationCode} from './ContentSecurityPolicyIssue.js';\nimport type {Issue, IssueKind} from './Issue.js';\nimport {toZeroBasedLocation} from './Issue.js';\nimport * as IssuesManager from './IssuesManager.js';\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\nimport {findTitleFromMarkdownAst, getMarkdownFileContent} from './MarkdownIssueDescription.js';\n\nexport class SourceFrameIssuesManager {\n  private issuesManager: IssuesManager.IssuesManager;\n  private locationPool = new Bindings.LiveLocation.LiveLocationPool();\n  private issueMessages = new Array<IssueMessage>();\n\n  constructor(issuesManager: IssuesManager.IssuesManager) {\n    this.issuesManager = issuesManager;\n\n    this.issuesManager.addEventListener(IssuesManager.Events.IssueAdded, this.onIssueAdded, this);\n    this.issuesManager.addEventListener(IssuesManager.Events.FullUpdateRequired, this.onFullUpdateRequired, this);\n  }\n\n  private onIssueAdded(event: Common.EventTarget.EventTargetEvent): void {\n    const {issue} =\n        /** @type {!{issue: !Issue}} */ (event.data);\n    this.addIssue(issue);\n  }\n\n  private addIssue(issue: Issue): void {\n    if (!this.isTrustedTypeIssue(issue)) {\n      return;\n    }\n    const issuesModel = issue.model();\n    if (!issuesModel) {\n      return;\n    }\n    const debuggerModel = issuesModel.target().model(SDK.DebuggerModel.DebuggerModel);\n    const srcLocation = toZeroBasedLocation(issue.details().sourceCodeLocation);\n    if (srcLocation && debuggerModel) {\n      const rawLocation =\n          debuggerModel.createRawLocationByURL(srcLocation.url, srcLocation.lineNumber, srcLocation.columnNumber);\n      if (rawLocation) {\n        this.addIssueMessageToScript(issue, rawLocation);\n      }\n    }\n  }\n\n  private onFullUpdateRequired(): void {\n    this.resetMessages();\n    const issues = this.issuesManager.issues();\n    for (const issue of issues) {\n      this.addIssue(issue);\n    }\n  }\n\n  private async getIssueTitleFromMarkdownDescription(description: MarkdownIssueDescription): Promise<string|null> {\n    const rawMarkdown = await getMarkdownFileContent(description.file);\n    const markdownAst = Marked.Marked.lexer(rawMarkdown);\n    return findTitleFromMarkdownAst(markdownAst);\n  }\n\n  private async addIssueMessageToScript(issue: Issue, rawLocation: SDK.DebuggerModel.Location): Promise<void> {\n    const description = issue.getDescription();\n    if (description) {\n      const title = await this.getIssueTitleFromMarkdownDescription(description);\n      if (title) {\n        const clickHandler = (): void => {\n          Common.Revealer.reveal(issue);\n        };\n        this.issueMessages.push(new IssueMessage(title, issue.getKind(), rawLocation, this.locationPool, clickHandler));\n      }\n    }\n  }\n\n  private isTrustedTypeIssue(issue: Issue): issue is ContentSecurityPolicyIssue {\n    return issue instanceof ContentSecurityPolicyIssue && issue.code() === trustedTypesSinkViolationCode ||\n        issue.code() === trustedTypesPolicyViolationCode;\n  }\n\n  private resetMessages(): void {\n    for (const message of this.issueMessages) {\n      message.dispose();\n    }\n    this.issueMessages = [];\n    this.locationPool.disposeAll();\n  }\n}\n\nexport class IssueMessage extends Workspace.UISourceCode.Message {\n  private uiSourceCode?: Workspace.UISourceCode.UISourceCode = undefined;\n  private kind: IssueKind;\n\n  constructor(\n      title: string, kind: IssueKind, rawLocation: SDK.DebuggerModel.Location,\n      locationPool: Bindings.LiveLocation.LiveLocationPool, clickHandler: () => void) {\n    super(Workspace.UISourceCode.Message.Level.Issue, title, clickHandler);\n    this.kind = kind;\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().createLiveLocation(\n        rawLocation, this.updateLocation.bind(this), locationPool);\n  }\n\n  private async updateLocation(liveLocation: Bindings.LiveLocation.LiveLocation): Promise<void> {\n    if (this.uiSourceCode) {\n      this.uiSourceCode.removeMessage(this);\n    }\n    const uiLocation = await liveLocation.uiLocation();\n    if (!uiLocation) {\n      return;\n    }\n    this._range = TextUtils.TextRange.TextRange.createFromLocation(uiLocation.lineNumber, uiLocation.columnNumber || 0);\n    this.uiSourceCode = uiLocation.uiSourceCode;\n    this.uiSourceCode.addMessage(this);\n  }\n\n  getIssueKind(): IssueKind {\n    return this.kind;\n  }\n\n  dispose(): void {\n    if (this.uiSourceCode) {\n      this.uiSourceCode.removeMessage(this);\n    }\n  }\n}\n"]}