{"version":3,"file":"Automapping.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/Automapping.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {FileSystem} from './FileSystemWorkspaceBinding.js';\nimport {FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {PathEncoder, PersistenceImpl} from './PersistenceImpl.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message when attempting to create a binding from a malformed URI.\n  *@example {file://%E0%A4%A} PH1\n  */\n  theAttemptToBindSInTheWorkspace: 'The attempt to bind \"{PH1}\" in the workspace failed as this URI is malformed.',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/Automapping.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class Automapping {\n  _workspace: Workspace.Workspace.WorkspaceImpl;\n  _onStatusAdded: (arg0: AutomappingStatus) => Promise<void>;\n  _onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>;\n  _statuses: Set<AutomappingStatus>;\n  _fileSystemUISourceCodes: Map<string, Workspace.UISourceCode.UISourceCode>;\n  _sweepThrottler: Common.Throttler.Throttler;\n  _sourceCodeToProcessingPromiseMap: WeakMap<Workspace.UISourceCode.UISourceCode, Promise<void>>;\n  _sourceCodeToAutoMappingStatusMap: WeakMap<Workspace.UISourceCode.UISourceCode, AutomappingStatus>;\n  _sourceCodeToMetadataMap:\n      WeakMap<Workspace.UISourceCode.UISourceCode, Workspace.UISourceCode.UISourceCodeMetadata|null>;\n  _filesIndex: FilePathIndex;\n  _projectFoldersIndex: FolderIndex;\n  _activeFoldersIndex: FolderIndex;\n  _interceptors: ((arg0: Workspace.UISourceCode.UISourceCode) => boolean)[];\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, onStatusAdded: (arg0: AutomappingStatus) => Promise<void>,\n      onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>) {\n    this._workspace = workspace;\n\n    this._onStatusAdded = onStatusAdded;\n    this._onStatusRemoved = onStatusRemoved;\n    this._statuses = new Set();\n\n    this._fileSystemUISourceCodes = new Map();\n    this._sweepThrottler = new Common.Throttler.Throttler(100);\n\n    this._sourceCodeToProcessingPromiseMap = new WeakMap();\n    this._sourceCodeToAutoMappingStatusMap = new WeakMap();\n    this._sourceCodeToMetadataMap = new WeakMap();\n\n    const pathEncoder = new PathEncoder();\n    this._filesIndex = new FilePathIndex(pathEncoder);\n    this._projectFoldersIndex = new FolderIndex(pathEncoder);\n    this._activeFoldersIndex = new FolderIndex(pathEncoder);\n\n    this._interceptors = [];\n\n    this._workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded,\n        event => this._onUISourceCodeAdded(event.data as Workspace.UISourceCode.UISourceCode));\n    this._workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved,\n        event => this._onUISourceCodeRemoved(event.data as Workspace.UISourceCode.UISourceCode));\n    this._workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRenamed, this._onUISourceCodeRenamed, this);\n    this._workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectAdded,\n        event => this._onProjectAdded(event.data as Workspace.Workspace.Project), this);\n    this._workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved,\n        event => this._onProjectRemoved(event.data as Workspace.Workspace.Project), this);\n\n    for (const fileSystem of workspace.projects()) {\n      this._onProjectAdded(fileSystem);\n    }\n    for (const uiSourceCode of workspace.uiSourceCodes()) {\n      this._onUISourceCodeAdded(uiSourceCode);\n    }\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this._interceptors.push(interceptor);\n    this.scheduleRemap();\n  }\n\n  scheduleRemap(): void {\n    for (const status of this._statuses.values()) {\n      this._clearNetworkStatus(status.network);\n    }\n    this._scheduleSweep();\n  }\n\n  _scheduleSweep(): void {\n    this._sweepThrottler.schedule(sweepUnmapped.bind(this));\n\n    function sweepUnmapped(this: Automapping): Promise<void> {\n      const networkProjects = this._workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        for (const uiSourceCode of networkProject.uiSourceCodes()) {\n          this._computeNetworkStatus(uiSourceCode);\n        }\n      }\n      this._onSweepHappenedForTest();\n      return Promise.resolve();\n    }\n  }\n\n  _onSweepHappenedForTest(): void {\n  }\n\n  _onProjectRemoved(project: Workspace.Workspace.Project): void {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this._onUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this._projectFoldersIndex.removeFolder(gitFolder);\n    }\n    this._projectFoldersIndex.removeFolder(fileSystem.fileSystemPath());\n    this.scheduleRemap();\n  }\n\n  _onProjectAdded(project: Workspace.Workspace.Project): void {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this._projectFoldersIndex.addFolder(gitFolder);\n    }\n    this._projectFoldersIndex.addFolder(fileSystem.fileSystemPath());\n    project.uiSourceCodes().forEach(this._onUISourceCodeAdded.bind(this));\n    this.scheduleRemap();\n  }\n\n  _onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (!FileSystemWorkspaceBinding.fileSystemSupportsAutomapping(project)) {\n        return;\n      }\n      this._filesIndex.addPath(uiSourceCode.url());\n      this._fileSystemUISourceCodes.set(uiSourceCode.url(), uiSourceCode);\n      this._scheduleSweep();\n    } else if (project.type() === Workspace.Workspace.projectTypes.Network) {\n      this._computeNetworkStatus(uiSourceCode);\n    }\n  }\n\n  _onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this._filesIndex.removePath(uiSourceCode.url());\n      this._fileSystemUISourceCodes.delete(uiSourceCode.url());\n      const status = this._sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n      if (status) {\n        this._clearNetworkStatus(status.network);\n      }\n    } else if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      this._clearNetworkStatus(uiSourceCode);\n    }\n  }\n\n  _onUISourceCodeRenamed(event: Common.EventTarget.EventTargetEvent): void {\n    const uiSourceCode = event.data.uiSourceCode as Workspace.UISourceCode.UISourceCode;\n    const oldURL = event.data.oldURL as string;\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n\n    this._filesIndex.removePath(oldURL);\n    this._fileSystemUISourceCodes.delete(oldURL);\n    const status = this._sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n    if (status) {\n      this._clearNetworkStatus(status.network);\n    }\n\n    this._filesIndex.addPath(uiSourceCode.url());\n    this._fileSystemUISourceCodes.set(uiSourceCode.url(), uiSourceCode);\n    this._scheduleSweep();\n  }\n\n  _computeNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this._sourceCodeToProcessingPromiseMap.has(networkSourceCode) ||\n        this._sourceCodeToAutoMappingStatusMap.has(networkSourceCode)) {\n      return;\n    }\n    if (this._interceptors.some(interceptor => interceptor(networkSourceCode))) {\n      return;\n    }\n    if (networkSourceCode.url().startsWith('wasm://')) {\n      return;\n    }\n    const createBindingPromise =\n        this._createBinding(networkSourceCode).then(validateStatus.bind(this)).then(onStatus.bind(this));\n    this._sourceCodeToProcessingPromiseMap.set(networkSourceCode, createBindingPromise);\n\n    async function validateStatus(this: Automapping, status: AutomappingStatus|null): Promise<AutomappingStatus|null> {\n      if (!status) {\n        return null;\n      }\n      if (this._sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n      if (status.network.contentType().isFromSourceMap() || !status.fileSystem.contentType().isTextType()) {\n        return status;\n      }\n\n      // At the time binding comes, there are multiple user scenarios:\n      // 1. Both network and fileSystem files are **not** dirty.\n      //    This is a typical scenario when user hasn't done any edits yet to the\n      //    files in question.\n      // 2. FileSystem file has unsaved changes, network is clear.\n      //    This typically happens with CSS files editing. Consider the following\n      //    scenario:\n      //      - user edits file that has been successfully mapped before\n      //      - user doesn't save the file\n      //      - user hits reload\n      // 3. Network file has either unsaved changes or commits, but fileSystem file is clear.\n      //    This typically happens when we've been editing file and then realized we'd like to drop\n      //    a folder and persist all the changes.\n      // 4. Network file has either unsaved changes or commits, and fileSystem file has unsaved changes.\n      //    We consider this to be un-realistic scenario and in this case just fail gracefully.\n      //\n      // To support usecase (3), we need to validate against original network content.\n      if (status.fileSystem.isDirty() && (status.network.isDirty() || status.network.hasCommits())) {\n        return null;\n      }\n\n      const [fileSystemContent, networkContent] = await Promise.all(\n          [status.fileSystem.requestContent(), status.network.project().requestFileContent(status.network)]);\n      if (fileSystemContent.content === null || networkContent === null) {\n        return null;\n      }\n\n      if (this._sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n\n      const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(status.network);\n      let isValid = false;\n      const fileContent = fileSystemContent.content;\n      if (target && target.type() === SDK.Target.Type.Node) {\n        if (networkContent.content) {\n          const rewrappedNetworkContent =\n              PersistenceImpl.rewrapNodeJSContent(status.fileSystem, fileContent, networkContent.content);\n          isValid = fileContent === rewrappedNetworkContent;\n        }\n      } else {\n        if (networkContent.content) {\n          // Trim trailing whitespaces because V8 adds trailing newline.\n          isValid = fileContent.trimRight() === networkContent.content.trimRight();\n        }\n      }\n      if (!isValid) {\n        this._prevalidationFailedForTest(status);\n        return null;\n      }\n      return status;\n    }\n\n    function onStatus(this: Automapping, status: AutomappingStatus|null): void {\n      if (this._sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return;\n      }\n      this._sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n      if (!status) {\n        this._onBindingFailedForTest();\n        return;\n      }\n      // TODO(lushnikov): remove this check once there's a single uiSourceCode per url. @see crbug.com/670180\n      if (this._sourceCodeToAutoMappingStatusMap.has(status.network) ||\n          this._sourceCodeToAutoMappingStatusMap.has(status.fileSystem)) {\n        return;\n      }\n\n      this._statuses.add(status);\n      this._sourceCodeToAutoMappingStatusMap.set(status.network, status);\n      this._sourceCodeToAutoMappingStatusMap.set(status.fileSystem, status);\n      if (status.exactMatch) {\n        const projectFolder = this._projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n        const newFolderAdded = projectFolder ? this._activeFoldersIndex.addFolder(projectFolder) : false;\n        if (newFolderAdded) {\n          this._scheduleSweep();\n        }\n      }\n      this._onStatusAdded.call(null, status);\n    }\n  }\n\n  _prevalidationFailedForTest(_binding: AutomappingStatus): void {\n  }\n\n  _onBindingFailedForTest(): void {\n  }\n\n  _clearNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this._sourceCodeToProcessingPromiseMap.has(networkSourceCode)) {\n      this._sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n      return;\n    }\n    const status = this._sourceCodeToAutoMappingStatusMap.get(networkSourceCode);\n    if (!status) {\n      return;\n    }\n\n    this._statuses.delete(status);\n    this._sourceCodeToAutoMappingStatusMap.delete(status.network);\n    this._sourceCodeToAutoMappingStatusMap.delete(status.fileSystem);\n    if (status.exactMatch) {\n      const projectFolder = this._projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n      if (projectFolder) {\n        this._activeFoldersIndex.removeFolder(projectFolder);\n      }\n    }\n    this._onStatusRemoved.call(null, status);\n  }\n\n  _createBinding(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<AutomappingStatus|null> {\n    const url = networkSourceCode.url();\n    if (url.startsWith('file://') || url.startsWith('snippet://')) {\n      const decodedUrl = sanitizeSourceUrl(url);\n      if (!decodedUrl) {\n        return Promise.resolve(null as AutomappingStatus | null);\n      }\n      const fileSourceCode = this._fileSystemUISourceCodes.get(decodedUrl);\n      const status = fileSourceCode ? new AutomappingStatus(networkSourceCode, fileSourceCode, false) : null;\n      return Promise.resolve(status);\n    }\n\n    let networkPath = Common.ParsedURL.ParsedURL.extractPath(url);\n    if (networkPath === null) {\n      return Promise.resolve(null as AutomappingStatus | null);\n    }\n\n    if (networkPath.endsWith('/')) {\n      networkPath += 'index.html';\n    }\n\n    const urlDecodedNetworkPath = sanitizeSourceUrl(networkPath);\n    if (!urlDecodedNetworkPath) {\n      return Promise.resolve(null as AutomappingStatus | null);\n    }\n\n    const similarFiles =\n        this._filesIndex.similarFiles(urlDecodedNetworkPath).map(path => this._fileSystemUISourceCodes.get(path)) as\n        Workspace.UISourceCode.UISourceCode[];\n    if (!similarFiles.length) {\n      return Promise.resolve(null as AutomappingStatus | null);\n    }\n\n    return this._pullMetadatas(similarFiles.concat(networkSourceCode)).then(onMetadatas.bind(this));\n\n    function sanitizeSourceUrl(url: string): string|null {\n      try {\n        const decodedUrl = decodeURI(url);\n        return decodedUrl;\n      } catch (error) {\n        Common.Console.Console.instance().error(i18nString(UIStrings.theAttemptToBindSInTheWorkspace, {PH1: url}));\n        return null;\n      }\n    }\n\n    function onMetadatas(this: Automapping): AutomappingStatus|null {\n      const activeFiles =\n          similarFiles.filter(\n              file => Boolean(file) && Boolean(this._activeFoldersIndex.closestParentFolder(file.url()))) as\n          Workspace.UISourceCode.UISourceCode[];\n      const networkMetadata = this._sourceCodeToMetadataMap.get(networkSourceCode);\n      if (!networkMetadata || (!networkMetadata.modificationTime && typeof networkMetadata.contentSize !== 'number')) {\n        // If networkSourceCode does not have metadata, try to match against active folders.\n        if (activeFiles.length !== 1) {\n          return null;\n        }\n        return new AutomappingStatus(networkSourceCode, activeFiles[0], false);\n      }\n\n      // Try to find exact matches, prioritizing active folders.\n      let exactMatches = this._filterWithMetadata(activeFiles, networkMetadata);\n      if (!exactMatches.length) {\n        exactMatches = this._filterWithMetadata(similarFiles, networkMetadata);\n      }\n      if (exactMatches.length !== 1) {\n        return null;\n      }\n      return new AutomappingStatus(networkSourceCode, exactMatches[0], true);\n    }\n  }\n\n  async _pullMetadatas(uiSourceCodes: Workspace.UISourceCode.UISourceCode[]): Promise<void> {\n    await Promise.all(uiSourceCodes.map(async file => {\n      this._sourceCodeToMetadataMap.set(file, await file.requestMetadata());\n    }));\n  }\n\n  _filterWithMetadata(\n      files: Workspace.UISourceCode.UISourceCode[],\n      networkMetadata: Workspace.UISourceCode.UISourceCodeMetadata): Workspace.UISourceCode.UISourceCode[] {\n    return files.filter(file => {\n      const fileMetadata = this._sourceCodeToMetadataMap.get(file);\n      if (!fileMetadata) {\n        return false;\n      }\n      // Allow a second of difference due to network timestamps lack of precision.\n      const timeMatches = !networkMetadata.modificationTime || !fileMetadata.modificationTime ||\n          Math.abs(networkMetadata.modificationTime.getTime() - fileMetadata.modificationTime.getTime()) < 1000;\n      const contentMatches = !networkMetadata.contentSize || fileMetadata.contentSize === networkMetadata.contentSize;\n      return timeMatches && contentMatches;\n    });\n  }\n}\n\nclass FilePathIndex {\n  _encoder: PathEncoder;\n  _reversedIndex: Common.Trie.Trie;\n  constructor(encoder: PathEncoder) {\n    this._encoder = encoder;\n    this._reversedIndex = new Common.Trie.Trie();\n  }\n\n  addPath(path: string): void {\n    const encodedPath = this._encoder.encode(path);\n    this._reversedIndex.add(Platform.StringUtilities.reverse(encodedPath));\n  }\n\n  removePath(path: string): void {\n    const encodedPath = this._encoder.encode(path);\n    this._reversedIndex.remove(Platform.StringUtilities.reverse(encodedPath));\n  }\n\n  similarFiles(networkPath: string): string[] {\n    const encodedPath = this._encoder.encode(networkPath);\n    const reversedEncodedPath = Platform.StringUtilities.reverse(encodedPath);\n    const longestCommonPrefix = this._reversedIndex.longestPrefix(reversedEncodedPath, false);\n    if (!longestCommonPrefix) {\n      return [];\n    }\n    return this._reversedIndex.words(longestCommonPrefix)\n        .map(encodedPath => this._encoder.decode(Platform.StringUtilities.reverse(encodedPath)));\n  }\n}\n\nclass FolderIndex {\n  _encoder: PathEncoder;\n  _index: Common.Trie.Trie;\n  _folderCount: Map<string, number>;\n  constructor(encoder: PathEncoder) {\n    this._encoder = encoder;\n    this._index = new Common.Trie.Trie();\n    this._folderCount = new Map();\n  }\n\n  addFolder(path: string): boolean {\n    if (path.endsWith('/')) {\n      path = path.substring(0, path.length - 1);\n    }\n    const encodedPath = this._encoder.encode(path);\n    this._index.add(encodedPath);\n    const count = this._folderCount.get(encodedPath) || 0;\n    this._folderCount.set(encodedPath, count + 1);\n    return count === 0;\n  }\n\n  removeFolder(path: string): boolean {\n    if (path.endsWith('/')) {\n      path = path.substring(0, path.length - 1);\n    }\n    const encodedPath = this._encoder.encode(path);\n    const count = this._folderCount.get(encodedPath) || 0;\n    if (!count) {\n      return false;\n    }\n    if (count > 1) {\n      this._folderCount.set(encodedPath, count - 1);\n      return false;\n    }\n    this._index.remove(encodedPath);\n    this._folderCount.delete(encodedPath);\n    return true;\n  }\n\n  closestParentFolder(path: string): string {\n    const encodedPath = this._encoder.encode(path);\n    const commonPrefix = this._index.longestPrefix(encodedPath, true);\n    return this._encoder.decode(commonPrefix);\n  }\n}\n\nexport class AutomappingStatus {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  exactMatch: boolean;\n  constructor(\n      network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode,\n      exactMatch: boolean) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n    this.exactMatch = exactMatch;\n  }\n}\n"]}