import * as Common from '../../core/common/common.js';
import type * as TextUtils from '../text_utils/text_utils.js';
import type { IsolatedFileSystemManager } from './IsolatedFileSystemManager.js';
import { PlatformFileSystem } from './PlatformFileSystem.js';
export declare class IsolatedFileSystem extends PlatformFileSystem {
    _manager: IsolatedFileSystemManager;
    _embedderPath: string;
    _domFileSystem: FileSystem;
    _excludedFoldersSetting: Common.Settings.Setting<{
        [path: string]: string[];
    }>;
    _excludedFolders: Set<string>;
    _excludedEmbedderFolders: string[];
    _initialFilePaths: Set<string>;
    _initialGitFolders: Set<string>;
    _fileLocks: Map<string, Promise<void>>;
    constructor(manager: IsolatedFileSystemManager, path: string, embedderPath: string, domFileSystem: FileSystem, type: string);
    static create(manager: IsolatedFileSystemManager, path: string, embedderPath: string, type: string, name: string, rootURL: string): Promise<IsolatedFileSystem | null>;
    static errorMessage(error: DOMError): string;
    _serializedFileOperation<T>(path: string, operation: () => Promise<T>): Promise<T>;
    getMetadata(path: string): Promise<Metadata | null>;
    initialFilePaths(): string[];
    initialGitFolders(): string[];
    embedderPath(): string;
    _initializeFilePaths(): Promise<void>;
    _createFoldersIfNotExist(folderPath: string): Promise<DirectoryEntry | null>;
    _innerCreateFolderIfNeeded(path: string): Promise<DirectoryEntry | null>;
    createFile(path: string, name: string | null): Promise<string | null>;
    deleteFile(path: string): Promise<boolean>;
    requestFileBlob(path: string): Promise<Blob | null>;
    requestFileContent(path: string): Promise<TextUtils.ContentProvider.DeferredContent>;
    _innerRequestFileContent(path: string): Promise<TextUtils.ContentProvider.DeferredContent>;
    setFileContent(path: string, content: string, isBase64: boolean): Promise<void>;
    renameFile(path: string, newName: string, callback: (arg0: boolean, arg1?: string | undefined) => void): void;
    _readDirectory(dirEntry: DirectoryEntry, callback: (arg0: Array<FileEntry>) => void): void;
    _requestEntries(path: string, callback: (arg0: Array<FileEntry>) => void): void;
    _saveExcludedFolders(): void;
    addExcludedFolder(path: string): void;
    removeExcludedFolder(path: string): void;
    fileSystemRemoved(): void;
    isFileExcluded(folderPath: string): boolean;
    excludedFolders(): Set<string>;
    searchInPath(query: string, progress: Common.Progress.Progress): Promise<string[]>;
    indexContent(progress: Common.Progress.Progress): void;
    mimeFromPath(path: string): string;
    canExcludeFolder(path: string): boolean;
    contentType(path: string): Common.ResourceType.ResourceType;
    tooltipForURL(url: string): string;
    supportsAutomapping(): boolean;
}
export declare const BinaryExtensions: Set<string>;
