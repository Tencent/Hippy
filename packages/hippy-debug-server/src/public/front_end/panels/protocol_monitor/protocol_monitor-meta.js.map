{"version":3,"file":"protocol_monitor-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/protocol_monitor/protocol_monitor-meta.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAKhD,MAAM,SAAS,GAAG;IAChB;;;;;MAKE;IACF,eAAe,EAAE,kBAAkB;IACnC;;MAEE;IACF,mBAAmB,EAAE,uBAAuB;CAC7C,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;AACxG,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAExF,IAAI,2BAA+D,CAAC;AAEpE,KAAK,UAAU,yBAAyB;IACtC,IAAI,CAAC,2BAA2B,EAAE;QAChC,8CAA8C;QAC9C,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,CAAC;QACnF,2BAA2B,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC;KACrE;IACD,OAAO,2BAA2B,CAAC;AACrC,CAAC;AAED,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,iCAA+C;IACvD,EAAE,EAAE,kBAAkB;IACtB,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;IAChD,aAAa,EAAE,cAAc,CAAC,SAAS,CAAC,mBAAmB,CAAC;IAC5D,KAAK,EAAE,GAAG;IACV,WAAW,6BAA0C;IACrD,KAAK,CAAC,QAAQ;QACZ,MAAM,eAAe,GAAG,MAAM,yBAAyB,EAAE,CAAC;QAC1D,OAAO,eAAe,CAAC,eAAe,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;IACxE,CAAC;IACD,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB;CACzD,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\n// eslint-disable-next-line rulesdir/es_modules_import\nimport type * as ProtocolMonitor from './protocol_monitor.js';\n\nconst UIStrings = {\n  /**\n  * @description Title of the 'Protocol monitor' tool in the bottom drawer. This is a tool for\n  * viewing and inspecting 'protocol' messages which are sent/received by DevTools. 'protocol' here\n  * could be left untranslated as this refers to the Chrome DevTools Protocol (CDP) which is a\n  * specific API name.\n  */\n  protocolMonitor: 'Protocol monitor',\n  /**\n  *@description Command for showing the 'Protocol monitor' tool in the bottom drawer\n  */\n  showProtocolMonitor: 'Show Protocol monitor',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/protocol_monitor-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedProtocolMonitorModule: (typeof ProtocolMonitor|undefined);\n\nasync function loadProtocolMonitorModule(): Promise<typeof ProtocolMonitor> {\n  if (!loadedProtocolMonitorModule) {\n    // Side-effect import resources in module.json\n    await Root.Runtime.Runtime.instance().loadModulePromise('panels/protocol_monitor');\n    loadedProtocolMonitorModule = await import('./protocol_monitor.js');\n  }\n  return loadedProtocolMonitorModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'protocol-monitor',\n  title: i18nLazyString(UIStrings.protocolMonitor),\n  commandPrompt: i18nLazyString(UIStrings.showProtocolMonitor),\n  order: 100,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const ProtocolMonitor = await loadProtocolMonitorModule();\n    return ProtocolMonitor.ProtocolMonitor.ProtocolMonitorImpl.instance();\n  },\n  experiment: Root.Runtime.ExperimentName.PROTOCOL_MONITOR,\n});\n"]}