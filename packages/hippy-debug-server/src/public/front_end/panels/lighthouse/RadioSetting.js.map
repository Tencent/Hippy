{"version":3,"file":"RadioSetting.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/RadioSetting.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nexport class RadioSetting {\n  _setting: Common.Settings.Setting<string>;\n  _options: {value: string, label: () => Common.UIString.LocalizedString}[];\n  element: HTMLDivElement;\n  _radioElements: HTMLInputElement[];\n  _ignoreChangeEvents: boolean;\n  _selectedIndex: number;\n  constructor(\n      options: {value: string, label: () => Common.UIString.LocalizedString}[],\n      setting: Common.Settings.Setting<string>, description: string) {\n    this._setting = setting;\n    this._options = options;\n\n    this.element = document.createElement('div');\n    UI.ARIAUtils.setDescription(this.element, description);\n    UI.ARIAUtils.markAsRadioGroup(this.element);\n\n    this._radioElements = [];\n    for (const option of this._options) {\n      const fragment = UI.Fragment.Fragment.build`\n  <label $=\"label\" class=\"lighthouse-radio\">\n  <input $=\"input\" type=\"radio\" value=${option.value} name=${setting.name}>\n  <span $=\"span\" class=\"lighthouse-radio-text\">${option.label()}</span>\n  </label>\n  `;\n\n      this.element.appendChild(fragment.element());\n      if (description) {\n        UI.Tooltip.Tooltip.install(fragment.$('input'), description);\n        UI.Tooltip.Tooltip.install(fragment.$('span'), description);\n      }\n      const radioElement = fragment.$('input') as HTMLInputElement;\n      radioElement.addEventListener('change', this._valueChanged.bind(this));\n      this._radioElements.push(radioElement);\n    }\n\n    this._ignoreChangeEvents = false;\n    this._selectedIndex = -1;\n\n    setting.addChangeListener(this._settingChanged, this);\n    this._settingChanged();\n  }\n\n  _updateUI(): void {\n    this._ignoreChangeEvents = true;\n    this._radioElements[this._selectedIndex].checked = true;\n    this._ignoreChangeEvents = false;\n  }\n\n  _settingChanged(): void {\n    const value = this._setting.get();\n    this._selectedIndex = this._options.findIndex(option => option.value === value);\n    this._updateUI();\n  }\n\n  _valueChanged(_event: Event): void {\n    if (this._ignoreChangeEvents) {\n      return;\n    }\n\n    const selectedRadio = this._radioElements.find(radio => radio.checked);\n    if (!selectedRadio) {\n      return;\n    }\n    this._setting.set(selectedRadio.value);\n  }\n}\n"]}