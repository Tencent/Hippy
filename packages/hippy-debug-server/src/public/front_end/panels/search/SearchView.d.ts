import * as Common from '../../core/common/common.js';
import * as UI from '../../ui/legacy/legacy.js';
import type { SearchResult, SearchScope } from './SearchConfig.js';
import { SearchConfig } from './SearchConfig.js';
import { SearchResultsPane } from './SearchResultsPane.js';
export declare class SearchView extends UI.Widget.VBox {
    _focusOnShow: boolean;
    _isIndexing: boolean;
    _searchId: number;
    _searchMatchesCount: number;
    _searchResultsCount: number;
    _nonEmptySearchResultsCount: number;
    _searchingView: UI.Widget.Widget | null;
    _notFoundView: UI.Widget.Widget | null;
    _searchConfig: SearchConfig | null;
    _pendingSearchConfig: SearchConfig | null;
    _searchResultsPane: SearchResultsPane | null;
    _progressIndicator: UI.ProgressIndicator.ProgressIndicator | null;
    _visiblePane: UI.Widget.Widget | null;
    _searchPanelElement: HTMLElement;
    _searchResultsElement: HTMLElement;
    _search: UI.HistoryInput.HistoryInput;
    _matchCaseButton: UI.Toolbar.ToolbarToggle;
    _regexButton: UI.Toolbar.ToolbarToggle;
    _searchMessageElement: HTMLElement;
    _searchProgressPlaceholderElement: HTMLElement;
    _searchResultsMessageElement: HTMLElement;
    _advancedSearchConfig: Common.Settings.Setting<{
        query: string;
        ignoreCase: boolean;
        isRegex: boolean;
    }>;
    _searchScope: SearchScope | null;
    constructor(settingKey: string);
    static _appendToolbarToggle(toolbar: UI.Toolbar.Toolbar, text: string, tooltip: string): UI.Toolbar.ToolbarToggle;
    _buildSearchConfig(): SearchConfig;
    toggle(queryCandidate: string, searchImmediately?: boolean): Promise<void>;
    createScope(): SearchScope;
    _initScope(): void;
    wasShown(): void;
    _onIndexingFinished(): void;
    _startIndexing(): void;
    _onSearchInputClear(): void;
    _onSearchResult(searchId: number, searchResult: SearchResult): void;
    _onSearchFinished(searchId: number, finished: boolean): void;
    _startSearch(searchConfig: SearchConfig): Promise<void>;
    _innerStartSearch(searchConfig: SearchConfig): void;
    _resetSearch(): void;
    _clearSearchMessage(): void;
    _stopSearch(): void;
    _searchStarted(progressIndicator: UI.ProgressIndicator.ProgressIndicator): void;
    _indexingFinished(finished: boolean): void;
    _updateSearchResultsMessage(): void;
    _showPane(panel: UI.Widget.Widget | null): void;
    _resetCounters(): void;
    _nothingFound(): void;
    _addSearchResult(searchResult: SearchResult): void;
    _searchFinished(finished: boolean): void;
    focus(): void;
    willHide(): void;
    _onKeyDown(event: KeyboardEvent): void;
    _save(): void;
    _load(): void;
    _onAction(): void;
}
