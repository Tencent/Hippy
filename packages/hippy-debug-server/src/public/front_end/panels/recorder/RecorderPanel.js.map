{"version":3,"file":"RecorderPanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/recorder/RecorderPanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// import * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Recorder from '../../models/recorder/recorder.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Components from './components/components.js';\n\n// const UIStrings = {};\n// const str_ = i18n.i18n.registerUIStrings('panels/recorder/RecorderPanel.ts', UIStrings);\n// const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet recorderPanelInstance: RecorderPanel;\n\nexport class RecorderPanel extends UI.Panel.Panel {\n  private recording: Recorder.Steps.UserFlow|null;\n\n  constructor() {\n    super('recorder');\n    this.registerRequiredCSS('panels/recorder/recorderPanel.css', {enableLegacyPatching: false});\n\n    const mainContainer = new UI.Widget.VBox();\n    mainContainer.show(this.element);\n\n    const target = SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target;\n\n    const recorderModel = target.model(Recorder.RecorderModel.RecorderModel);\n    if (!recorderModel) {\n      throw new Error('Could not find recorder model.');\n    }\n\n    recorderModel.getAvailableRecordings();\n\n    this.recording = {\n      title: 'Recording 1',\n      description: 'This is a description',\n      sections: [],\n    } as Recorder.Steps.UserFlow;\n\n    const recordingView = new Components.RecordingView.RecordingView();\n    recordingView.style.flex = '1';\n    recordingView.addEventListener('recordingtoggled', async (e: Event) => {\n      const event = e as Components.RecordingView.RecordingToggledEvent;\n      const currentSession = await recorderModel.toggleRecording();\n\n      recordingView.data = {\n        recording: (currentSession ? currentSession.getUserFlow() : this.recording) as Recorder.Steps.UserFlow,\n        isRecording: event.data,\n      };\n\n      if (currentSession) {\n        currentSession.addEventListener('recording-updated', async ({data}: {data: Recorder.Steps.UserFlow}) => {\n          this.recording = data;\n          recordingView.data = {\n            recording: data,\n            isRecording: event.data,\n          };\n          recordingView.scrollToBottom();\n        });\n      }\n    });\n\n    recordingView.data = {\n      recording: this.recording,\n      isRecording: false,\n    };\n\n    mainContainer.element.appendChild(recordingView as Node);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): RecorderPanel {\n    const {forceNew} = opts;\n    if (!recorderPanelInstance || forceNew) {\n      recorderPanelInstance = new RecorderPanel();\n    }\n\n    return recorderPanelInstance;\n  }\n}\n"]}