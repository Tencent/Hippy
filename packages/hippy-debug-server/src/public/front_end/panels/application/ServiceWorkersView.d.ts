import * as Common from '../../core/common/common.js';
import * as SDK from '../../core/sdk/sdk.js';
import * as Components from '../../ui/legacy/components/utils/utils.js';
import * as UI from '../../ui/legacy/legacy.js';
import type * as Protocol from '../../generated/protocol.js';
import { ServiceWorkerUpdateCycleView } from './ServiceWorkerUpdateCycleView.js';
export declare const setThrottleDisabledForDebugging: (enable: boolean) => void;
export declare class ServiceWorkersView extends UI.Widget.VBox implements SDK.TargetManager.SDKModelObserver<SDK.ServiceWorkerManager.ServiceWorkerManager> {
    _currentWorkersView: UI.ReportView.ReportView;
    _toolbar: UI.Toolbar.Toolbar;
    _sections: Map<SDK.ServiceWorkerManager.ServiceWorkerRegistration, Section>;
    _manager: SDK.ServiceWorkerManager.ServiceWorkerManager | null;
    _securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager | null;
    _sectionToRegistration: WeakMap<UI.ReportView.Section, SDK.ServiceWorkerManager.ServiceWorkerRegistration>;
    _eventListeners: Map<SDK.ServiceWorkerManager.ServiceWorkerManager, Common.EventTarget.EventDescriptor[]>;
    constructor();
    modelAdded(serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager): void;
    modelRemoved(serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager): void;
    _getTimeStamp(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): number;
    _updateSectionVisibility(): void;
    _registrationUpdated(event: Common.EventTarget.EventTargetEvent): void;
    _gcRegistrations(): void;
    _getReportViewForOrigin(origin: string): UI.ReportView.ReportView | null;
    _updateRegistration(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration, skipUpdate?: boolean): void;
    _registrationDeleted(event: Common.EventTarget.EventTargetEvent): void;
    _removeRegistrationFromList(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): void;
    _isRegistrationVisible(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): boolean;
    _updateListVisibility(): void;
}
export declare class Section {
    _manager: SDK.ServiceWorkerManager.ServiceWorkerManager;
    _section: UI.ReportView.Section;
    _registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration;
    _fingerprint: symbol | null;
    _pushNotificationDataSetting: Common.Settings.Setting<string>;
    _syncTagNameSetting: Common.Settings.Setting<string>;
    _periodicSyncTagNameSetting: Common.Settings.Setting<string>;
    _toolbar: UI.Toolbar.Toolbar;
    _updateCycleView: ServiceWorkerUpdateCycleView;
    _networkRequests: UI.Toolbar.ToolbarButton;
    _updateButton: UI.Toolbar.ToolbarButton;
    _deleteButton: UI.Toolbar.ToolbarButton;
    _sourceField: Element;
    _statusField: Element;
    _clientsField: Element;
    _linkifier: Components.Linkifier.Linkifier;
    _clientInfoCache: Map<string, Protocol.Target.TargetInfo>;
    _throttler: Common.Throttler.Throttler;
    _updateCycleField?: Element;
    constructor(manager: SDK.ServiceWorkerManager.ServiceWorkerManager, section: UI.ReportView.Section, registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration);
    _createSyncNotificationField(label: string, initialValue: string, placeholder: string, callback: (arg0: string) => void): void;
    _scheduleUpdate(): void;
    _targetForVersionId(versionId: string): SDK.Target.Target | null;
    _addVersion(versionsStack: Element, icon: string, label: string): Element;
    _updateClientsField(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): void;
    _updateSourceField(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): void;
    _update(): Promise<void>;
    _createLink(parent: Element, title: string, listener: () => void, className?: string, useCapture?: boolean): Element;
    _unregisterButtonClicked(_event: Common.EventTarget.EventTargetEvent): void;
    _createUpdateCycleField(): void;
    _updateButtonClicked(_event: Common.EventTarget.EventTargetEvent): void;
    _networkRequestsClicked(_event: Common.EventTarget.EventTargetEvent): void;
    _push(data: string): void;
    _sync(tag: string): void;
    _periodicSync(tag: string): void;
    _onClientInfo(element: Element, targetInfoResponse: Protocol.Target.GetTargetInfoResponse): void;
    _updateClientInfo(element: Element, targetInfo: Protocol.Target.TargetInfo): void;
    _activateTarget(targetId: string): void;
    _startButtonClicked(): void;
    _skipButtonClicked(): void;
    _stopButtonClicked(versionId: string): void;
    _inspectButtonClicked(versionId: string): void;
    _wrapWidget(container: Element): Element;
}
