{"version":3,"file":"BackgroundServiceModel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/BackgroundServiceModel.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAI7C,MAAM,OAAO,sBAAuB,SAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ;IAE/D,uBAAuB,CAAwC;IAC/D,OAAO,CAAmG;IAE1G,YAAY,MAAyB;QACnC,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;QAC/D,MAAM,CAAC,mCAAmC,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,OAA+C;QACpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;IAChE,CAAC;IAED,YAAY,CAAC,YAAqB,EAAE,OAA+C;QACjF,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,EAAC,YAAY,EAAE,OAAO,EAAC,CAAC,CAAC;IAC5E,CAAC;IAED,WAAW,CAAC,OAA+C;QACzD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;IAC7D,CAAC;IAED,SAAS,CAAC,OAA+C;QACvD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,qBAAqB,CAAC,EAAC,WAAW,EAAE,OAAO,EAAwD;QACjG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,qBAAqB,EAAE,EAAC,WAAW,EAAE,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC;IACnG,CAAC;IAED,8BAA8B,CAAC,EAAC,sBAAsB,EAC2C;QAC/F,oEAAoE;QACpE,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9E,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,8BAA8B,EAAE,sBAAsB,CAAC,CAAC;IAC/F,CAAC;CACF;AAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,EAAE,EAAC,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;AAExH,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,yDAA+C,CAAA;IAC/C,2EAAiE,CAAA;AACnE,CAAC,EAHW,MAAM,KAAN,MAAM,QAGjB","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class BackgroundServiceModel extends SDK.SDKModel.SDKModel implements\n    ProtocolProxyApi.BackgroundServiceDispatcher {\n  _backgroundServiceAgent: ProtocolProxyApi.BackgroundServiceApi;\n  _events: Map<Protocol.BackgroundService.ServiceName, Protocol.BackgroundService.BackgroundServiceEvent[]>;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this._backgroundServiceAgent = target.backgroundServiceAgent();\n    target.registerBackgroundServiceDispatcher(this);\n\n    this._events = new Map();\n  }\n\n  enable(service: Protocol.BackgroundService.ServiceName): void {\n    this._events.set(service, []);\n    this._backgroundServiceAgent.invoke_startObserving({service});\n  }\n\n  setRecording(shouldRecord: boolean, service: Protocol.BackgroundService.ServiceName): void {\n    this._backgroundServiceAgent.invoke_setRecording({shouldRecord, service});\n  }\n\n  clearEvents(service: Protocol.BackgroundService.ServiceName): void {\n    this._events.set(service, []);\n    this._backgroundServiceAgent.invoke_clearEvents({service});\n  }\n\n  getEvents(service: Protocol.BackgroundService.ServiceName): Protocol.BackgroundService.BackgroundServiceEvent[] {\n    return this._events.get(service) || [];\n  }\n\n  recordingStateChanged({isRecording, service}: Protocol.BackgroundService.RecordingStateChangedEvent): void {\n    this.dispatchEventToListeners(Events.RecordingStateChanged, {isRecording, serviceName: service});\n  }\n\n  backgroundServiceEventReceived({backgroundServiceEvent}:\n                                     Protocol.BackgroundService.BackgroundServiceEventReceivedEvent): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    this._events.get(backgroundServiceEvent.service).push(backgroundServiceEvent);\n    this.dispatchEventToListeners(Events.BackgroundServiceEventReceived, backgroundServiceEvent);\n  }\n}\n\nSDK.SDKModel.SDKModel.register(BackgroundServiceModel, {capabilities: SDK.Target.Capability.Browser, autostart: false});\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RecordingStateChanged = 'RecordingStateChanged',\n  BackgroundServiceEventReceived = 'BackgroundServiceEventReceived',\n}\n"]}