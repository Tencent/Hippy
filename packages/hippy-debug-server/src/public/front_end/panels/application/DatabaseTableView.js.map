{"version":3,"file":"DatabaseTableView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/DatabaseTableView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {Database} from './DatabaseModel.js'; // eslint-disable-line no-unused-vars\n\nconst UIStrings = {\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  database: 'Database',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  visibleColumns: 'Visible columns',\n  /**\n  *@description Text in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  theStableIsEmpty: 'The \"{PH1}\" table is empty.',\n  /**\n  *@description Error msg element text content in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  anErrorOccurredTryingToreadTheS: 'An error occurred trying to read the \"{PH1}\" table.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DatabaseTableView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface VisibleColumnsSetting {\n  [tableName: string]: string;\n}\nexport class DatabaseTableView extends UI.View.SimpleView {\n  database: Database;\n  tableName: string;\n  _lastVisibleColumns: string;\n  _columnsMap: Map<string, string>;\n  _visibleColumnsSetting: Common.Settings.Setting<VisibleColumnsSetting>;\n  refreshButton: UI.Toolbar.ToolbarButton;\n  _visibleColumnsInput: UI.Toolbar.ToolbarInput;\n  _dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<DataGrid.SortableDataGrid.SortableDataGridNode<unknown>>|null;\n  _emptyWidget?: UI.EmptyWidget.EmptyWidget;\n\n  constructor(database: Database, tableName: string) {\n    super(i18nString(UIStrings.database));\n\n    this.database = database;\n    this.tableName = tableName;\n    this._lastVisibleColumns = '';\n    this._columnsMap = new Map();\n\n    this.element.classList.add('storage-view', 'table');\n\n    this._visibleColumnsSetting =\n        Common.Settings.Settings.instance().createSetting('databaseTableViewVisibleColumns', {});\n\n    this.refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this._refreshButtonClicked, this);\n    this._visibleColumnsInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.visibleColumns), '', 1);\n    this._visibleColumnsInput.addEventListener(\n        UI.Toolbar.ToolbarInput.Event.TextChanged, this._onVisibleColumnsChanged, this);\n\n    this._dataGrid = null;\n  }\n\n  wasShown(): void {\n    this.update();\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.refreshButton, this._visibleColumnsInput];\n  }\n\n  _escapeTableName(tableName: string): string {\n    return tableName.replace(/\\\"/g, '\"\"');\n  }\n\n  update(): void {\n    this.database.executeSql(\n        'SELECT rowid, * FROM \"' + this._escapeTableName(this.tableName) + '\"', this._queryFinished.bind(this),\n        this._queryError.bind(this));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _queryFinished(columnNames: string[], values: any[]): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    this._dataGrid =\n        DataGrid.SortableDataGrid.SortableDataGrid.create(columnNames, values, i18nString(UIStrings.database));\n    this._visibleColumnsInput.setVisible(Boolean(this._dataGrid));\n    if (!this._dataGrid) {\n      this._emptyWidget = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.theStableIsEmpty, {PH1: this.tableName}));\n      this._emptyWidget.show(this.element);\n      return;\n    }\n    this._dataGrid.setStriped(true);\n    this._dataGrid.asWidget().show(this.element);\n    this._dataGrid.autoSizeColumns(5);\n\n    this._columnsMap.clear();\n    for (let i = 1; i < columnNames.length; ++i) {\n      this._columnsMap.set(columnNames[i], String(i));\n    }\n    this._lastVisibleColumns = '';\n    const visibleColumnsText = this._visibleColumnsSetting.get()[this.tableName] || '';\n    this._visibleColumnsInput.setValue(visibleColumnsText);\n    this._onVisibleColumnsChanged();\n  }\n\n  _onVisibleColumnsChanged(): void {\n    if (!this._dataGrid) {\n      return;\n    }\n    const text = this._visibleColumnsInput.value();\n    const parts = text.split(/[\\s,]+/);\n    const matches = new Set<string>();\n    const columnsVisibility = new Set<string>();\n    columnsVisibility.add('0');\n    for (const part of parts) {\n      const mappedColumn = this._columnsMap.get(part);\n      if (mappedColumn !== undefined) {\n        matches.add(part);\n        columnsVisibility.add(mappedColumn);\n      }\n    }\n    const newVisibleColumns = [...matches].sort().join(', ');\n    if (newVisibleColumns.length === 0) {\n      for (const v of this._columnsMap.values()) {\n        columnsVisibility.add(v);\n      }\n    }\n    if (newVisibleColumns === this._lastVisibleColumns) {\n      return;\n    }\n    const visibleColumnsRegistry = this._visibleColumnsSetting.get();\n    visibleColumnsRegistry[this.tableName] = text;\n    this._visibleColumnsSetting.set(visibleColumnsRegistry);\n    this._dataGrid.setColumnsVisiblity(columnsVisibility);\n    this._lastVisibleColumns = newVisibleColumns;\n  }\n\n  _queryError(): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    const errorMsgElement = document.createElement('div');\n    errorMsgElement.className = 'storage-table-error';\n    errorMsgElement.textContent = i18nString(UIStrings.anErrorOccurredTryingToreadTheS, {PH1: this.tableName});\n    this.element.appendChild(errorMsgElement);\n  }\n\n  _refreshButtonClicked(_event: Common.EventTarget.EventTargetEvent): void {\n    this.update();\n  }\n}\n"]}