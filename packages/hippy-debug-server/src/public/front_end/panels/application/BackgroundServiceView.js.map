{"version":3,"file":"BackgroundServiceView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/BackgroundServiceView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,QAAQ,MAAM,mCAAmC,CAAC;AAC9D,OAAO,KAAK,QAAQ,MAAM,mDAAmD,CAAC;AAC9E,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAIhD,OAAO,EAAC,MAAM,EAAC,MAAM,6BAA6B,CAAC,CAAE,qCAAqC;AAE1F,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,eAAe,EAAE,kBAAkB;IACnC;;MAEE;IACF,cAAc,EAAE,iBAAiB;IACjC;;MAEE;IACF,aAAa,EAAE,gBAAgB;IAC/B;;MAEE;IACF,aAAa,EAAE,eAAe;IAC9B;;MAEE;IACF,cAAc,EAAE,iBAAiB;IACjC;;MAEE;IACF,sBAAsB,EAAE,0BAA0B;IAClD;;MAEE;IACF,KAAK,EAAE,OAAO;IACd;;MAEE;IACF,UAAU,EAAE,aAAa;IACzB;;MAEE;IACF,0BAA0B,EAAE,gCAAgC;IAC5D;;MAEE;IACF,mBAAmB,EAAE,uBAAuB;IAC5C;;MAEE;IACF,oBAAoB,EAAE,wBAAwB;IAC9C;;MAEE;IACF,SAAS,EAAE,WAAW;IACtB;;MAEE;IACF,KAAK,EAAE,OAAO;IACd;;MAEE;IACF,MAAM,EAAE,QAAQ;IAChB;;MAEE;IACF,OAAO,EAAE,sBAAsB;IAC/B;;MAEE;IACF,UAAU,EAAE,aAAa;IACzB;;MAEE;IACF,kBAAkB,EAAE,qBAAqB;IACzC;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,2BAA2B,EAAE,kCAAkC;IAC/D;;;MAGE;IACF,kBAAkB,EAAE,6BAA6B;IACjD;;;MAGE;IACF,8BAA8B,EAAE,6EAA6E;IAC7G;;;;MAIE;IACF,6BAA6B,EAAE,gEAAgE;IAC/F;;MAEE;IACF,KAAK,EAAE,OAAO;IACd;;MAEE;IACF,sBAAsB,EAAE,4BAA4B;CACrD,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,6CAA6C,EAAE,SAAS,CAAC,CAAC;AACnG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,MAAM,OAAO,qBAAsB,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IACvD,YAAY,CAAyC;IACrD,MAAM,CAAyB;IAC/B,qBAAqB,CAAqD;IAC1E,sBAAsB,CAAkD;IACxE,aAAa,CAA+B;IAC5C,aAAa,CAA4B;IACzC,eAAe,CAA8B;IAC7C,WAAW,CAA4B;IACvC,QAAQ,CAAqB;IAC7B,YAAY,CAA6B;IACzC,SAAS,CAA4C;IACrD,aAAa,CAAiB;IAC9B,kBAAkB,CAAqB;IACvC,QAAQ,CAAwB;IAEhC,MAAM,CAAC,WAAW,CAAC,WAAmB;QACpC,QAAQ,WAAW,EAAE;YACnB;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAC/C;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC9C;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC7C;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC7C;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC9C;gBACE,OAAO,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;YACtD;gBACE,OAAO,EAAE,CAAC;SACb;IACH,CAAC;IAED,YAAY,WAAmD,EAAE,KAA6B;QAC5F,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,mBAAmB,CAAC,8CAA8C,EAAE,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAAC,CAAC;QACxG,IAAI,CAAC,mBAAmB,CAAC,2BAA2B,EAAE,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAAC,CAAC;QAErF,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;QAChG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,8BAA8B,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACjG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEtC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC;QAEvG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,qBAAqB,CACrD,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CACxC,GAAG,CAAC,qBAAqB,CAAC,MAAM,CAAC,yBAAyB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,aAAa;YACb,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,qCAAqC,CAC3D,CAAC;QAEnC,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,4BAA4B,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB;;;WAGG;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACzG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAExC,IAAI,CAAC,aAAa,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAE1C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAE/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,aAAa,GAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAA8B,CAAC;QAC7G,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEpD,MAAM,WAAW,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,iBAAiB,CAAC,CAAC;QACjG,WAAW,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAE7C,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;QAEhC,IAAI,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACxG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YAChF,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAElD,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;QAEhC,IAAI,CAAC,eAAe,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,eAAe,CACjD,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,EAClG,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QAClG,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvB;IACH,CAAC;IAED;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,wBAAwB,CAAC,KAA0C;QACjE,MAAM,KAAK,GAAI,KAAK,CAAC,IAAuB,CAAC;QAC7C,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,YAAY,EAAE;YAC3C,OAAO;SACR;QAED,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE;YACtD,OAAO;SACR;QAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC7C,CAAC;IAED,0BAA0B;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC3C,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAChG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,EAAE,qCAAqC,CAAC,CAAC;IACpF,CAAC;IAED,gBAAgB,CAAC,KAA0C;QACzD,MAAM,YAAY,GAAI,KAAK,CAAC,IAA0D,CAAC;QACvF,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YACpC,OAAO;SACR;QACD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IAC/B,CAAC;IAED,gBAAgB;QACd,oEAAoE;QACpE,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE;YAClC,OAAO;SACR;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,SAAS,CAAC,YAA+D;QACvE,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;QACrE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,eAAe;QACb,MAAM,OAAO,GAAI;YACf,EAAC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAC;YACjC,EAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YACpE,EAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,EAAC;YACjE,EAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,EAAC;YAC/D,EAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC;YAChE,EAAC,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,EAAE,EAAC;SAC/B,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;YAClD,WAAW,EAAE,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC;YACrD,OAAO;YACP,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,SAAS;YAC1B,cAAc,EAAE,SAAS;SAC1B,CAAC,CAAC;QACH,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAE1B,QAAQ,CAAC,gBAAgB,CACrB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAE,KAAK,CAAC,IAAsB,CAAC,CAAC,CAAC;QAEtG,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,YAA+D;QAC9E,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,oFAAoF;QACpF,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC7C,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAC1F,SAAS,CAAC;QACd,IAAI,YAAY,EAAE;YAChB,OAAO,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SAC5E;QAED,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YACjD,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC;YACtF,MAAM,EAAE,YAAY,CAAC,MAAM;YAC3B,OAAO;YACP,SAAS,EAAE,YAAY,CAAC,SAAS;YACjC,UAAU,EAAE,YAAY,CAAC,UAAU;SACpC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,KAAwD;QACnE,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,YAAY,EAAE;YACvC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QAED,yBAAyB;QACzB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE/D,OAAO,IAAI,CAAC,sBAAsB,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACxE,CAAC;IAED,oBAAoB;QAClB,IAAI,GAAG,GAAG,gGAAgG,CAAC;QAE3G,QAAQ,IAAI,CAAC,YAAY,EAAE;YACzB;gBACE,GAAG,IAAI,QAAQ,CAAC;gBAChB,MAAM;YACR;gBACE,GAAG,IAAI,OAAO,CAAC;gBACf,MAAM;YACR;gBACE,GAAG,IAAI,OAAO,CAAC;gBACf,MAAM;YACR;gBACE,GAAG,IAAI,gBAAgB,CAAC;gBACxB,MAAM;YACR;gBACE,MAAM;SACT;QAED,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,YAAY,CAAC,QAA4B;QACvC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,KAAK,QAAQ,EAAE;YACnE,OAAO;SACR;QAED,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;QAEnC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACxD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;QACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEjE,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC7C,gDAAgD;YAChD,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;SAC3F;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE;YACvC,yDAAyD;YACzD,MAAM,WAAW,GAAG,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACzE,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,EAAC,GAAG,EAAE,WAAW,EAAC,CAAC,CAAC;YACrG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,8BAA8B,EAAE,EAAC,GAAG,EAAE,WAAW,EAAC,CAAC,CAAC;SAClH;aAAM;YACL,MAAM,mBAAmB,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAEtF,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YACvD,SAAS,CAAC,WAAW,GAAG,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,QAAQ,EAAE;iBAC1C,kBAAkB,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAAC;iBAC5D,KAAK,EAAE,CAAC;YAErC,MAAM,YAAY,GAAG,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;YACxE,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YACtE,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CACpE,IAAI,EAAE,SAAS,CAAC,6BAA6B,EAAE,EAAC,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC,CAAC,CAAC;YAEzF,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW;QACf,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,CAAC;QACpG,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAEzD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QAClG,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;CACF;AAED,MAAM,OAAO,aAAc,SAAQ,QAAQ,CAAC,QAAQ,CAAC,YAAuB;IAC1E,cAAc,CAA6C;IAE3D,YAAY,IAAe,EAAE,aAAyD;QACpF,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACzG,CAAC;IAED,aAAa;QACX,MAAM,OAAO,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACrC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAE7D,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE;YACvC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACvD,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,kCAAkC,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;YAC1F,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,+CAA+C,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;aACnG;iBAAM;gBACL,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,kEAAkE,CAAC,CAAC,WAAW;oBAClG,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACjC;YACD,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAClC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACvD,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,iEAAiE,CAAC,CAAC,WAAW;gBACjG,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;YACjD,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAClC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAED,IAAI,sBAAsC,CAAC;AAE3C,MAAM,OAAO,cAAc;IACzB,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,sBAAsB,IAAI,QAAQ,EAAE;YACvC,sBAAsB,GAAG,IAAI,cAAc,EAAE,CAAC;SAC/C;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;IAED,YAAY,CAAC,OAA2B,EAAE,QAAgB;QACxD,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACnD,QAAQ,QAAQ,EAAE;YAChB,KAAK,qCAAqC,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,EAAE;oBACT,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;iBAC9D;gBACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as Common from '../../core/common/common.js'; // eslint-disable-line no-unused-vars\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {BackgroundServiceModel} from './BackgroundServiceModel.js';\nimport {Events} from './BackgroundServiceModel.js';  // eslint-disable-line no-unused-vars\n\nconst UIStrings = {\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  backgroundFetch: 'Background Fetch',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  backgroundSync: 'Background Sync',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  pushMessaging: 'Push Messaging',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  notifications: 'Notifications',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  paymentHandler: 'Payment Handler',\n  /**\n  *@description Text in the Periodic Background Service View of the Application panel\n  */\n  periodicBackgroundSync: 'Periodic Background Sync',\n  /**\n  *@description Text to clear content\n  */\n  clear: 'Clear',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon download button in the Background Service View of the Application panel\n  */\n  saveEvents: 'Save events',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  showEventsFromOtherDomains: 'Show events from other domains',\n  /**\n  *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n  */\n  stopRecordingEvents: 'Stop recording events',\n  /**\n  *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n  */\n  startRecordingEvents: 'Start recording events',\n  /**\n  *@description Text for timestamps of items\n  */\n  timestamp: 'Timestamp',\n  /**\n  *@description Text that refers to some events\n  */\n  event: 'Event',\n  /**\n  *@description Text for the origin of something\n  */\n  origin: 'Origin',\n  /**\n  *@description Text in Background Service View of the Application panel. The Scope is a URL associated with the Service Worker, which limits which pages/sites the Service Worker operates on.\n  */\n  swScope: 'Service Worker Scope',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  instanceId: 'Instance ID',\n  /**\n  *@description Text in Application Panel Sidebar of the Application panel\n  */\n  backgroundServices: 'Background Services',\n  /**\n  *@description Text that is usually a hyperlink to more documentation\n  */\n  learnMore: 'Learn more',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  selectAnEntryToViewMetadata: 'Select an entry to view metadata',\n  /**\n  *@description Text in Background Service View of the Application panel\n  *@example {Background Fetch} PH1\n  */\n  recordingSActivity: 'Recording {PH1} activity...',\n  /**\n  *@description Inform users that DevTools are recording/waiting for events in the Periodic Background Sync tool of the Application panel\n  *@example {Background Fetch} PH1\n  */\n  devtoolsWillRecordAllSActivity: 'DevTools will record all {PH1} activity for up to 3 days, even when closed.',\n  /**\n  *@description Text in Background Service View of the Application panel\n  *@example {record} PH1\n  *@example {Ctrl + R} PH2\n  */\n  clickTheRecordButtonSOrHitSTo: 'Click the record button {PH1} or hit {PH2} to start recording.',\n  /**\n  *@description Text to show an item is empty\n  */\n  empty: 'empty',\n  /**\n  *@description Text in Background Service View of the Application panel\n  */\n  noMetadataForThisEvent: 'No metadata for this event',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/BackgroundServiceView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class BackgroundServiceView extends UI.Widget.VBox {\n  _serviceName: Protocol.BackgroundService.ServiceName;\n  _model: BackgroundServiceModel;\n  _serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n  _securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager;\n  _recordAction: UI.ActionRegistration.Action;\n  _recordButton!: UI.Toolbar.ToolbarToggle;\n  _originCheckbox!: UI.Toolbar.ToolbarCheckbox;\n  _saveButton!: UI.Toolbar.ToolbarButton;\n  _toolbar: UI.Toolbar.Toolbar;\n  _splitWidget: UI.SplitWidget.SplitWidget;\n  _dataGrid: DataGrid.DataGrid.DataGridImpl<EventData>;\n  _previewPanel: UI.Widget.VBox;\n  _selectedEventNode: EventDataNode|null;\n  _preview: UI.Widget.Widget|null;\n\n  static getUIString(serviceName: string): string {\n    switch (serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        return i18nString(UIStrings.backgroundFetch);\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        return i18nString(UIStrings.backgroundSync);\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        return i18nString(UIStrings.pushMessaging);\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        return i18nString(UIStrings.notifications);\n      case Protocol.BackgroundService.ServiceName.PaymentHandler:\n        return i18nString(UIStrings.paymentHandler);\n      case Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync:\n        return i18nString(UIStrings.periodicBackgroundSync);\n      default:\n        return '';\n    }\n  }\n\n  constructor(serviceName: Protocol.BackgroundService.ServiceName, model: BackgroundServiceModel) {\n    super(true);\n    this.registerRequiredCSS('panels/application/backgroundServiceView.css', {enableLegacyPatching: false});\n    this.registerRequiredCSS('ui/legacy/emptyWidget.css', {enableLegacyPatching: false});\n\n    this._serviceName = serviceName;\n\n    this._model = model;\n    this._model.addEventListener(Events.RecordingStateChanged, this._onRecordingStateChanged, this);\n    this._model.addEventListener(Events.BackgroundServiceEventReceived, this._onEventReceived, this);\n    this._model.enable(this._serviceName);\n\n    this._serviceWorkerManager = this._model.target().model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n\n    this._securityOriginManager = this._model.target().model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    if (!this._securityOriginManager) {\n      throw new Error('SecurityOriginManager instance is missing');\n    }\n    this._securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.MainSecurityOriginChanged, () => this._onOriginChanged());\n    this._recordAction =\n        (UI.ActionRegistry.ActionRegistry.instance().action('background-service.toggle-recording') as\n         UI.ActionRegistration.Action);\n\n    this._toolbar = new UI.Toolbar.Toolbar('background-service-toolbar', this.contentElement);\n    this._setupToolbar();\n\n    /**\n     * This will contain the DataGrid for displaying events, and a panel at the bottom for showing\n     * extra metadata related to the selected event.\n     */\n    this._splitWidget = new UI.SplitWidget.SplitWidget(/* isVertical= */ false, /* secondIsSidebar= */ true);\n    this._splitWidget.show(this.contentElement);\n\n    this._dataGrid = this._createDataGrid();\n\n    this._previewPanel = new UI.Widget.VBox();\n\n    this._selectedEventNode = null;\n\n    this._preview = null;\n\n    this._splitWidget.setMainWidget(this._dataGrid.asWidget());\n    this._splitWidget.setSidebarWidget(this._previewPanel);\n\n    this._showPreview(null);\n  }\n\n  /**\n   * Creates the toolbar UI element.\n   */\n  async _setupToolbar(): Promise<void> {\n    this._recordButton = (UI.Toolbar.Toolbar.createActionButton(this._recordAction) as UI.Toolbar.ToolbarToggle);\n    this._toolbar.appendToolbarItem(this._recordButton);\n\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this._clearEvents());\n    this._toolbar.appendToolbarItem(clearButton);\n\n    this._toolbar.appendSeparator();\n\n    this._saveButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.saveEvents), 'largeicon-download');\n    this._saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      this._saveToFile();\n    });\n    this._saveButton.setEnabled(false);\n    this._toolbar.appendToolbarItem(this._saveButton);\n\n    this._toolbar.appendSeparator();\n\n    this._originCheckbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.showEventsFromOtherDomains), i18nString(UIStrings.showEventsFromOtherDomains),\n        () => this._refreshView());\n    this._toolbar.appendToolbarItem(this._originCheckbox);\n  }\n\n  /**\n   * Displays all available events in the grid.\n   */\n  _refreshView(): void {\n    this._clearView();\n    const events = this._model.getEvents(this._serviceName).filter(event => this._acceptEvent(event));\n    for (const event of events) {\n      this._addEvent(event);\n    }\n  }\n\n  /**\n   * Clears the grid and panel.\n   */\n  _clearView(): void {\n    this._selectedEventNode = null;\n    this._dataGrid.rootNode().removeChildren();\n    this._saveButton.setEnabled(false);\n    this._showPreview(null);\n  }\n\n  /**\n   * Called when the `Toggle Record` button is clicked.\n   */\n  _toggleRecording(): void {\n    this._model.setRecording(!this._recordButton.toggled(), this._serviceName);\n  }\n\n  /**\n   * Called when the `Clear` button is clicked.\n   */\n  _clearEvents(): void {\n    this._model.clearEvents(this._serviceName);\n    this._clearView();\n  }\n\n  _onRecordingStateChanged(event: Common.EventTarget.EventTargetEvent): void {\n    const state = (event.data as RecordingState);\n    if (state.serviceName !== this._serviceName) {\n      return;\n    }\n\n    if (state.isRecording === this._recordButton.toggled()) {\n      return;\n    }\n\n    this._recordButton.setToggled(state.isRecording);\n    this._updateRecordButtonTooltip();\n    this._showPreview(this._selectedEventNode);\n  }\n\n  _updateRecordButtonTooltip(): void {\n    const buttonTooltip = this._recordButton.toggled() ? i18nString(UIStrings.stopRecordingEvents) :\n                                                         i18nString(UIStrings.startRecordingEvents);\n    this._recordButton.setTitle(buttonTooltip, 'background-service.toggle-recording');\n  }\n\n  _onEventReceived(event: Common.EventTarget.EventTargetEvent): void {\n    const serviceEvent = (event.data as Protocol.BackgroundService.BackgroundServiceEvent);\n    if (!this._acceptEvent(serviceEvent)) {\n      return;\n    }\n    this._addEvent(serviceEvent);\n  }\n\n  _onOriginChanged(): void {\n    // No need to refresh the view if we are already showing all events.\n    if (this._originCheckbox.checked()) {\n      return;\n    }\n    this._refreshView();\n  }\n\n  _addEvent(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): void {\n    const data = this._createEventData(serviceEvent);\n    const dataNode = new EventDataNode(data, serviceEvent.eventMetadata);\n    this._dataGrid.rootNode().appendChild(dataNode);\n\n    if (this._dataGrid.rootNode().children.length === 1) {\n      this._saveButton.setEnabled(true);\n      this._showPreview(this._selectedEventNode);\n    }\n  }\n\n  _createDataGrid(): DataGrid.DataGrid.DataGridImpl<EventData> {\n    const columns = ([\n      {id: 'id', title: '#', weight: 1},\n      {id: 'timestamp', title: i18nString(UIStrings.timestamp), weight: 8},\n      {id: 'eventName', title: i18nString(UIStrings.event), weight: 10},\n      {id: 'origin', title: i18nString(UIStrings.origin), weight: 10},\n      {id: 'swScope', title: i18nString(UIStrings.swScope), weight: 5},\n      {id: 'instanceId', title: i18nString(UIStrings.instanceId), weight: 10},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.backgroundServices),\n      columns,\n      editCallback: undefined,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    dataGrid.setStriped(true);\n\n    dataGrid.addEventListener(\n        DataGrid.DataGrid.Events.SelectedNode, event => this._showPreview((event.data as EventDataNode)));\n\n    return dataGrid;\n  }\n\n  /**\n   * Creates the data object to pass to the DataGrid Node.\n   */\n  _createEventData(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): EventData {\n    let swScope = '';\n\n    // Try to get the scope of the Service Worker registration to be more user-friendly.\n    const registration = this._serviceWorkerManager ?\n        this._serviceWorkerManager.registrations().get(serviceEvent.serviceWorkerRegistrationId) :\n        undefined;\n    if (registration) {\n      swScope = registration.scopeURL.substr(registration.securityOrigin.length);\n    }\n\n    return {\n      id: this._dataGrid.rootNode().children.length + 1,\n      timestamp: UI.UIUtils.formatTimestamp(serviceEvent.timestamp * 1000, /* full= */ true),\n      origin: serviceEvent.origin,\n      swScope,\n      eventName: serviceEvent.eventName,\n      instanceId: serviceEvent.instanceId,\n    };\n  }\n\n  /**\n   * Filtration function to know whether event should be shown or not.\n   */\n  _acceptEvent(event: Protocol.BackgroundService.BackgroundServiceEvent): boolean {\n    if (event.service !== this._serviceName) {\n      return false;\n    }\n\n    if (this._originCheckbox.checked()) {\n      return true;\n    }\n\n    // Trim the trailing '/'.\n    const origin = event.origin.substr(0, event.origin.length - 1);\n\n    return this._securityOriginManager.securityOrigins().includes(origin);\n  }\n\n  _createLearnMoreLink(): Element {\n    let url = 'https://developer.chrome.com/docs/devtools/javascript/background-services/?utm_source=devtools';\n\n    switch (this._serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        url += '#fetch';\n        break;\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        url += '#sync';\n        break;\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        url += '#push';\n        break;\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        url += '#notifications';\n        break;\n      default:\n        break;\n    }\n\n    return UI.XLink.XLink.create(url, i18nString(UIStrings.learnMore));\n  }\n\n  _showPreview(dataNode: EventDataNode|null): void {\n    if (this._selectedEventNode && this._selectedEventNode === dataNode) {\n      return;\n    }\n\n    this._selectedEventNode = dataNode;\n\n    if (this._preview) {\n      this._preview.detach();\n    }\n\n    if (this._selectedEventNode) {\n      this._preview = this._selectedEventNode.createPreview();\n      this._preview.show(this._previewPanel.contentElement);\n      return;\n    }\n\n    this._preview = new UI.Widget.VBox();\n    this._preview.contentElement.classList.add('background-service-preview', 'fill');\n    const centered = this._preview.contentElement.createChild('div');\n\n    if (this._dataGrid.rootNode().children.length) {\n      // Inform users that grid entries are clickable.\n      centered.createChild('p').textContent = i18nString(UIStrings.selectAnEntryToViewMetadata);\n    } else if (this._recordButton.toggled()) {\n      // Inform users that we are recording/waiting for events.\n      const featureName = BackgroundServiceView.getUIString(this._serviceName);\n      centered.createChild('p').textContent = i18nString(UIStrings.recordingSActivity, {PH1: featureName});\n      centered.createChild('p').textContent = i18nString(UIStrings.devtoolsWillRecordAllSActivity, {PH1: featureName});\n    } else {\n      const landingRecordButton = UI.Toolbar.Toolbar.createActionButton(this._recordAction);\n\n      const recordKey = document.createElement('b');\n      recordKey.classList.add('background-service-shortcut');\n      recordKey.textContent = UI.ShortcutRegistry.ShortcutRegistry.instance()\n                                  .shortcutsForAction('background-service.toggle-recording')[0]\n                                  .title();\n\n      const inlineButton = UI.UIUtils.createInlineButton(landingRecordButton);\n      inlineButton.classList.add('background-service-record-inline-button');\n      centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n          str_, UIStrings.clickTheRecordButtonSOrHitSTo, {PH1: inlineButton, PH2: recordKey}));\n\n      centered.appendChild(this._createLearnMoreLink());\n    }\n\n    this._preview.show(this._previewPanel.contentElement);\n  }\n\n  /**\n   * Saves all currently displayed events in a file (JSON format).\n   */\n  async _saveToFile(): Promise<void> {\n    const fileName = `${this._serviceName}-${Platform.DateUtilities.toISO8601Compact(new Date())}.json`;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const events = this._model.getEvents(this._serviceName).filter(event => this._acceptEvent(event));\n    await stream.write(JSON.stringify(events, undefined, 2));\n    stream.close();\n  }\n}\n\nexport class EventDataNode extends DataGrid.DataGrid.DataGridNode<EventData> {\n  _eventMetadata: Protocol.BackgroundService.EventMetadata[];\n\n  constructor(data: EventData, eventMetadata: Protocol.BackgroundService.EventMetadata[]) {\n    super(data);\n\n    this._eventMetadata = eventMetadata.sort((m1, m2) => Platform.StringUtilities.compare(m1.key, m2.key));\n  }\n\n  createPreview(): UI.Widget.VBox {\n    const preview = new UI.Widget.VBox();\n    preview.element.classList.add('background-service-metadata');\n\n    for (const entry of this._eventMetadata) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name').textContent = entry.key + ': ';\n      if (entry.value) {\n        div.createChild('div', 'background-service-metadata-value source-code').textContent = entry.value;\n      } else {\n        div.createChild('div', 'background-service-metadata-value background-service-empty-value').textContent =\n            i18nString(UIStrings.empty);\n      }\n      preview.element.appendChild(div);\n    }\n\n    if (!preview.element.children.length) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name background-service-empty-value').textContent =\n          i18nString(UIStrings.noMetadataForThisEvent);\n      preview.element.appendChild(div);\n    }\n\n    return preview;\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const view = context.flavor(BackgroundServiceView);\n    switch (actionId) {\n      case 'background-service.toggle-recording': {\n        if (!view) {\n          throw new Error('BackgroundServiceView instance is missing');\n        }\n        view._toggleRecording();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface RecordingState {\n  isRecording: boolean;\n  serviceName: Protocol.BackgroundService.ServiceName;\n}\nexport interface EventData {\n  id: number;\n  timestamp: string;\n  origin: string;\n  swScope: string;\n  eventName: string;\n  instanceId: string;\n}\n"]}