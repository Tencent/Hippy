{"version":3,"file":"TrustTokensTreeElement.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/TrustTokensTreeElement.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,EAAC,2BAA2B,EAAC,MAAM,kCAAkC,CAAC;AAC7E,OAAO,KAAK,qBAAqB,MAAM,4BAA4B,CAAC;AAGpE,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,WAAW,EAAE,cAAc;CAC5B,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;AACpG,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAE7E,oFAAoF;AACpF,MAAM,mBAAmB,GAAG,IAAI,CAAC;AAEjC,MAAM,OAAO,sBAAuB,SAAQ,2BAA2B;IAC7D,IAAI,CAAgC;IAE5C,YAAY,YAA4B;QACtC,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAAC;QAC9D,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,OAAO;QACT,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,QAAQ,CAAC,cAAwB;QAC/B,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,IAAI,4BAA4B,EAAE,CAAC;SAChD;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAED,MAAM,OAAO,4BAA6B,SAAQ,EAAE,CAAC,eAAe,CAAC,eAAe;IACjE,eAAe,GAAG,IAAI,qBAAqB,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;IAE/F;QACE,KAAK,CAAC,oBAAoB,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;QACvD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3E,IAAI,CAAC,UAAU,EAAE;YACf,OAAO;SACR;QACD,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC,qBAAqB,EAAE,CAAC;QACzE,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG;YAC1B,MAAM;YACN,kBAAkB,EAAE,CAAC,MAAc,EAAQ,EAAE;gBAC3C,UAAU,CAAC,YAAY,EAAE,CAAC,uBAAuB,CAAC,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC;YAC5E,CAAC;SACF,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport * as ApplicationComponents from './components/components.js';\nimport type {ResourcesPanel} from './ResourcesPanel.js';\n\nconst UIStrings = {\n  /**\n  *@description Hover text for an info icon in the Trust Token panel\n  */\n  trustTokens: 'Trust Tokens',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/TrustTokensTreeElement.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/** Fetch the Trust Token data regularly from the backend while the panel is open */\nconst REFRESH_INTERVAL_MS = 1000;\n\nexport class TrustTokensTreeElement extends ApplicationPanelTreeElement {\n  private view?: TrustTokensViewWidgetWrapper;\n\n  constructor(storagePanel: ResourcesPanel) {\n    super(storagePanel, i18nString(UIStrings.trustTokens), false);\n    const icon = UI.Icon.Icon.create('mediumicon-database', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n  }\n\n  get itemURL(): string {\n    return 'trustTokens://';\n  }\n\n  onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    if (!this.view) {\n      this.view = new TrustTokensViewWidgetWrapper();\n    }\n    this.showView(this.view);\n    return false;\n  }\n}\n\nexport class TrustTokensViewWidgetWrapper extends UI.ThrottledWidget.ThrottledWidget {\n  private readonly trustTokensView = new ApplicationComponents.TrustTokensView.TrustTokensView();\n\n  constructor() {\n    super(/* isWebComponent */ false, REFRESH_INTERVAL_MS);\n    this.contentElement.appendChild(this.trustTokensView);\n    this.update();\n  }\n\n  protected async doUpdate(): Promise<void> {\n    const mainTarget = SDK.TargetManager.TargetManager.instance().mainTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const {tokens} = await mainTarget.storageAgent().invoke_getTrustTokens();\n    this.trustTokensView.data = {\n      tokens,\n      deleteClickHandler: (issuer: string): void => {\n        mainTarget.storageAgent().invoke_clearTrustTokens({issuerOrigin: issuer});\n      },\n    };\n\n    this.update();\n  }\n}\n"]}