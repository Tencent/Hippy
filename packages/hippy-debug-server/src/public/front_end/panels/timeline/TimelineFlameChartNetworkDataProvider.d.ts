import type * as TimelineModel from '../../models/timeline_model/timeline_model.js';
import * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';
import type { PerformanceModel } from './PerformanceModel.js';
import { Selection } from './TimelineFlameChartView.js';
import { TimelineSelection } from './TimelinePanel.js';
export declare class TimelineFlameChartNetworkDataProvider implements PerfUI.FlameChart.FlameChartDataProvider {
    _font: string;
    _style: {
        padding: number;
        height: number;
        collapsible: boolean;
        color: string;
        font: string;
        backgroundColor: string;
        nestingLevel: number;
        useFirstLineForOverview: boolean;
        useDecoratorsForOverview: boolean;
        shareHeaderLine: boolean;
    };
    _group: PerfUI.FlameChart.Group;
    _minimumBoundary: number;
    _maximumBoundary: number;
    _timeSpan: number;
    _requests: TimelineModel.TimelineModel.NetworkRequest[];
    _maxLevel: number;
    _model?: TimelineModel.TimelineModel.TimelineModelImpl | null;
    _timelineData?: any;
    _startTime?: number;
    _endTime?: number;
    _lastSelection?: Selection;
    _priorityToValue?: Map<string, number>;
    constructor();
    setModel(performanceModel: PerformanceModel | null): void;
    isEmpty(): boolean;
    maxStackDepth(): number;
    timelineData(): PerfUI.FlameChart.TimelineData;
    minimumBoundary(): number;
    totalTime(): number;
    setWindowTimes(startTime: number, endTime: number): void;
    createSelection(index: number): TimelineSelection | null;
    entryIndexForSelection(selection: TimelineSelection | null): number;
    entryColor(index: number): string;
    textColor(_index: number): string;
    entryTitle(index: number): string | null;
    entryFont(_index: number): string | null;
    decorateEntry(index: number, context: CanvasRenderingContext2D, text: string | null, barX: number, barY: number, barWidth: number, barHeight: number, unclippedBarX: number, timeToPixelRatio: number): boolean;
    forceDecoration(_index: number): boolean;
    prepareHighlightedEntryInfo(index: number): Element | null;
    _colorForPriority(priority: string): string | null;
    _appendTimelineData(): void;
    _updateTimelineData(): void;
    _appendEntry(request: TimelineModel.TimelineModel.NetworkRequest): void;
    preferredHeight(): number;
    isExpanded(): boolean;
    formatValue(value: number, precision?: number): string;
    canJumpToEntry(_entryIndex: number): boolean;
    navStartTimes(): Map<any, any>;
}
