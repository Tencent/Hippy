{"version":3,"file":"UserAgentMetadata.js","sourceRoot":"","sources":["../../../../../../front_end/panels/emulation/UserAgentMetadata.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,EAAE;AACF,2EAA2E;AAC3E,gDAAgD;AAMhD,OAAO,EAAC,SAAS,EAAc,aAAa,EAAE,aAAa,EAAC,MAAM,wBAAwB,CAAC;AAE3F;GACG;AACH,MAAM,UAAU,eAAe,CAAC,UAAkB,EAAE,gBAAwB,EAAE,iBAAyB;IAErG,MAAM,SAAS,GAA+C,EAAE,CAAC;IACjE,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAI,WAAW,CAAC,IAAI,kBAAqB,EAAE;QACzC,OAAO,gBAAgB,CAAC;KACzB;IACD,KAAK,MAAM,QAAQ,IAAI,WAAW,CAAC,KAAK,EAAE;QACxC,IAAI,QAAQ,CAAC,IAAI,iBAAoB,EAAE;YACrC,OAAO,iBAAiB,CAAC;SAC1B;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC;QAChC,IAAI,QAAQ,CAAC,IAAI,mBAAsB,EAAE;YACvC,OAAO,iBAAiB,CAAC;SAC1B;QACD,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1C,OAAO,iBAAiB,CAAC;SAC1B;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,EAAE;YAC5B,OAAO,iBAAiB,CAAC;SAC1B;QACD,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC;QAC/B,IAAI,UAAU,CAAC,IAAI,mBAAsB,EAAE;YACzC,OAAO,iBAAiB,CAAC;SAC1B;QAED,SAAS,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,KAAK,EAAC,CAAC,CAAC;KACpE;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,MAAkD;IACpF,MAAM,MAAM,GAAS,EAAC,IAAI,eAAiB,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;IACxD,MAAM,UAAU,GAAc,EAAC,IAAI,oBAAuB,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC;IACxE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,UAAU,GAAa,EAAC,IAAI,gBAAmB,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC;QAC3E,MAAM,SAAS,GAAa,EAAC,IAAI,gBAAmB,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAC,CAAC;QAC5E,MAAM,SAAS,GAAe;YAC5B,IAAI,oBAAuB;YAC3B,KAAK,EAAE,CAAC,EAAC,IAAI,mBAAsB,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC;SAC1E,CAAC;QAEF,MAAM,MAAM,GAAS,EAAC,IAAI,cAAiB,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC;QACvF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC3B;IAED,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC9C,OAAO,eAAe,CAAC,IAAI,kBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC;AAChF,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,iCAAiC,CAAC,KAAa,EAAE,WAAmB;IAClF,MAAM,YAAY,GAAG,aAAa,CAAC;QACjC,IAAI,cAAiB;QACrB,KAAK,EAAE,EAAC,IAAI,gBAAmB,EAAE,KAAK,EAAE,KAAK,EAAC;QAC9C,UAAU,EAAE,EAAC,IAAI,oBAAuB,EAAE,KAAK,EAAE,EAAE,EAAC;KACrD,CAAC,CAAC;IACH,IAAI,YAAY,CAAC,IAAI,kBAAqB,EAAE;QAC1C,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW,EAAC,CAAC;KAClD;IACD,OAAO,EAAC,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAC,CAAC;AAChD,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n//\n// Helper functions for working with UserAgentMetadata protocol objects, in\n// particular their plain string representation.\n\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Item, List, Parameters, ParamName, String as SHString} from './StructuredHeaders.js';\nimport {parseList, ResultKind, serializeItem, serializeList} from './StructuredHeaders.js';\n\n/* Returned string is for error, either parseErrorString or structErrorString.\n */\nexport function parseBrandsList(stringForm: string, parseErrorString: string, structErrorString: string):\n    Protocol.Emulation.UserAgentBrandVersion[]|string {\n  const brandList: Protocol.Emulation.UserAgentBrandVersion[] = [];\n  const parseResult = parseList(stringForm);\n  if (parseResult.kind === ResultKind.ERROR) {\n    return parseErrorString;\n  }\n  for (const listItem of parseResult.items) {\n    if (listItem.kind !== ResultKind.ITEM) {\n      return structErrorString;\n    }\n    const bareItem = listItem.value;\n    if (bareItem.kind !== ResultKind.STRING) {\n      return structErrorString;\n    }\n    if (listItem.parameters.items.length !== 1) {\n      return structErrorString;\n    }\n    const param = listItem.parameters.items[0];\n    if (param.name.value !== 'v') {\n      return structErrorString;\n    }\n    const paramValue = param.value;\n    if (paramValue.kind !== ResultKind.STRING) {\n      return structErrorString;\n    }\n\n    brandList.push({brand: bareItem.value, version: paramValue.value});\n  }\n\n  return brandList;\n}\n\nexport function serializeBrandsList(brands: Protocol.Emulation.UserAgentBrandVersion[]): string {\n  const shList: List = {kind: ResultKind.LIST, items: []};\n  const vParamName: ParamName = {kind: ResultKind.PARAM_NAME, value: 'v'};\n  for (const brand of brands) {\n    const nameString: SHString = {kind: ResultKind.STRING, value: brand.brand};\n    const verString: SHString = {kind: ResultKind.STRING, value: brand.version};\n    const verParams: Parameters = {\n      kind: ResultKind.PARAMETERS,\n      items: [{kind: ResultKind.PARAMETER, name: vParamName, value: verString}],\n    };\n\n    const shItem: Item = {kind: ResultKind.ITEM, value: nameString, parameters: verParams};\n    shList.items.push(shItem);\n  }\n\n  const serializeResult = serializeList(shList);\n  return serializeResult.kind === ResultKind.ERROR ? '' : serializeResult.value;\n}\n\n/*\n * This checks whether the value provided is representable as a structured headers string,\n * which is the validity requirement for the fields in UserAgentMetadata that are not the brand list\n * or mobile bool.\n *\n * errorMessage will be passed through on failure.\n */\nexport function validateAsStructuredHeadersString(value: string, errorString: string): UI.ListWidget.ValidatorResult {\n  const parsedResult = serializeItem({\n    kind: ResultKind.ITEM,\n    value: {kind: ResultKind.STRING, value: value},\n    parameters: {kind: ResultKind.PARAMETERS, items: []},\n  });\n  if (parsedResult.kind === ResultKind.ERROR) {\n    return {valid: false, errorMessage: errorString};\n  }\n  return {valid: true, errorMessage: undefined};\n}\n"]}