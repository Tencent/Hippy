{"version":3,"file":"CSSOverviewModel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as ColorPicker from '../../ui/legacy/components/color_picker/color_picker.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport type {ContrastIssue} from './CSSOverviewCompletedView.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\nimport {CSSOverviewUnusedDeclarations} from './CSSOverviewUnusedDeclarations.js';\n\ninterface NodeStyleStats {\n  elementCount: number;\n  backgroundColors: Map<string, Set<number>>;\n  textColors: Map<string, Set<number>>;\n  textColorContrastIssues: Map<string, ContrastIssue[]>;\n  fillColors: Map<string, Set<number>>;\n  borderColors: Map<string, Set<number>>;\n  fontInfo: Map<string, Map<string, Map<string, number[]>>>;\n  unusedDeclarations: Map<string, UnusedDeclaration[]>;\n}\n\nexport interface GlobalStyleStats {\n  styleRules: number;\n  inlineStyles: number;\n  externalSheets: number;\n  stats: {\n    // Simple.\n    type: number,\n    class: number,\n    id: number,\n    universal: number,\n    attribute: number,\n\n    // Non-simple.\n    nonSimple: number,\n  };\n}\n\n\nexport class CSSOverviewModel extends SDK.SDKModel.SDKModel {\n  _runtimeAgent: ProtocolProxyApi.RuntimeApi;\n  _cssAgent: ProtocolProxyApi.CSSApi;\n  _domAgent: ProtocolProxyApi.DOMApi;\n  _domSnapshotAgent: ProtocolProxyApi.DOMSnapshotApi;\n  _overlayAgent: ProtocolProxyApi.OverlayApi;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this._runtimeAgent = target.runtimeAgent();\n    this._cssAgent = target.cssAgent();\n    this._domAgent = target.domAgent();\n    this._domSnapshotAgent = target.domsnapshotAgent();\n    this._overlayAgent = target.overlayAgent();\n  }\n\n  highlightNode(node: number): void {\n    const highlightConfig = {\n      contentColor: Common.Color.PageHighlight.Content.toProtocolRGBA(),\n      showInfo: true,\n      contrastAlgorithm: Root.Runtime.experiments.isEnabled('APCA') ? Protocol.Overlay.ContrastAlgorithm.Apca :\n                                                                      Protocol.Overlay.ContrastAlgorithm.Aa,\n    };\n\n    this._overlayAgent.invoke_hideHighlight();\n    this._overlayAgent.invoke_highlightNode({backendNodeId: node, highlightConfig});\n  }\n\n  async getNodeStyleStats(): Promise<NodeStyleStats> {\n    const backgroundColors = new Map();\n    const textColors = new Map();\n    const textColorContrastIssues = new Map();\n    const fillColors = new Map();\n    const borderColors = new Map();\n    const fontInfo = new Map();\n    const unusedDeclarations = new Map();\n    const snapshotConfig = {\n      computedStyles: [\n        'background-color',\n        'color',\n        'fill',\n        'border-top-width',\n        'border-top-color',\n        'border-bottom-width',\n        'border-bottom-color',\n        'border-left-width',\n        'border-left-color',\n        'border-right-width',\n        'border-right-color',\n        'font-family',\n        'font-size',\n        'font-weight',\n        'line-height',\n        'position',\n        'top',\n        'right',\n        'bottom',\n        'left',\n        'display',\n        'width',\n        'height',\n        'vertical-align',\n      ],\n      includeTextColorOpacities: true,\n      includeBlendedBackgroundColors: true,\n    };\n\n    const formatColor = (color: Common.Color.Color): string|null => {\n      return color.hasAlpha() ? color.asString(Common.Color.Format.HEXA) : color.asString(Common.Color.Format.HEX);\n    };\n\n    const storeColor = (id: number, nodeId: number, target: Map<string, Set<number>>): Common.Color.Color|undefined => {\n      if (id === -1) {\n        return;\n      }\n\n      // Parse the color, discard transparent ones.\n      const colorText = strings[id];\n      if (!colorText) {\n        return;\n      }\n\n      const color = Common.Color.Color.parse(colorText);\n      if (!color || color.rgba()[3] === 0) {\n        return;\n      }\n\n      // Format the color and use as the key.\n      const colorFormatted = formatColor(color);\n      if (!colorFormatted) {\n        return;\n      }\n\n      // Get the existing set of nodes with the color, or create a new set.\n      const colorValues = target.get(colorFormatted) || new Set();\n      colorValues.add(nodeId);\n\n      // Store.\n      target.set(colorFormatted, colorValues);\n\n      return color;\n    };\n\n    const isSVGNode = (nodeName: string): boolean => {\n      const validNodes = new Set([\n        'altglyph',\n        'circle',\n        'ellipse',\n        'path',\n        'polygon',\n        'polyline',\n        'rect',\n        'svg',\n        'text',\n        'textpath',\n        'tref',\n        'tspan',\n      ]);\n      return validNodes.has(nodeName.toLowerCase());\n    };\n\n    const isReplacedContent = (nodeName: string): boolean => {\n      const validNodes = new Set(['iframe', 'video', 'embed', 'img']);\n      return validNodes.has(nodeName.toLowerCase());\n    };\n\n    const isTableElementWithDefaultStyles = (nodeName: string, display: string): boolean => {\n      const validNodes = new Set(['tr', 'td', 'thead', 'tbody']);\n      return validNodes.has(nodeName.toLowerCase()) && display.startsWith('table');\n    };\n\n    let elementCount = 0;\n\n    const {documents, strings} = await this._domSnapshotAgent.invoke_captureSnapshot(snapshotConfig);\n    for (const {nodes, layout} of documents) {\n      // Track the number of elements in the documents.\n      elementCount += layout.nodeIndex.length;\n\n      for (let idx = 0; idx < layout.styles.length; idx++) {\n        const styles = layout.styles[idx];\n        const nodeIdx = layout.nodeIndex[idx];\n        if (!nodes.backendNodeId || !nodes.nodeName) {\n          continue;\n        }\n        const nodeId = nodes.backendNodeId[nodeIdx];\n        const nodeName = nodes.nodeName[nodeIdx];\n\n        const [backgroundColorIdx, textColorIdx, fillIdx, borderTopWidthIdx, borderTopColorIdx, borderBottomWidthIdx, borderBottomColorIdx, borderLeftWidthIdx, borderLeftColorIdx, borderRightWidthIdx, borderRightColorIdx, fontFamilyIdx, fontSizeIdx, fontWeightIdx, lineHeightIdx, positionIdx, topIdx, rightIdx, bottomIdx, leftIdx, displayIdx, widthIdx, heightIdx, verticalAlignIdx] =\n            styles;\n\n        storeColor(backgroundColorIdx, nodeId, backgroundColors);\n        const textColor = storeColor(textColorIdx, nodeId, textColors);\n\n        if (isSVGNode(strings[nodeName])) {\n          storeColor(fillIdx, nodeId, fillColors);\n        }\n\n        if (strings[borderTopWidthIdx] !== '0px') {\n          storeColor(borderTopColorIdx, nodeId, borderColors);\n        }\n\n        if (strings[borderBottomWidthIdx] !== '0px') {\n          storeColor(borderBottomColorIdx, nodeId, borderColors);\n        }\n\n        if (strings[borderLeftWidthIdx] !== '0px') {\n          storeColor(borderLeftColorIdx, nodeId, borderColors);\n        }\n\n        if (strings[borderRightWidthIdx] !== '0px') {\n          storeColor(borderRightColorIdx, nodeId, borderColors);\n        }\n\n        /**\n         * Create a structure like this for font info:\n         *\n         *                 / size (Map) -- nodes (Array)\n         *                /\n         * Font family (Map) ----- weight (Map) -- nodes (Array)\n         *                \\\n         *                 \\ line-height (Map) -- nodes (Array)\n         */\n        if (fontFamilyIdx && fontFamilyIdx !== -1) {\n          const fontFamily = strings[fontFamilyIdx];\n          const fontFamilyInfo = fontInfo.get(fontFamily) || new Map();\n\n          const sizeLabel = 'font-size';\n          const weightLabel = 'font-weight';\n          const lineHeightLabel = 'line-height';\n\n          const size = fontFamilyInfo.get(sizeLabel) || new Map();\n          const weight = fontFamilyInfo.get(weightLabel) || new Map();\n          const lineHeight = fontFamilyInfo.get(lineHeightLabel) || new Map();\n\n          if (fontSizeIdx !== -1) {\n            const fontSizeValue = strings[fontSizeIdx];\n            const nodes = size.get(fontSizeValue) || [];\n            nodes.push(nodeId);\n            size.set(fontSizeValue, nodes);\n          }\n\n          if (fontWeightIdx !== -1) {\n            const fontWeightValue = strings[fontWeightIdx];\n            const nodes = weight.get(fontWeightValue) || [];\n            nodes.push(nodeId);\n            weight.set(fontWeightValue, nodes);\n          }\n\n          if (lineHeightIdx !== -1) {\n            const lineHeightValue = strings[lineHeightIdx];\n            const nodes = lineHeight.get(lineHeightValue) || [];\n            nodes.push(nodeId);\n            lineHeight.set(lineHeightValue, nodes);\n          }\n\n          // Set the data back.\n          fontFamilyInfo.set(sizeLabel, size);\n          fontFamilyInfo.set(weightLabel, weight);\n          fontFamilyInfo.set(lineHeightLabel, lineHeight);\n          fontInfo.set(fontFamily, fontFamilyInfo);\n        }\n\n        const blendedBackgroundColor =\n            textColor && layout.blendedBackgroundColors && layout.blendedBackgroundColors[idx] !== -1 ?\n            Common.Color.Color.parse(strings[layout.blendedBackgroundColors[idx]]) :\n            null;\n        if (textColor && blendedBackgroundColor) {\n          const contrastInfo = new ColorPicker.ContrastInfo.ContrastInfo({\n            backgroundColors: [blendedBackgroundColor.asString(Common.Color.Format.HEXA) as string],\n            computedFontSize: fontSizeIdx !== -1 ? strings[fontSizeIdx] : '',\n            computedFontWeight: fontWeightIdx !== -1 ? strings[fontWeightIdx] : '',\n          });\n          const blendedTextColor =\n              textColor.blendWithAlpha(layout.textColorOpacities ? layout.textColorOpacities[idx] : 1);\n          contrastInfo.setColor(blendedTextColor);\n          const formattedTextColor = formatColor(blendedTextColor);\n          const formattedBackgroundColor = formatColor(blendedBackgroundColor);\n          const key = `${formattedTextColor}_${formattedBackgroundColor}`;\n          if (Root.Runtime.experiments.isEnabled('APCA')) {\n            const contrastRatio = contrastInfo.contrastRatioAPCA();\n            const threshold = contrastInfo.contrastRatioAPCAThreshold();\n            const passes = contrastRatio && threshold ? Math.abs(contrastRatio) >= threshold : false;\n            if (!passes) {\n              const issue = {\n                nodeId,\n                contrastRatio,\n                textColor: blendedTextColor,\n                backgroundColor: blendedBackgroundColor,\n                thresholdsViolated: {\n                  aa: false,\n                  aaa: false,\n                  apca: true,\n                },\n              };\n              if (textColorContrastIssues.has(key)) {\n                textColorContrastIssues.get(key).push(issue);\n              } else {\n                textColorContrastIssues.set(key, [issue]);\n              }\n            }\n          } else {\n            const aaThreshold = contrastInfo.contrastRatioThreshold('aa') || 0;\n            const aaaThreshold = contrastInfo.contrastRatioThreshold('aaa') || 0;\n            const contrastRatio = contrastInfo.contrastRatio() || 0;\n            if (aaThreshold > contrastRatio || aaaThreshold > contrastRatio) {\n              const issue = {\n                nodeId,\n                contrastRatio,\n                textColor: blendedTextColor,\n                backgroundColor: blendedBackgroundColor,\n                thresholdsViolated: {\n                  aa: aaThreshold > contrastRatio,\n                  aaa: aaaThreshold > contrastRatio,\n                  apca: false,\n                },\n              };\n              if (textColorContrastIssues.has(key)) {\n                textColorContrastIssues.get(key).push(issue);\n              } else {\n                textColorContrastIssues.set(key, [issue]);\n              }\n            }\n          }\n        }\n\n        CSSOverviewUnusedDeclarations.checkForUnusedPositionValues(\n            unusedDeclarations, nodeId, strings, positionIdx, topIdx, leftIdx, rightIdx, bottomIdx);\n\n        // Ignore SVG elements as, despite being inline by default, they can have width & height specified.\n        // Also ignore replaced content, for similar reasons.\n        if (!isSVGNode(strings[nodeName]) && !isReplacedContent(strings[nodeName])) {\n          CSSOverviewUnusedDeclarations.checkForUnusedWidthAndHeightValues(\n              unusedDeclarations, nodeId, strings, displayIdx, widthIdx, heightIdx);\n        }\n\n        if (verticalAlignIdx !== -1 && !isTableElementWithDefaultStyles(strings[nodeName], strings[displayIdx])) {\n          CSSOverviewUnusedDeclarations.checkForInvalidVerticalAlignment(\n              unusedDeclarations, nodeId, strings, displayIdx, verticalAlignIdx);\n        }\n      }\n    }\n\n    return {\n      backgroundColors,\n      textColors,\n      textColorContrastIssues,\n      fillColors,\n      borderColors,\n      fontInfo,\n      unusedDeclarations,\n      elementCount,\n    };\n  }\n\n  getComputedStyleForNode(nodeId: Protocol.DOM.NodeId): Promise<Protocol.CSS.GetComputedStyleForNodeResponse> {\n    return this._cssAgent.invoke_getComputedStyleForNode({nodeId});\n  }\n\n  async getMediaQueries(): Promise<Map<string, Protocol.CSS.CSSMedia[]>> {\n    const queries = await this._cssAgent.invoke_getMediaQueries();\n    const queryMap = new Map<string, Protocol.CSS.CSSMedia[]>();\n\n    if (!queries) {\n      return queryMap;\n    }\n\n    for (const query of queries.medias) {\n      // Ignore media queries applied to stylesheets; instead only use declared media rules.\n      if (query.source === 'linkedSheet') {\n        continue;\n      }\n\n      const entries = queryMap.get(query.text) || ([] as Protocol.CSS.CSSMedia[]);\n      entries.push(query);\n      queryMap.set(query.text, entries);\n    }\n\n    return queryMap;\n  }\n\n  async getGlobalStylesheetStats(): Promise<GlobalStyleStats|void> {\n    // There are no ways to pull CSSOM values directly today, due to its unserializable format,\n    // so instead we execute some JS within the page that extracts the relevant data and send that instead.\n    const expression = `(function() {\n      let styleRules = 0;\n      let inlineStyles = 0;\n      let externalSheets = 0;\n      const stats = {\n        // Simple.\n        type: new Set(),\n        class: new Set(),\n        id: new Set(),\n        universal: new Set(),\n        attribute: new Set(),\n\n        // Non-simple.\n        nonSimple: new Set()\n      };\n\n      for (const styleSheet of document.styleSheets) {\n        if (styleSheet.href) {\n          externalSheets++;\n        } else {\n          inlineStyles++;\n        }\n\n        // Attempting to grab rules can trigger a DOMException.\n        // Try it and if it fails skip to the next stylesheet.\n        let rules;\n        try {\n          rules = styleSheet.rules;\n        } catch (err) {\n          continue;\n        }\n\n        for (const rule of rules) {\n          if ('selectorText' in rule) {\n            styleRules++;\n\n            // Each group that was used.\n            for (const selectorGroup of rule.selectorText.split(',')) {\n              // Each selector in the group.\n              for (const selector of selectorGroup.split(\\/[\\\\t\\\\n\\\\f\\\\r ]+\\/g)) {\n                if (selector.startsWith('.')) {\n                  // Class.\n                  stats.class.add(selector);\n                } else if (selector.startsWith('#')) {\n                  // Id.\n                  stats.id.add(selector);\n                } else if (selector.startsWith('*')) {\n                  // Universal.\n                  stats.universal.add(selector);\n                } else if (selector.startsWith('[')) {\n                  // Attribute.\n                  stats.attribute.add(selector);\n                } else {\n                  // Type or non-simple selector.\n                  const specialChars = \\/[#\\.:\\\\[\\\\]|\\\\+>~]\\/;\n                  if (specialChars.test(selector)) {\n                    stats.nonSimple.add(selector);\n                  } else {\n                    stats.type.add(selector);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        styleRules,\n        inlineStyles,\n        externalSheets,\n        stats: {\n          // Simple.\n          type: stats.type.size,\n          class: stats.class.size,\n          id: stats.id.size,\n          universal: stats.universal.size,\n          attribute: stats.attribute.size,\n\n          // Non-simple.\n          nonSimple: stats.nonSimple.size\n        }\n      }\n    })()`;\n    const {result} = await this._runtimeAgent.invoke_evaluate({expression, returnByValue: true});\n\n    // TODO(paullewis): Handle errors properly.\n    if (result.type !== 'object') {\n      return;\n    }\n\n    return result.value;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(CSSOverviewModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n"]}