{"version":3,"file":"CSSOverviewUnusedDeclarations.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewUnusedDeclarations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nconst UIStrings = {\n  /**\n  *@description Label to explain why top values are ignored\n  */\n  topAppliedToAStatically: '`Top` applied to a statically positioned element',\n  /**\n  *@description Label to explain why left (opposite to right) values are ignored.\n  */\n  leftAppliedToAStatically: '`Left` applied to a statically positioned element',\n  /**\n  *@description Label to explain why right values are ignored\n  */\n  rightAppliedToAStatically: '`Right` applied to a statically positioned element',\n  /**\n  *@description Label to explain why bottom values are ignored\n  */\n  bottomAppliedToAStatically: '`Bottom` applied to a statically positioned element',\n  /**\n  *@description Label to explain why width values are ignored\n  */\n  widthAppliedToAnInlineElement: '`Width` applied to an inline element',\n  /**\n  *@description Label to explain why height values are ignored\n  */\n  heightAppliedToAnInlineElement: '`Height` applied to an inline element',\n  /**\n  *@description Label to explain why vertical-align values are ignored\n  */\n  verticalAlignmentAppliedTo: 'Vertical alignment applied to element which is neither `inline` nor `table-cell`',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/css_overview/CSSOverviewUnusedDeclarations.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport interface UnusedDeclaration {\n  declaration: string;\n  nodeId: number;\n}\n\nexport class CSSOverviewUnusedDeclarations {\n  static _add(target: Map<string, UnusedDeclaration[]>, key: string, item: {declaration: string, nodeId: number}):\n      void {\n    const values = target.get(key) || [];\n    values.push(item);\n    target.set(key, values);\n  }\n\n  static checkForUnusedPositionValues(\n      unusedDeclarations: Map<string, UnusedDeclaration[]>, nodeId: number, strings: string[], positionIdx: number,\n      topIdx: number, leftIdx: number, rightIdx: number, bottomIdx: number): void {\n    if (strings[positionIdx] !== 'static') {\n      return;\n    }\n\n    if (strings[topIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.topAppliedToAStatically);\n      this._add(unusedDeclarations, reason, {\n        declaration: `top: ${strings[topIdx]}`,\n        nodeId,\n      });\n    }\n\n    if (strings[leftIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.leftAppliedToAStatically);\n      this._add(unusedDeclarations, reason, {\n        declaration: `left: ${strings[leftIdx]}`,\n        nodeId,\n      });\n    }\n\n    if (strings[rightIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.rightAppliedToAStatically);\n      this._add(unusedDeclarations, reason, {\n        declaration: `right: ${strings[rightIdx]}`,\n        nodeId,\n      });\n    }\n\n    if (strings[bottomIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.bottomAppliedToAStatically);\n      this._add(unusedDeclarations, reason, {\n        declaration: `bottom: ${strings[bottomIdx]}`,\n        nodeId,\n      });\n    }\n  }\n\n  static checkForUnusedWidthAndHeightValues(\n      unusedDeclarations: Map<string, UnusedDeclaration[]>, nodeId: number, strings: string[], displayIdx: number,\n      widthIdx: number, heightIdx: number): void {\n    if (strings[displayIdx] !== 'inline') {\n      return;\n    }\n\n    if (strings[widthIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.widthAppliedToAnInlineElement);\n      this._add(unusedDeclarations, reason, {\n        declaration: `width: ${strings[widthIdx]}`,\n        nodeId,\n      });\n    }\n\n    if (strings[heightIdx] !== 'auto') {\n      const reason = i18nString(UIStrings.heightAppliedToAnInlineElement);\n      this._add(unusedDeclarations, reason, {\n        declaration: `height: ${strings[heightIdx]}`,\n        nodeId,\n      });\n    }\n  }\n\n  static checkForInvalidVerticalAlignment(\n      unusedDeclarations: Map<string, UnusedDeclaration[]>, nodeId: number, strings: string[], displayIdx: number,\n      verticalAlignIdx: number): void {\n    if (!strings[displayIdx] || strings[displayIdx] === 'inline' || strings[displayIdx].startsWith('table')) {\n      return;\n    }\n\n    if (strings[verticalAlignIdx] !== 'baseline') {\n      const reason = i18nString(UIStrings.verticalAlignmentAppliedTo);\n      this._add(unusedDeclarations, reason, {\n        declaration: `vertical-align: ${strings[verticalAlignIdx]}`,\n        nodeId,\n      });\n    }\n  }\n}\n"]}