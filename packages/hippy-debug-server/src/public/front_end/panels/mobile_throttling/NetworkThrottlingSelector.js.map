{"version":3,"file":"NetworkThrottlingSelector.js","sourceRoot":"","sources":["../../../../../../front_end/panels/mobile_throttling/NetworkThrottlingSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type {NetworkThrottlingConditionsGroup} from './ThrottlingPresets.js';\nimport {ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate something is not enabled\n  */\n  disabled: 'Disabled',\n  /**\n  *@description Title for a group of configuration options\n  */\n  presets: 'Presets',\n  /**\n  *@description Text in Network Throttling Selector of the Network panel\n  */\n  custom: 'Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkThrottlingSelector {\n  _populateCallback: (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>;\n  _selectCallback: (arg0: number) => void;\n  _customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  _options!: (SDK.NetworkManager.Conditions|null)[];\n\n  constructor(\n      populateCallback: (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>,\n      selectCallback: (arg0: number) => void,\n      customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>) {\n    this._populateCallback = populateCallback;\n    this._selectCallback = selectCallback;\n    this._customNetworkConditionsSetting = customNetworkConditionsSetting;\n    this._customNetworkConditionsSetting.addChangeListener(this._populateOptions, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, () => {\n          this._networkConditionsChanged();\n        }, this);\n    this._populateOptions();\n  }\n\n  revealAndUpdate(): void {\n    Common.Revealer.reveal(this._customNetworkConditionsSetting);\n    this._networkConditionsChanged();\n  }\n\n  optionSelected(conditions: SDK.NetworkManager.Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions);\n  }\n\n  _populateOptions(): void {\n    const disabledGroup = {title: i18nString(UIStrings.disabled), items: [SDK.NetworkManager.NoThrottlingConditions]};\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.networkPresets};\n    const customGroup = {title: i18nString(UIStrings.custom), items: this._customNetworkConditionsSetting.get()};\n    this._options = this._populateCallback([disabledGroup, presetsGroup, customGroup]);\n    if (!this._networkConditionsChanged()) {\n      for (let i = this._options.length - 1; i >= 0; i--) {\n        if (this._options[i]) {\n          this.optionSelected(this._options[i] as SDK.NetworkManager.Conditions);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * returns false if selected condition no longer exists\n   */\n  _networkConditionsChanged(): boolean {\n    const value = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    for (let index = 0; index < this._options.length; ++index) {\n      const option = this._options[index];\n      if (option && option.download === value.download && option.upload === value.upload &&\n          option.latency === value.latency && option.title === value.title) {\n        this._selectCallback(index);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"]}