{"version":3,"file":"HeapProfilerPanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapProfilerPanel.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAIhD,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AAElD,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,mBAAmB,EAAE,wBAAwB;CAC9C,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,sCAAsC,EAAE,SAAS,CAAC,CAAC;AAC5F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,IAAI,yBAA4C,CAAC;AACjD,MAAM,OAAO,iBAAkB,SAAQ,aAAa;IAElD;QACE,MAAM,QAAQ,GAAG,QAAQ,CAAC;QAC1B,MAAM,YAAY,GACd,CAAC,QAAQ,CAAC,uBAAuB,EAAE,QAAQ,CAAC,+BAA+B,EAAE,QAAQ,CAAC,uBAAuB,CAAC,CAAC;QACnH,KAAK,CAAC,eAAe,EAAE,YAA6B,EAAE,gCAAgC,CAAC,CAAC;IAC1F,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,yBAAyB,EAAE;YAC9B,yBAAyB,GAAG,IAAI,iBAAiB,EAAE,CAAC;SACrD;QACD,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAED,qBAAqB,CAAC,KAAY,EAAE,WAAuC,EAAE,MAAc;QACzF,IAAI,CAAC,CAAC,MAAM,YAAY,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YACtD,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;YACrB,OAAO;SACR;QAED,MAAM,MAAM,GAAI,MAAwC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACpB,OAAO;SACR;QACD,MAAM,QAAQ,GAAI,MAAM,CAAC,QAAmB,CAAC;QAE7C,MAAM,YAAY,GAAG,QAAQ,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACxB,OAAO;SACR;QAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC,iBAAiB,EAAE,CAAC;QACpE,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QAED,SAAS,YAAY,CAAsB,QAAgB;YACzD,iBAAiB,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACpE,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,MAAM,EAAE;oBAC9B,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;iBACnC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,WAAW,CAAC,aAAa,EAAE,CAAC,UAAU,CAClC,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,YAAY,CAAC,QAA4B,EAAE,SAAiB;QAC1D,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACtE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,iBAAiB,CAAC,CAAC;QACrE,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,YAAY,EAAE,CAAC;SACtB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ;QACN,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACjE,oCAAoC;QACpC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,EAAE,8BAA8B,CAAC,CAAC;IAChF,CAAC;IAED,QAAQ;QACN,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED,UAAU,CAAC,gBAAwB,EAAE,eAAuB;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC;QAC1B,MAAM,YAAY,GAAG,QAAQ,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;QACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC5C,MAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,gEAAgE;YAChE,IAAI,OAAO,CAAC,aAAa,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAE;gBAC3D,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC1B,MAAM,IAAI,GAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAsB,CAAC;gBAChE,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;gBACzD,MAAM;aACP;SACF;IACH,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {HeapSnapshotView} from './HeapSnapshotView.js';\nimport type {ProfileType} from './ProfileHeader.js';\nimport {ProfilesPanel} from './ProfilesPanel.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n  *@description A context menu item in the Heap Profiler Panel of a profiler tool\n  */\n  revealInSummaryView: 'Reveal in Summary view',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfilerPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet heapProfilerPanelInstance: HeapProfilerPanel;\nexport class HeapProfilerPanel extends ProfilesPanel implements UI.ContextMenu.Provider,\n                                                                UI.ActionRegistration.ActionDelegate {\n  constructor() {\n    const registry = instance;\n    const profileTypes =\n        [registry.heapSnapshotProfileType, registry.trackingHeapSnapshotProfileType, registry.samplingHeapProfileType];\n    super('heap_profiler', profileTypes as ProfileType[], 'profiler.heap-toggle-recording');\n  }\n\n  static instance(): HeapProfilerPanel {\n    if (!heapProfilerPanelInstance) {\n      heapProfilerPanelInstance = new HeapProfilerPanel();\n    }\n    return heapProfilerPanelInstance;\n  }\n\n  appendApplicableItems(event: Event, contextMenu: UI.ContextMenu.ContextMenu, target: Object): void {\n    if (!(target instanceof SDK.RemoteObject.RemoteObject)) {\n      return;\n    }\n\n    if (!this.isShowing()) {\n      return;\n    }\n\n    const object = (target as SDK.RemoteObject.RemoteObject);\n    if (!object.objectId) {\n      return;\n    }\n    const objectId = (object.objectId as string);\n\n    const heapProfiles = instance.heapSnapshotProfileType.getProfiles();\n    if (!heapProfiles.length) {\n      return;\n    }\n\n    const heapProfilerModel = object.runtimeModel().heapProfilerModel();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    function revealInView(this: ProfilesPanel, viewName: string): void {\n      heapProfilerModel.snapshotObjectIdForObjectId(objectId).then(result => {\n        if (this.isShowing() && result) {\n          this.showObject(result, viewName);\n        }\n      });\n    }\n\n    contextMenu.revealSection().appendItem(\n        i18nString(UIStrings.revealInSummaryView), revealInView.bind(this, 'Summary'));\n  }\n\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    const panel = UI.Context.Context.instance().flavor(HeapProfilerPanel);\n    console.assert(Boolean(panel) && panel instanceof HeapProfilerPanel);\n    if (panel) {\n      panel.toggleRecord();\n    }\n    return true;\n  }\n\n  wasShown(): void {\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, this);\n    // Record the memory tool load time.\n    Host.userMetrics.panelLoaded('heap_profiler', 'DevTools.Launch.HeapProfiler');\n  }\n\n  willHide(): void {\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, null);\n  }\n\n  showObject(snapshotObjectId: string, perspectiveName: string): void {\n    const registry = instance;\n    const heapProfiles = registry.heapSnapshotProfileType.getProfiles();\n    for (let i = 0; i < heapProfiles.length; i++) {\n      const profile = heapProfiles[i];\n      // FIXME: allow to choose snapshot if there are several options.\n      if (profile.maxJSObjectId >= parseInt(snapshotObjectId, 10)) {\n        this.showProfile(profile);\n        const view = (this.viewForProfile(profile) as HeapSnapshotView);\n        view.selectLiveObject(perspectiveName, snapshotObjectId);\n        break;\n      }\n    }\n  }\n}\n"]}