{"version":3,"file":"GraphView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/web_audio/graph_visualizer/GraphView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\n\nimport {EdgeTypes, EdgeView, generateEdgePortIdsByData} from './EdgeView.js';\nimport type {NodeCreationData, NodeParamConnectionData, NodeParamDisconnectionData, NodesConnectionData, NodesDisconnectionData, NodesDisconnectionDataWithDestination, ParamCreationData} from './GraphStyle.js'; // eslint-disable-line no-unused-vars\nimport {NodeLabelGenerator, NodeView} from './NodeView.js';\n\n// A class that tracks all the nodes and edges of an audio graph.\nexport class GraphView extends Common.ObjectWrapper.ObjectWrapper {\n  contextId: string;\n  _nodes: Map<string, NodeView>;\n  _edges: Map<string, EdgeView>;\n  _outboundEdgeMap: Platform.MapUtilities.Multimap<string, string>;\n  _inboundEdgeMap: Platform.MapUtilities.Multimap<string, string>;\n  _nodeLabelGenerator: NodeLabelGenerator;\n  _paramIdToNodeIdMap: Map<string, string>;\n  constructor(contextId: string) {\n    super();\n\n    this.contextId = contextId;\n\n    this._nodes = new Map();\n    this._edges = new Map();\n\n    /**\n     * For each node ID, keep a set of all out-bound edge IDs.\n     */\n    this._outboundEdgeMap = new Platform.MapUtilities.Multimap();\n\n    /**\n     * For each node ID, keep a set of all in-bound edge IDs.\n     */\n    this._inboundEdgeMap = new Platform.MapUtilities.Multimap();\n\n    // Use concise node label to replace the long UUID.\n    // Each graph has its own label generator so that the label starts from 0.\n    this._nodeLabelGenerator = new NodeLabelGenerator();\n\n    /**\n     * For each param ID, save its corresponding node Id.\n      */\n    this._paramIdToNodeIdMap = new Map();\n  }\n\n  /**\n   * Add a node to the graph.\n   */\n  addNode(data: NodeCreationData): void {\n    const label = this._nodeLabelGenerator.generateLabel(data.nodeType);\n    const node = new NodeView(data, label);\n    this._nodes.set(data.nodeId, node);\n    this._notifyShouldRedraw();\n  }\n\n  /**\n   * Remove a node by id and all related edges.\n   */\n  removeNode(nodeId: string): void {\n    this._outboundEdgeMap.get(nodeId).forEach(edgeId => this._removeEdge(edgeId));\n    this._inboundEdgeMap.get(nodeId).forEach(edgeId => this._removeEdge(edgeId));\n    this._nodes.delete(nodeId);\n    this._notifyShouldRedraw();\n  }\n\n  /**\n   * Add a param to the node.\n   */\n  addParam(data: ParamCreationData): void {\n    const node = this.getNodeById(data.nodeId);\n    if (!node) {\n      console.error('AudioNode should be added before AudioParam');\n      return;\n    }\n    node.addParamPort(data.paramId, data.paramType);\n    this._paramIdToNodeIdMap.set(data.paramId, data.nodeId);\n    this._notifyShouldRedraw();\n  }\n\n  /**\n   * Remove a param.\n   */\n  removeParam(paramId: string): void {\n    // Only need to delete the entry from the param id to node id map.\n    this._paramIdToNodeIdMap.delete(paramId);\n    // No need to remove the param port from the node because removeParam will always happen with\n    // removeNode(). Since the whole Node will be gone, there is no need to remove port individually.\n  }\n\n  /**\n   * Add a Node-to-Node connection to the graph.\n   */\n  addNodeToNodeConnection(edgeData: NodesConnectionData): void {\n    const edge = new EdgeView(edgeData, EdgeTypes.NodeToNode);\n    this._addEdge(edge);\n  }\n\n  /**\n   * Remove a Node-to-Node connection from the graph.\n   */\n  removeNodeToNodeConnection(edgeData: NodesDisconnectionData): void {\n    if (edgeData.destinationId) {\n      // Remove a single edge if destinationId is specified.\n      const edgePortIds =\n          generateEdgePortIdsByData((edgeData as NodesDisconnectionDataWithDestination), EdgeTypes.NodeToNode);\n\n      if (!edgePortIds) {\n        throw new Error('Unable to generate edge port IDs');\n      }\n      const {edgeId} = edgePortIds;\n\n      this._removeEdge(edgeId);\n    } else {\n      // Otherwise, remove all outgoing edges from source node.\n      this._outboundEdgeMap.get(edgeData.sourceId).forEach(edgeId => this._removeEdge(edgeId));\n    }\n  }\n\n  /**\n   * Add a Node-to-Param connection to the graph.\n   */\n  addNodeToParamConnection(edgeData: NodeParamConnectionData): void {\n    const edge = new EdgeView(edgeData, EdgeTypes.NodeToParam);\n    this._addEdge(edge);\n  }\n\n  /**\n   * Remove a Node-to-Param connection from the graph.\n   */\n  removeNodeToParamConnection(edgeData: NodeParamDisconnectionData): void {\n    const edgePortIds = generateEdgePortIdsByData(edgeData, EdgeTypes.NodeToParam);\n    if (!edgePortIds) {\n      throw new Error('Unable to generate edge port IDs');\n    }\n\n    const {edgeId} = edgePortIds;\n    this._removeEdge(edgeId);\n  }\n\n  getNodeById(nodeId: string): NodeView|null {\n    return this._nodes.get(nodeId) || null;\n  }\n\n  getNodes(): Map<string, NodeView> {\n    return this._nodes;\n  }\n\n  getEdges(): Map<string, EdgeView> {\n    return this._edges;\n  }\n\n  getNodeIdByParamId(paramId: string): string|null {\n    return this._paramIdToNodeIdMap.get(paramId) || null;\n  }\n\n  /**\n   * Add an edge to the graph.\n   */\n  _addEdge(edge: EdgeView): void {\n    const sourceId = edge.sourceId;\n    // Do nothing if the edge already exists.\n    if (this._outboundEdgeMap.hasValue(sourceId, edge.id)) {\n      return;\n    }\n\n    this._edges.set(edge.id, edge);\n    this._outboundEdgeMap.set(sourceId, edge.id);\n    this._inboundEdgeMap.set(edge.destinationId, edge.id);\n\n    this._notifyShouldRedraw();\n  }\n\n  /**\n   * Given an edge id, remove the edge from the graph.\n   * Also remove the edge from inbound and outbound edge maps.\n   */\n  _removeEdge(edgeId: string): void {\n    const edge = this._edges.get(edgeId);\n    if (!edge) {\n      return;\n    }\n\n    this._outboundEdgeMap.delete(edge.sourceId, edgeId);\n    this._inboundEdgeMap.delete(edge.destinationId, edgeId);\n\n    this._edges.delete(edgeId);\n    this._notifyShouldRedraw();\n  }\n\n  _notifyShouldRedraw(): void {\n    this.dispatchEventToListeners(Events.ShouldRedraw, this);\n  }\n}\n\nexport const enum Events {\n  ShouldRedraw = 'ShouldRedraw',\n}\n"]}