{"version":3,"file":"EdgeView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/web_audio/graph_visualizer/EdgeView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,mBAAmB,EAAE,oBAAoB,EAAE,mBAAmB,EAAC,MAAM,eAAe,CAAC;AAE7F,iFAAiF;AACjF,gCAAgC;AAChC,MAAM,OAAO,QAAQ;IACnB,EAAE,CAAS;IACX,IAAI,CAAY;IAChB,QAAQ,CAAS;IACjB,aAAa,CAAS;IACtB,YAAY,CAAS;IACrB,iBAAiB,CAAS;IAE1B,YAAY,IAAiD,EAAE,IAAe;QAC5E,MAAM,YAAY,GAAG,yBAAyB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,MAAM,EAAC,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAC,GAAG,YAAY,CAAC;QAE/D,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;CACF;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,IAAiD,EAAE,IAAe,EAIrG,EAAE;IACP,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;QACzC,OAAO,CAAC,KAAK,CAAC,2BAA2B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;KACb;IAED,MAAM,YAAY,GAAG,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACjF,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAE3D,OAAO;QACL,MAAM,EAAE,GAAG,YAAY,KAAK,iBAAiB,EAAE;QAC/C,YAAY,EAAE,YAAY;QAC1B,iBAAiB,EAAE,iBAAiB;KACrC,CAAC;IAEF;;OAEG;IACH,SAAS,oBAAoB,CAAC,IAAiD,EAAE,IAAe;QAC9F,IAAI,IAAI,KAAK,SAAS,CAAC,UAAU,EAAE;YACjC,MAAM,QAAQ,GAAI,IAA4B,CAAC;YAC/C,OAAO,mBAAmB,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,qBAAqB,CAAC,CAAC;SAChF;QACD,IAAI,IAAI,KAAK,SAAS,CAAC,WAAW,EAAE;YAClC,MAAM,QAAQ,GAAI,IAAgC,CAAC;YACnD,OAAO,mBAAmB,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC;SAC7E;QACD,OAAO,CAAC,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;QAC5C,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,sCAAyB,CAAA;IACzB,wCAA2B,CAAA;AAC7B,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type {NodeParamConnectionData, NodesConnectionData} from './GraphStyle.js'; // eslint-disable-line no-unused-vars\nimport {generateInputPortId, generateOutputPortId, generateParamPortId} from './NodeView.js';\n\n// A class that represents an edge of a graph, including node-to-node connection,\n// and node-to-param connection.\nexport class EdgeView {\n  id: string;\n  type: EdgeTypes;\n  sourceId: string;\n  destinationId: string;\n  sourcePortId: string;\n  destinationPortId: string;\n\n  constructor(data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes) {\n    const edgePortsIds = generateEdgePortIdsByData(data, type);\n    if (!edgePortsIds) {\n      throw new Error('Unable to generate edge port IDs');\n    }\n\n    const {edgeId, sourcePortId, destinationPortId} = edgePortsIds;\n\n    this.id = edgeId;\n    this.type = type;\n    this.sourceId = data.sourceId;\n    this.destinationId = data.destinationId;\n    this.sourcePortId = sourcePortId;\n    this.destinationPortId = destinationPortId;\n  }\n}\n\n/**\n * Generates the edge id and source/destination portId using edge data and type.\n */\nexport const generateEdgePortIdsByData = (data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes): {\n  edgeId: string,\n  sourcePortId: string,\n  destinationPortId: string,\n}|null => {\n  if (!data.sourceId || !data.destinationId) {\n    console.error(`Undefined node message: ${JSON.stringify(data)}`);\n    return null;\n  }\n\n  const sourcePortId = generateOutputPortId(data.sourceId, data.sourceOutputIndex);\n  const destinationPortId = getDestinationPortId(data, type);\n\n  return {\n    edgeId: `${sourcePortId}->${destinationPortId}`,\n    sourcePortId: sourcePortId,\n    destinationPortId: destinationPortId,\n  };\n\n  /**\n   * Get the destination portId based on connection type.\n   */\n  function getDestinationPortId(data: NodesConnectionData|NodeParamConnectionData, type: EdgeTypes): string {\n    if (type === EdgeTypes.NodeToNode) {\n      const portData = (data as NodesConnectionData);\n      return generateInputPortId(data.destinationId, portData.destinationInputIndex);\n    }\n    if (type === EdgeTypes.NodeToParam) {\n      const portData = (data as NodeParamConnectionData);\n      return generateParamPortId(data.destinationId, portData.destinationParamId);\n    }\n    console.error(`Unknown edge type: ${type}`);\n    return '';\n  }\n};\n\n/**\n * Supported edge types.\n */\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum EdgeTypes {\n  NodeToNode = 'NodeToNode',\n  NodeToParam = 'NodeToParam',\n}\n"]}