{"version":3,"file":"GraphManager.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/web_audio/graph_visualizer/GraphManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC,CAAE,qCAAqC;AAEhG,OAAO,EAAuB,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAE/D,6DAA6D;AAC7D,6EAA6E;AAC7E,MAAM,OAAO,YAAa,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAa;IAClE,oBAAoB,CAAyB;IAC7C;QACE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;IACxC,CAAC;IAED,aAAa,CAAC,SAAiB;QAC7B,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;QACvC,+CAA+C;QAC/C,KAAK,CAAC,gBAAgB,oCAA0B,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAChF,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,cAAc,CAAC,SAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC7C,OAAO;SACR;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;SACR;QAED,KAAK,CAAC,mBAAmB,oCAA0B,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QACnF,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,SAAiB;QACxB,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IAC1D,CAAC;IAED,mBAAmB,CAAC,KAAqD;QACvE,IAAI,CAAC,wBAAwB,oCAA0B,KAAK,CAAC,IAAI,CAAC,CAAC;IACrE,CAAC;CACF","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../../core/common/common.js';  // eslint-disable-line no-unused-vars\n\nimport {Events as ViewEvents, GraphView} from './GraphView.js';\n\n// A class that maps each context to its corresponding graph.\n// It controls which graph to render when the context is switched or updated.\nexport class GraphManager extends Common.ObjectWrapper.ObjectWrapper {\n  _graphMapByContextId: Map<string, GraphView>;\n  constructor() {\n    super();\n\n    this._graphMapByContextId = new Map();\n  }\n\n  createContext(contextId: string): void {\n    const graph = new GraphView(contextId);\n    // When a graph has any update, request redraw.\n    graph.addEventListener(ViewEvents.ShouldRedraw, this._notifyShouldRedraw, this);\n    this._graphMapByContextId.set(contextId, graph);\n  }\n\n  destroyContext(contextId: string): void {\n    if (!this._graphMapByContextId.has(contextId)) {\n      return;\n    }\n\n    const graph = this._graphMapByContextId.get(contextId);\n    if (!graph) {\n      return;\n    }\n\n    graph.removeEventListener(ViewEvents.ShouldRedraw, this._notifyShouldRedraw, this);\n    this._graphMapByContextId.delete(contextId);\n  }\n\n  hasContext(contextId: string): boolean {\n    return this._graphMapByContextId.has(contextId);\n  }\n\n  clearGraphs(): void {\n    this._graphMapByContextId.clear();\n  }\n\n  /**\n   * Get graph by contextId.\n   * If the user starts listening for WebAudio events after the page has been running a context for awhile,\n   * the graph might be undefined.\n   */\n  getGraph(contextId: string): GraphView|null {\n    return this._graphMapByContextId.get(contextId) || null;\n  }\n\n  _notifyShouldRedraw(event: Common.EventTarget.EventTargetEvent<GraphView>): void {\n    this.dispatchEventToListeners(ViewEvents.ShouldRedraw, event.data);\n  }\n}\n"]}