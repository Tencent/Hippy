{"version":3,"file":"CSPViolationBreakpointsSidebarPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/browser_debugger/CSPViolationBreakpointsSidebarPane.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAG7C,OAAO,EAAC,iCAAiC,EAAC,MAAM,wCAAwC,CAAC;AAEzF,IAAI,0CAA8E,CAAC;AAEnF,MAAM,OAAO,kCAAmC,SAAQ,iCAAiC;IACvF;QACE,MAAM,WAAW,GACb,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjF,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxE,UAAU,CAAC,IAAI,EAAE,CAAC;QAClB,KAAK,CAAC,UAAU,EAAE,WAAW,EAAE,iCAAiC,oCAAmD,CAAC;IACtH,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,0CAA0C,EAAE;YAC/C,0CAA0C,GAAG,IAAI,kCAAkC,EAAE,CAAC;SACvF;QACD,OAAO,0CAA0C,CAAC;IACpD,CAAC;IAED,+BAA+B,CAAC,OAAgD;QAE9E,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnH,MAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjG,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,cAAc,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IACxC,CAAC;IAED,iBAAiB,CAAC,UAAsD,EAAE,OAAgB;QACxF,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC/B,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,6BAA6B,EAAE,CAAC;IACrF,CAAC;CACF","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nlet cspViolationBreakpointsSidebarPaneInstance: CSPViolationBreakpointsSidebarPane;\n\nexport class CSPViolationBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  private constructor() {\n    const breakpoints: SDK.DOMDebuggerModel.CSPViolationBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const categories = breakpoints.map(breakpoint => breakpoint.category());\n    categories.sort();\n    super(categories, breakpoints, 'sources.cspViolationBreakpoints', Protocol.Debugger.PausedEventReason.CSPViolation);\n  }\n\n  static instance(): CSPViolationBreakpointsSidebarPane {\n    if (!cspViolationBreakpointsSidebarPaneInstance) {\n      cspViolationBreakpointsSidebarPaneInstance = new CSPViolationBreakpointsSidebarPane();\n    }\n    return cspViolationBreakpointsSidebarPaneInstance;\n  }\n\n  _getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.DOMDebuggerModel.CategorizedBreakpoint|null {\n    const breakpointType = details.auxData && details.auxData['violationType'] ? details.auxData['violationType'] : '';\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const breakpoint = breakpoints.find(x => x.type() === breakpointType);\n    return breakpoint ? breakpoint : null;\n  }\n\n  _toggleBreakpoint(breakpoint: SDK.DOMDebuggerModel.CategorizedBreakpoint, enabled: boolean): void {\n    breakpoint.setEnabled(enabled);\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().updateCSPViolationBreakpoints();\n  }\n}\n"]}