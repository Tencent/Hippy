{"version":3,"file":"IssueRevealer.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/IssueRevealer.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,aAAa,MAAM,+CAA+C,CAAC;AAC/E,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAE3C,IAAI,qBAAoC,CAAC;AAEzC,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,QAAQ,CAAC,OAAiC,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,qBAAqB,IAAI,QAAQ,EAAE;YACtC,qBAAqB,GAAG,IAAI,aAAa,EAAE,CAAC;SAC7C;QACD,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,IAAI,CAAC,CAAC,KAAK,YAAY,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACjD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QACD,MAAM,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACpE,MAAM,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACvE,IAAI,IAAI,EAAE;YACR,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACvC,IAAI,UAAU,YAAY,UAAU,EAAE;gBACpC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aACvC;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;aACzE;SACF;IACH,CAAC;CACF","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {IssuesPane} from './IssuesPane.js';\n\nlet issueRevealerInstance: IssueRevealer;\n\nexport class IssueRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IssueRevealer {\n    const {forceNew} = opts;\n    if (!issueRevealerInstance || forceNew) {\n      issueRevealerInstance = new IssueRevealer();\n    }\n    return issueRevealerInstance;\n  }\n\n  async reveal(issue: Object): Promise<void> {\n    if (!(issue instanceof IssuesManager.Issue.Issue)) {\n      throw new Error('Internal error: not a issue');\n    }\n    await UI.ViewManager.ViewManager.instance().showView('issues-pane');\n    const view = UI.ViewManager.ViewManager.instance().view('issues-pane');\n    if (view) {\n      const issuesPane = await view.widget();\n      if (issuesPane instanceof IssuesPane) {\n        issuesPane.revealByCode(issue.code());\n      } else {\n        throw new Error('Expected issues pane to be an instance of IssuesPane');\n      }\n    }\n  }\n}\n"]}