{"version":3,"file":"ComboBoxOfCheckBoxes.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/ComboBoxOfCheckBoxes.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,MAAM,OAAO,oBAAqB,SAAQ,EAAE,CAAC,OAAO,CAAC,aAAa;IACxD,OAAO,GAAG,IAAI,KAAK,EAAc,CAAC;IAClC,OAAO,GAAG,IAAI,KAAK,EAAc,CAAC;IAClC,eAAe,GAAG,GAAS,EAAE,GAAE,CAAC,CAAC;IACzC,YAAY,KAAa;QACvB,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnG,EAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,SAAS,CAAC,MAAc,EAAE,KAAa,EAAE,cAAuB;QAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,EAAC,CAAC,CAAC;IAC3G,CAAC;IAED,gBAAgB,CAAC,KAAa,EAAE,OAAgB;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,SAAS,CAAC,UAAkB,EAAE,QAAsB;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;IAC7D,CAAC;IAED,kBAAkB,CAAC,eAA6B;QAC9C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,oBAAoB,CAAC,KAA0C;QACrE,MAAM,UAAU,GAAG,qBAAqB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAC9C,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAChD,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YACzB,2BAA2B,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC;QAEjE,KAAK,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5C,WAAW,CAAC,aAAa,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;SACzE;QACD,KAAK,MAAM,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAC9D,WAAW,CAAC,cAAc,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC1D,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC;YACzC,CAAC,EAAE,OAAO,CAAC,CAAC;SACb;QACD,WAAW,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;CACF","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nexport class ComboBoxOfCheckBoxes extends UI.Toolbar.ToolbarButton {\n  private options = new Array<MenuOption>();\n  private headers = new Array<MenuHeader>();\n  private onOptionClicked = (): void => {};\n  constructor(title: string) {\n    super(title);\n    this.turnIntoSelect();\n    this.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.showLevelContextMenu.bind(this));\n    UI.ARIAUtils.markAsMenuButton(this.element);\n  }\n\n  addOption(option: string, value: string, defaultEnabled: boolean): void {\n    this.options.push({'title': option, 'value': value, default: defaultEnabled, 'enabled': defaultEnabled});\n  }\n\n  setOptionEnabled(index: number, enabled: boolean): void {\n    const option = this.options[index];\n    if (!option) {\n      return;\n    }\n    option.enabled = enabled;\n    this.onOptionClicked();\n  }\n\n  addHeader(headerName: string, callback: (() => void)): void {\n    this.headers.push({title: headerName, callback: callback});\n  }\n\n  setOnOptionClicked(onOptionClicked: (() => void)): void {\n    this.onOptionClicked = onOptionClicked;\n  }\n\n  getOptions(): Array<MenuOption> {\n    return this.options;\n  }\n\n  private showLevelContextMenu(event: Common.EventTarget.EventTargetEvent): void {\n    const mouseEvent = /** @type {!Event} */ (event.data);\n    const contextMenu = new UI.ContextMenu.ContextMenu(\n        mouseEvent, true, this.element.totalOffsetLeft(),\n        this.element.totalOffsetTop() +\n            /** @type {!HTMLElement} */ (this.element).offsetHeight);\n\n    for (const {title, callback} of this.headers) {\n      contextMenu.headerSection().appendCheckboxItem(title, () => callback());\n    }\n    for (const [index, {title, enabled}] of this.options.entries()) {\n      contextMenu.defaultSection().appendCheckboxItem(title, () => {\n        this.setOptionEnabled(index, !enabled);\n      }, enabled);\n    }\n    contextMenu.show();\n  }\n}\n\ninterface MenuOption {\n  title: string;\n  value: string;\n  default: boolean;\n  enabled: boolean;\n}\n\ninterface MenuHeader {\n  title: string;\n  callback: () => void;\n}\n"]}