{"version":3,"file":"ScreencastApp.js","sourceRoot":"","sources":["../../../../../../front_end/panels/screencast/ScreencastApp.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ScreencastView} from './ScreencastView.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over largeicon phone button in Screencast App of the Remote Devices tab when toggling screencast\n  */\n  toggleScreencast: 'Toggle screencast',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/screencast/ScreencastApp.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet appInstance: ScreencastApp;\n\nexport class ScreencastApp implements Common.App.App,\n                                      SDK.TargetManager.SDKModelObserver<SDK.ScreenCaptureModel.ScreenCaptureModel> {\n  _enabledSetting: Common.Settings.Setting<boolean>;\n  _toggleButton: UI.Toolbar.ToolbarToggle;\n  _rootSplitWidget?: UI.SplitWidget.SplitWidget;\n  _screenCaptureModel?: SDK.ScreenCaptureModel.ScreenCaptureModel;\n  _screencastView?: ScreencastView;\n  constructor() {\n    this._enabledSetting = Common.Settings.Settings.instance().createSetting('screencastEnabled', true);\n    this._toggleButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleScreencast), 'largeicon-phone');\n    this._toggleButton.setToggled(this._enabledSetting.get());\n    this._toggleButton.setEnabled(false);\n    this._toggleButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this._toggleButtonClicked, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.ScreenCaptureModel.ScreenCaptureModel, this);\n  }\n\n  static _instance(): ScreencastApp {\n    if (!appInstance) {\n      appInstance = new ScreencastApp();\n    }\n    return appInstance;\n  }\n\n  presentUI(document: Document): void {\n    const rootView = new UI.RootView.RootView();\n\n    this._rootSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'InspectorView.screencastSplitViewState', 300, 300);\n    this._rootSplitWidget.setVertical(true);\n    this._rootSplitWidget.setSecondIsSidebar(true);\n    this._rootSplitWidget.show(rootView.element);\n    this._rootSplitWidget.hideMain();\n\n    this._rootSplitWidget.setSidebarWidget(UI.InspectorView.InspectorView.instance());\n    UI.InspectorView.InspectorView.instance().setOwnerSplit(this._rootSplitWidget);\n    rootView.attachToDocument(document);\n    rootView.focus();\n  }\n\n  modelAdded(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this._screenCaptureModel) {\n      return;\n    }\n    this._screenCaptureModel = screenCaptureModel;\n    this._toggleButton.setEnabled(true);\n    this._screencastView = new ScreencastView(screenCaptureModel);\n    if (this._rootSplitWidget) {\n      this._rootSplitWidget.setMainWidget(this._screencastView);\n    }\n    this._screencastView.initialize();\n    this._onScreencastEnabledChanged();\n  }\n\n  modelRemoved(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this._screenCaptureModel !== screenCaptureModel) {\n      return;\n    }\n    delete this._screenCaptureModel;\n    this._toggleButton.setEnabled(false);\n    if (this._screencastView) {\n      this._screencastView.detach();\n      delete this._screencastView;\n    }\n    this._onScreencastEnabledChanged();\n  }\n\n  _toggleButtonClicked(): void {\n    const enabled = !this._toggleButton.toggled();\n    this._enabledSetting.set(enabled);\n    this._onScreencastEnabledChanged();\n  }\n\n  _onScreencastEnabledChanged(): void {\n    if (!this._rootSplitWidget) {\n      return;\n    }\n    const enabled = Boolean(this._enabledSetting.get() && this._screencastView);\n    this._toggleButton.setToggled(enabled);\n    if (enabled) {\n      this._rootSplitWidget.showBoth();\n    } else {\n      this._rootSplitWidget.hideMain();\n    }\n  }\n}\n\nlet toolbarButtonProviderInstance: ToolbarButtonProvider;\n\nexport class ToolbarButtonProvider implements UI.Toolbar.Provider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ToolbarButtonProvider {\n    const {forceNew} = opts;\n    if (!toolbarButtonProviderInstance || forceNew) {\n      toolbarButtonProviderInstance = new ToolbarButtonProvider();\n    }\n\n    return toolbarButtonProviderInstance;\n  }\n\n  item(): UI.Toolbar.ToolbarItem|null {\n    return ScreencastApp._instance()._toggleButton;\n  }\n}\n\nlet screencastAppProviderInstance: ScreencastAppProvider;\n\nexport class ScreencastAppProvider implements Common.AppProvider.AppProvider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ScreencastAppProvider {\n    const {forceNew} = opts;\n    if (!screencastAppProviderInstance || forceNew) {\n      screencastAppProviderInstance = new ScreencastAppProvider();\n    }\n\n    return screencastAppProviderInstance;\n  }\n\n  createApp(): Common.App.App {\n    return ScreencastApp._instance();\n  }\n}\n"]}