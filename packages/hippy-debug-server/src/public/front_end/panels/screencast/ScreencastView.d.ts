import * as Common from '../../core/common/common.js';
import * as SDK from '../../core/sdk/sdk.js';
import * as Protocol from '../../generated/protocol.js';
import * as UI from '../../ui/legacy/legacy.js';
import { InputModel } from './InputModel.js';
interface Point {
    x: number;
    y: number;
}
export declare class ScreencastView extends UI.Widget.VBox implements SDK.OverlayModel.Highlighter {
    _screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel;
    _domModel: SDK.DOMModel.DOMModel | null;
    _overlayModel: SDK.OverlayModel.OverlayModel | null;
    _resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel | null;
    _networkManager: SDK.NetworkManager.NetworkManager | null;
    _inputModel: InputModel | null;
    _shortcuts: {
        [x: number]: (arg0?: Event | undefined) => boolean;
    };
    _scrollOffsetX: number;
    _scrollOffsetY: number;
    _screenZoom: number;
    _screenOffsetTop: number;
    _pageScaleFactor: number;
    _imageElement: HTMLImageElement;
    _viewportElement: HTMLElement;
    _glassPaneElement: HTMLElement;
    _canvasElement: HTMLCanvasElement;
    _titleElement: HTMLElement;
    _context: CanvasRenderingContext2D;
    _imageZoom: number;
    _tagNameElement: HTMLElement;
    _attributeElement: HTMLElement;
    _nodeWidthElement: HTMLElement;
    _nodeHeightElement: HTMLElement;
    _model: Protocol.DOM.BoxModel | null;
    _highlightConfig: Protocol.Overlay.HighlightConfig | null;
    _navigationUrl: HTMLInputElement;
    _navigationBack: HTMLButtonElement;
    _navigationForward: HTMLButtonElement;
    _canvasContainerElement?: HTMLElement;
    _isCasting?: boolean;
    _checkerboardPattern?: CanvasPattern | null;
    _targetInactive?: boolean;
    _deferredCasting?: number;
    _highlightNode?: SDK.DOMModel.DOMNode | null;
    _config?: Protocol.Overlay.HighlightConfig | null;
    _node?: SDK.DOMModel.DOMNode | null;
    _inspectModeConfig?: Protocol.Overlay.HighlightConfig | null;
    _navigationBar?: HTMLElement;
    _navigationReload?: HTMLElement;
    _navigationProgressBar?: ProgressTracker;
    _historyIndex?: number;
    _historyEntries?: Protocol.Page.NavigationEntry[];
    constructor(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel);
    initialize(): void;
    wasShown(): void;
    willHide(): void;
    _startCasting(): void;
    _stopCasting(): void;
    _screencastFrame(base64Data: string, metadata: Protocol.Page.ScreencastFrameMetadata): void;
    _isGlassPaneActive(): boolean;
    _screencastVisibilityChanged(visible: boolean): void;
    _onSuspendStateChange(_event: Common.EventTarget.EventTargetEvent): void;
    _updateGlasspane(): void;
    _handleMouseEvent(event: Event): Promise<void>;
    _handleKeyEvent(event: Event): void;
    _handleContextMenuEvent(event: Event): void;
    _handleBlurEvent(_event: Event): void;
    _convertIntoScreenSpace(event: MouseEvent): Point;
    onResize(): void;
    highlightInOverlay(data: SDK.OverlayModel.HighlightData, config: Protocol.Overlay.HighlightConfig | null): void;
    _updateHighlightInOverlayAndRepaint(data: SDK.OverlayModel.HighlightData, config: Protocol.Overlay.HighlightConfig | null): Promise<void>;
    _scaleModel(model: Protocol.DOM.BoxModel): Protocol.DOM.BoxModel;
    _repaint(): void;
    _cssColor(color: Protocol.DOM.RGBA): string;
    _quadToPath(quad: Protocol.DOM.Quad): CanvasRenderingContext2D;
    _drawOutlinedQuad(quad: Protocol.DOM.Quad, fillColor: Protocol.DOM.RGBA): void;
    _drawOutlinedQuadWithClip(quad: Protocol.DOM.Quad, clipQuad: Protocol.DOM.Quad, fillColor: Protocol.DOM.RGBA): void;
    _drawElementTitle(): void;
    _viewportDimensions(): {
        width: number;
        height: number;
    };
    setInspectMode(mode: Protocol.Overlay.InspectMode, config: Protocol.Overlay.HighlightConfig): Promise<void>;
    highlightFrame(_frameId: string): void;
    _createCheckerboardPattern(context: CanvasRenderingContext2D): CanvasPattern | null;
    _createNavigationBar(): void;
    _navigateToHistoryEntry(offset: number): void;
    _navigateReload(): void;
    _navigationUrlKeyUp(event: KeyboardEvent): void;
    _requestNavigationHistoryEvent(_event: Common.EventTarget.EventTargetEvent): void;
    _requestNavigationHistory(): Promise<void>;
    _focusNavigationBar(): boolean;
}
export declare const BORDERS_SIZE = 44;
export declare const NAVBAR_HEIGHT = 29;
export declare const HTTP_REGEX: RegExp;
export declare const SCHEME_REGEX: RegExp;
export declare class ProgressTracker {
    _element: HTMLElement;
    _requestIds: Map<string, SDK.NetworkRequest.NetworkRequest> | null;
    _startedRequests: number;
    _finishedRequests: number;
    _maxDisplayedProgress: number;
    constructor(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel | null, networkManager: SDK.NetworkManager.NetworkManager | null, element: HTMLElement);
    _onMainFrameNavigated(): void;
    _onLoad(): void;
    _navigationProgressVisible(): boolean;
    _onRequestStarted(event: Common.EventTarget.EventTargetEvent): void;
    _onRequestFinished(event: Common.EventTarget.EventTargetEvent): void;
    _updateProgress(progress: number): void;
    _displayProgress(progress: number): void;
}
export {};
