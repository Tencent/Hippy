{"version":3,"file":"ConsolePanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsolePanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ConsoleView} from './ConsoleView.js';\n\nlet consolePanelInstance: ConsolePanel;\n\nexport class ConsolePanel extends UI.Panel.Panel {\n  _view: ConsoleView;\n  constructor() {\n    super('console');\n    this._view = ConsoleView.instance();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ConsolePanel {\n    const {forceNew} = opts;\n    if (!consolePanelInstance || forceNew) {\n      consolePanelInstance = new ConsolePanel();\n    }\n\n    return consolePanelInstance;\n  }\n\n  static _updateContextFlavor(): void {\n    const consoleView = ConsolePanel.instance()._view;\n    UI.Context.Context.instance().setFlavor(ConsoleView, consoleView.isShowing() ? consoleView : null);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const wrapper = wrapperViewInstance;\n    if (wrapper && wrapper.isShowing()) {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n    }\n    this._view.show(this.element);\n    ConsolePanel._updateContextFlavor();\n  }\n\n  willHide(): void {\n    super.willHide();\n    // The minimized drawer has 0 height, and showing Console inside may set\n    // Console's scrollTop to 0. Unminimize before calling show to avoid this.\n    UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n    if (wrapperViewInstance) {\n      wrapperViewInstance._showViewInWrapper();\n    }\n    ConsolePanel._updateContextFlavor();\n  }\n\n  searchableView(): UI.SearchableView.SearchableView|null {\n    return ConsoleView.instance().searchableView();\n  }\n}\n\nlet wrapperViewInstance: WrapperView|null = null;\n\nexport class WrapperView extends UI.Widget.VBox {\n  _view: ConsoleView;\n\n  private constructor() {\n    super();\n    this._view = ConsoleView.instance();\n  }\n\n  static instance(): WrapperView {\n    if (!wrapperViewInstance) {\n      wrapperViewInstance = new WrapperView();\n    }\n    return wrapperViewInstance;\n  }\n\n  wasShown(): void {\n    if (!ConsolePanel.instance().isShowing()) {\n      this._showViewInWrapper();\n    } else {\n      UI.InspectorView.InspectorView.instance().setDrawerMinimized(true);\n    }\n    ConsolePanel._updateContextFlavor();\n  }\n\n  willHide(): void {\n    UI.InspectorView.InspectorView.instance().setDrawerMinimized(false);\n    ConsolePanel._updateContextFlavor();\n  }\n\n  _showViewInWrapper(): void {\n    this._view.show(this.element);\n  }\n}\n\nlet consoleRevealerInstance: ConsoleRevealer;\n\nexport class ConsoleRevealer implements Common.Revealer.Revealer {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ConsoleRevealer {\n    const {forceNew} = opts;\n    if (!consoleRevealerInstance || forceNew) {\n      consoleRevealerInstance = new ConsoleRevealer();\n    }\n\n    return consoleRevealerInstance;\n  }\n\n  async reveal(_object: Object): Promise<void> {\n    const consoleView = ConsoleView.instance();\n    if (consoleView.isShowing()) {\n      consoleView.focus();\n      return;\n    }\n    await UI.ViewManager.ViewManager.instance().showView('console-view');\n  }\n}\n"]}