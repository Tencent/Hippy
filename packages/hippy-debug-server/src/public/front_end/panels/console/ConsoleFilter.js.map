{"version":3,"file":"ConsoleFilter.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsoleFilter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport type {ConsoleViewMessage} from './ConsoleViewMessage.js';\n\nexport type LevelsMask = {\n  [x: string]: boolean,\n};\n\nexport class ConsoleFilter {\n  name: string;\n  parsedFilters: TextUtils.TextUtils.ParsedFilter[];\n  executionContext: SDK.RuntimeModel.ExecutionContext|null;\n  levelsMask: LevelsMask;\n\n  constructor(\n      name: string, parsedFilters: TextUtils.TextUtils.ParsedFilter[],\n      executionContext: SDK.RuntimeModel.ExecutionContext|null, levelsMask?: LevelsMask) {\n    this.name = name;\n    this.parsedFilters = parsedFilters;\n    this.executionContext = executionContext;\n    this.levelsMask = levelsMask || ConsoleFilter.defaultLevelsFilterValue();\n  }\n\n  static allLevelsFilterValue(): LevelsMask {\n    const result: LevelsMask = {};\n    const logLevels: Protocol.EnumerableEnum<typeof Protocol.Log.LogEntryLevel> = {\n      Verbose: Protocol.Log.LogEntryLevel.Verbose,\n      Info: Protocol.Log.LogEntryLevel.Info,\n      Warning: Protocol.Log.LogEntryLevel.Warning,\n      Error: Protocol.Log.LogEntryLevel.Error,\n    };\n    for (const name of Object.values(logLevels)) {\n      result[name] = true;\n    }\n    return result;\n  }\n\n  static defaultLevelsFilterValue(): LevelsMask {\n    const result = ConsoleFilter.allLevelsFilterValue();\n    result[Protocol.Log.LogEntryLevel.Verbose] = false;\n    return result;\n  }\n\n  static singleLevelMask(level: string): LevelsMask {\n    const result: LevelsMask = {};\n    result[level] = true;\n    return result;\n  }\n\n  clone(): ConsoleFilter {\n    const parsedFilters = this.parsedFilters.map(TextUtils.TextUtils.FilterParser.cloneFilter);\n    const levelsMask = Object.assign({}, this.levelsMask);\n    return new ConsoleFilter(this.name, parsedFilters, this.executionContext, levelsMask);\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    const message = viewMessage.consoleMessage();\n    if (this.executionContext &&\n        (this.executionContext.runtimeModel !== message.runtimeModel() ||\n         this.executionContext.id !== message.executionContextId)) {\n      return false;\n    }\n\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result || message.isGroupMessage()) {\n      return true;\n    }\n    if (message.level && !this.levelsMask[message.level as string]) {\n      return false;\n    }\n\n    for (const filter of this.parsedFilters) {\n      if (!filter.key) {\n        if (filter.regex && viewMessage.matchesFilterRegex(filter.regex) === filter.negative) {\n          return false;\n        }\n        if (filter.text && viewMessage.matchesFilterText(filter.text) === filter.negative) {\n          return false;\n        }\n      } else {\n        switch (filter.key) {\n          case FilterType.Context: {\n            if (!passesFilter(filter, message.context, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Source: {\n            const sourceNameForMessage = message.source ?\n                SDK.ConsoleModel.MessageSourceDisplayName.get((message.source as SDK.ConsoleModel.MessageSource)) :\n                message.source;\n            if (!passesFilter(filter, sourceNameForMessage, true /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Url: {\n            if (!passesFilter(filter, message.url, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n\n    function passesFilter(\n        filter: TextUtils.TextUtils.ParsedFilter, value: string|null|undefined, exactMatch: boolean): boolean {\n      if (!filter.text) {\n        return Boolean(value) === filter.negative;\n      }\n      if (!value) {\n        return !filter.text === !filter.negative;\n      }\n      const filterText = (filter.text as string).toLowerCase();\n      const lowerCaseValue = value.toLowerCase();\n      if (exactMatch && (lowerCaseValue === filterText) === filter.negative) {\n        return false;\n      }\n      if (!exactMatch && lowerCaseValue.includes(filterText) === filter.negative) {\n        return false;\n      }\n      return true;\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum FilterType {\n  Context = 'context',\n  Source = 'source',\n  Url = 'url',\n}\n"]}