{"version":3,"file":"AccessibilityTreeUtils.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AccessibilityTreeUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAG/D,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAK5D,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,OAAO,EAAE,SAAS;CACnB,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,sDAAsD,EAAE,SAAS,CAAC,CAAC;AAC5G,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,UAAU,mBAAmB,CAAC,IAA8C;IAChF,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;QACvB,OAAO;YACL,YAAY,EAAE,IAAI;YAClB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;SACd,CAAC;KACH;IAED,OAAO;QACL,YAAY,EAAE,IAAI;QAClB,QAAQ,EAAE,KAAK,IAA0B,EAAE;YACzC,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;gBACjD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAClF;YACD,yFAAyF;YACzF,yFAAyF;YACzF,yFAAyF;YACzF,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAE7D,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;gBACjD,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;aACvF;YAED,MAAM,gBAAgB,GAAiB,EAAE,CAAC;YAE1C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACnC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC;QACD,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;KACd,CAAC;AACJ,CAAC;AAED,uFAAuF;AACvF,SAAS,oBAAoB,CAAC,IAAY;IACxC,MAAM,oBAAoB,GAAG,KAAK,CAAC;IAEnC,IAAI,IAAI,CAAC,MAAM,GAAG,oBAAoB,EAAE;QACtC,OAAO,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;KACxE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,mBAAmB;IAC1B,MAAM,WAAW,GAA6B,EAAE,CAAC;IACjD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,wCAAwC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC7G,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,qBAAqB,CAAC,IAA8C;IAC3E,MAAM,WAAW,GAA6B,EAAE,CAAC;IAEjD,wCAAwC;IACxC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACzB,IAAI,CAAC,IAAI,EAAE;QACT,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,EAAE,CAAC,CAAC;QACjC,OAAO,WAAW,CAAC;KACpB;IAED,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAA,2BAA2B,oBAAoB,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,SAAS,CAAC;IAC3G,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,GAAG,WAAW,EAAE,CAAC,CAAC;IAE/C,sCAAsC;IACtC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACzB,IAAI,IAAI,EAAE;QACR,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,qCAAqC,CAAC,CAAC;QACpE,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA,qCAAqC,IAAI,CAAC,KAAK,UAAU,CAAC,CAAC;KACzF;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAgB;IACxD,IAAI,WAAqC,CAAC;IAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;IAEjC,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;QACpB,WAAW,GAAG,mBAAmB,EAAE,CAAC;KACrC;SAAM;QACL,WAAW,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;KAC7C;IAED,OAAO,OAAO,CAAC,IAAI,CAAA;;;;;;;;;;;QAWb,WAAW;OACZ,CAAC;AACR,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as TreeOutline from '../../../ui/components/tree_outline/tree_outline.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nexport type AXTreeNode = TreeOutline.TreeOutlineUtils.TreeNode<SDK.AccessibilityModel.AccessibilityNode>;\n\n\nconst UIStrings = {\n  /**\n  *@description Ignored node element text content in Accessibility Tree View of the Elements panel\n  */\n  ignored: 'Ignored',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AccessibilityTreeUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function sdkNodeToAXTreeNode(node: SDK.AccessibilityModel.AccessibilityNode): AXTreeNode {\n  if (!node.numChildren()) {\n    return {\n      treeNodeData: node,\n      id: node.id(),\n    };\n  }\n\n  return {\n    treeNodeData: node,\n    children: async(): Promise<AXTreeNode[]> => {\n      if (node.numChildren() === node.children().length) {\n        return Promise.resolve(node.children().map(child => sdkNodeToAXTreeNode(child)));\n      }\n      // numChildren returns the number of children that this node has, whereas node.children()\n      // returns only children that have been loaded. If these two don't match, that means that\n      // there are backend children that need to be loaded into the model, so request them now.\n      await node.accessibilityModel().requestAXChildren(node.id());\n\n      if (node.numChildren() !== node.children().length) {\n        throw new Error('Once loaded, number of children and length of children must match.');\n      }\n\n      const treeNodeChildren: AXTreeNode[] = [];\n\n      for (const child of node.children()) {\n        treeNodeChildren.push(sdkNodeToAXTreeNode(child));\n      }\n\n      return Promise.resolve(treeNodeChildren);\n    },\n    id: node.id(),\n  };\n}\n\n// This function is a variant of setTextContentTruncatedIfNeeded found in DOMExtension.\nfunction truncateTextIfNeeded(text: string): string {\n  const maxTextContentLength = 10000;\n\n  if (text.length > maxTextContentLength) {\n    return Platform.StringUtilities.trimMiddle(text, maxTextContentLength);\n  }\n  return text;\n}\n\nfunction ignoredNodeTemplate(): LitHtml.TemplateResult[] {\n  const nodeContent: LitHtml.TemplateResult[] = [];\n  nodeContent.push(LitHtml.html`<span class='monospace ignored-node'>${i18nString(UIStrings.ignored)}</span>`);\n  return nodeContent;\n}\n\nfunction unignoredNodeTemplate(node: SDK.AccessibilityModel.AccessibilityNode): LitHtml.TemplateResult[] {\n  const nodeContent: LitHtml.TemplateResult[] = [];\n\n  // All unignored nodes must have a role.\n  const role = node.role();\n  if (!role) {\n    nodeContent.push(LitHtml.html``);\n    return nodeContent;\n  }\n\n  const roleElement = LitHtml.html`<span class='monospace'>${truncateTextIfNeeded(role.value || '')}</span>`;\n  nodeContent.push(LitHtml.html`${roleElement}`);\n\n  // Not all nodes have a name, however.\n  const name = node.name();\n  if (name) {\n    nodeContent.push(LitHtml.html`<span class='separator'>\\xA0</span>`);\n    nodeContent.push(LitHtml.html`<span class='ax-readable-string'>\"${name.value}\"</span>`);\n  }\n  return nodeContent;\n}\n\nexport function accessibilityNodeRenderer(node: AXTreeNode): LitHtml.TemplateResult {\n  let nodeContent: LitHtml.TemplateResult[];\n  const axNode = node.treeNodeData;\n\n  if (axNode.ignored()) {\n    nodeContent = ignoredNodeTemplate();\n  } else {\n    nodeContent = unignoredNodeTemplate(axNode);\n  }\n\n  return LitHtml.html`\n      <style>\n          .ax-readable-string {\n            font-style: italic;\n          }\n\n          .monospace {\n            font-family: var(--monospace-font-family);\n            font-size: var(--monospace-font-size);\n          }\n      </style>\n      ${nodeContent}\n      `;\n}\n"]}