{"version":3,"file":"AdornerManager.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AdornerManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAe7B,+EAA+E;AAC/E,sBAAsB;AACtB,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,uBAA0B;QAClC,gBAAgB,EAAE,IAAI;KACvB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,uBAA0B;QAClC,gBAAgB,EAAE,IAAI;KACvB;IACD,EAAE,EAAE;QACF,IAAI,EAAE,IAAI;QACV,QAAQ,2BAA4B;QACpC,gBAAgB,EAAE,IAAI;KACvB;IACD,WAAW,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,QAAQ,uBAA0B;QAClC,gBAAgB,EAAE,IAAI;KACvB;CACO,CAAC;AAEX,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,EAAE,EAAE,CAAC,CAAC;IAC7B,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,gBAAgB;CAC5B,CAAC,CAAC,CAAC;AAO7E,MAAM,OAAO,cAAc;IACjB,eAAe,GAAuB,IAAI,GAAG,EAAE,CAAC;IAChD,YAAY,CAAiC;IAErD,YAAY,YAA4C;QACtD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,cAAc,CAAC,QAA4B;QACzC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,gBAAgB,CAAC,WAAmB;QAClC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC;IACxD,CAAC;IAEO,sBAAsB;QAC5B,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,KAAK,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE;YACvD,WAAW,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,SAAS,EAAC,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;IAEO,YAAY;QAClB,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;QAC5C,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE;YACjC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;SAC9D;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,+DAA+D;QAC/D,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9D,KAAK,MAAM,EAAC,OAAO,EAAE,SAAS,EAAC,IAAI,sBAAsB,EAAE;YACzD,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBACtC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aAC9C;SACF;QACD,KAAK,MAAM,eAAe,IAAI,gBAAgB,EAAE;YAC9C,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const enum AdornerCategories {\n  SECURITY = 'Security',\n  LAYOUT = 'Layout',\n  DEFAULT = 'Default',\n}\n\nexport interface AdornerSetting {\n  adorner: string;\n  isEnabled: boolean;\n}\n\nexport type AdornerSettingsMap = Map<string, boolean>;\n\n// This enum-like const object serves as the authoritative registry for all the\n// adorners available.\nexport const AdornerRegistry = {\n  GRID: {\n    name: 'grid',\n    category: AdornerCategories.LAYOUT,\n    enabledByDefault: true,\n  },\n  FLEX: {\n    name: 'flex',\n    category: AdornerCategories.LAYOUT,\n    enabledByDefault: true,\n  },\n  AD: {\n    name: 'ad',\n    category: AdornerCategories.SECURITY,\n    enabledByDefault: true,\n  },\n  SCROLL_SNAP: {\n    name: 'scroll-snap',\n    category: AdornerCategories.LAYOUT,\n    enabledByDefault: true,\n  },\n} as const;\n\nexport const DefaultAdornerSettings = Object.values(AdornerRegistry).map(({name, enabledByDefault}) => ({\n                                                                           adorner: name,\n                                                                           isEnabled: enabledByDefault,\n                                                                         }));\n\ninterface SettingStore<Setting> {\n  get(): Setting;\n  set(setting: Setting): void;\n}\n\nexport class AdornerManager {\n  private adornerSettings: AdornerSettingsMap = new Map();\n  private settingStore: SettingStore<AdornerSetting[]>;\n\n  constructor(settingStore: SettingStore<AdornerSetting[]>) {\n    this.settingStore = settingStore;\n    this.syncSettings();\n  }\n\n  updateSettings(settings: AdornerSettingsMap): void {\n    this.adornerSettings = settings;\n    this.persistCurrentSettings();\n  }\n\n  getSettings(): Readonly<AdornerSettingsMap> {\n    return this.adornerSettings;\n  }\n\n  isAdornerEnabled(adornerText: string): boolean {\n    return this.adornerSettings.get(adornerText) || false;\n  }\n\n  private persistCurrentSettings(): void {\n    const settingList = [];\n    for (const [adorner, isEnabled] of this.adornerSettings) {\n      settingList.push({adorner, isEnabled});\n    }\n    this.settingStore.set(settingList);\n  }\n\n  private loadSettings(): void {\n    const settingList = this.settingStore.get();\n    for (const setting of settingList) {\n      this.adornerSettings.set(setting.adorner, setting.isEnabled);\n    }\n  }\n\n  private syncSettings(): void {\n    this.loadSettings();\n\n    // Prune outdated adorners and add new ones to the persistence.\n    const outdatedAdorners = new Set(this.adornerSettings.keys());\n    for (const {adorner, isEnabled} of DefaultAdornerSettings) {\n      outdatedAdorners.delete(adorner);\n      if (!this.adornerSettings.has(adorner)) {\n        this.adornerSettings.set(adorner, isEnabled);\n      }\n    }\n    for (const outdatedAdorner of outdatedAdorners) {\n      this.adornerSettings.delete(outdatedAdorner);\n    }\n\n    this.persistCurrentSettings();\n  }\n}\n"]}