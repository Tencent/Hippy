{"version":3,"file":"ElementsBreadcrumbs.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/ElementsBreadcrumbs.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,2CAA2C,CAAC;AAC9E,OAAO,KAAK,WAAW,MAAM,iEAAiE,CAAC;AAC/F,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAG5D,OAAO,EAAC,cAAc,EAAW,iBAAiB,EAAC,MAAM,+BAA+B,CAAC;AAEzF,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAmBvC,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,MAAM,OAAO,mBAAoB,SAAQ,WAAW;IACjC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC3C,cAAc,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;IAEpF,UAAU,GAAuB,EAAE,CAAC;IACpC,eAAe,GAA2B,IAAI,CAAC;IAC/C,WAAW,GAAG,KAAK,CAAC;IACpB,kBAAkB,GAAuB,OAAO,CAAC;IACjD,iBAAiB,GAAG,KAAK,CAAC;IAC1B,uBAAuB,GAAG,KAAK,CAAC;IAExC,IAAI,IAAI,CAAC,IAA6B;QACpC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;QACrC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;IACnC,CAAC;IAEO,YAAY,CAAC,IAAa;QAChC,OAAO,CAAC,KAAY,EAAQ,EAAE;YAC5B,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,wBAAwB;QACpC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;QACrE,IAAI,CAAC,eAAe,IAAI,CAAC,MAAM,EAAE;YAC/B,OAAO;SACR;QAED,MAAM,oBAAoB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAS,GAAG,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAC/F,MAAM,gBAAgB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAS,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAElF,IAAI,gBAAgB,IAAI,oBAAoB,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;YAC1E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;YAClC,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;aAAM,IAAI,gBAAgB,GAAG,oBAAoB,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC/E,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;YAClC,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;IAEO,KAAK,CAAC,MAAM;QAClB,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACpB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAEO,gBAAgB,CAAC,IAAa;QACpC,OAAO,GAAS,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAC1C,CAAC;IAEO,iBAAiB,CAAC,IAAa;QACrC,OAAO,GAAS,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IAC3C,CAAC;IAEO,YAAY,CAAC,IAAa;QAChC,OAAO,GAAS,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAC1C,CAAC;IAEO,WAAW,CAAC,IAAa;QAC/B,OAAO,GAAS,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IAC3C,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YAC3D,OAAO;SACR;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAEpD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QAED,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED;;;;;;;OAOG;IACK,KAAK,CAAC,gBAAgB;QAC5B,MAAM,oBAAoB,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;QACnF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAEhE,IAAI,CAAC,oBAAoB,IAAI,CAAC,WAAW,EAAE;YACzC,OAAO;SACR;QAED,MAAM,gBAAgB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAS,GAAG,EAAE;YAC3D,OAAO,WAAW,CAAC,WAAW,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,MAAM,oBAAoB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAS,GAAG,EAAE;YAC/D,OAAO,oBAAoB,CAAC,WAAW,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,MAAM,aAAa,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;QAE1D,IAAI,oBAAoB,GAAG,aAAa,EAAE;YACxC,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,sEAAsE;gBACtE,gEAAgE;gBAChE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;YACD,OAAO;SACR;QAED,0EAA0E;QAC1E,iDAAiD;QACjD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;IAEO,oBAAoB,CAAC,KAAY;QACvC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACjB,OAAO;SACR;QAED;;;;WAIG;QACH,MAAM,YAAY,GAAG,KAAK,CAAC,MAAiB,CAAC;QAE7C,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAEO,iBAAiB,CAAC,YAAqB;QAC7C,MAAM,aAAa,GAAG,YAAY,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;QAC1E,MAAM,aAAa,GAAG,YAAY,CAAC,UAAU,CAAC;QAE9C;;;;;;;;;WASG;QACH,MAAM,4BAA4B,GAAG,EAAE,CAAC;QAExC,IAAI,aAAa,GAAG,4BAA4B,EAAE;YAChD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;SACnC;aAAM,IAAI,aAAa,IAAI,aAAa,GAAG,4BAA4B,EAAE;YACxE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;SACjC;aAAM;YACL,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;SACpC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,eAAe,CAAC,SAAyB;QAC/C,OAAO,GAAS,EAAE;YAChB,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;YACpC,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;YAEjE,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO;aACR;YAED,MAAM,qBAAqB,GAAG,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC;YAE3D,MAAM,eAAe,GAAG,SAAS,KAAK,MAAM,CAAC,CAAC;gBAC1C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,GAAG,qBAAqB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1E,YAAY,CAAC,UAAU,GAAG,qBAAqB,CAAC;YAEpD,YAAY,CAAC,QAAQ,CAAC;gBACpB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,eAAe;aACtB,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAEO,oBAAoB,CAAC,SAAyB,EAAE,QAAiB;QACvE,MAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC/C,QAAQ,EAAE,IAAI;YACd,CAAC,SAAS,CAAC,EAAE,IAAI;YACjB,MAAM,EAAE,IAAI,CAAC,WAAW,KAAK,KAAK;SACnC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,IAAI,CAAA;;gBAEP,YAAY;iBACX,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;oBAC5B,QAAQ;6BACC,SAAS;;OAE/B,CAAC;IACN,CAAC;IAEO,KAAK,CAAC,MAAM;QAClB,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAErE,MAAM,WAAW,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;YACjD,qDAAqD;YACrD,mBAAmB;YACnB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA0FrB,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,KAAK,OAAO,CAAC;;+CAEnC,IAAI,CAAC,oBAAoB;;gBAExD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACnB,MAAM,YAAY,GAAG;oBACnB,KAAK,EAAE,IAAI;oBACX,QAAQ,EAAE,KAAK,CAAC,QAAQ;iBACzB,CAAC;gBACF,OAAO,OAAO,CAAC,IAAI,CAAA;8BACL,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;mCACpC,KAAK,CAAC,IAAI,CAAC,EAAE;;;;;;+BAMjB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;mCACzB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;oCAChC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC;+BACvC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;8BAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;wBAClC,QAAQ,CAAC,UAAU,oBAAoB,KAAK,CAAC,KAAK,CAAC,IAAI,UAAU;oBACnE,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI;oBAC3B,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;oBAC7B,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;iBACxB,MAAM,QAAQ,CAAC,UAAU;wBACtC,CAAC;YACX,CAAC,CAAC;;;YAGJ,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,KAAK,KAAK,CAAC;;OAE1E,EAAE,IAAI,CAAC,MAAM,EAAE;gBACd,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;YACH,kBAAkB;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,KAAK,CAAC,2BAA2B;QACvC;;;;;;;;;WASG;QACH,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAC9F,OAAO;SACR;QACD,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;QAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,wBAAwB,aAAa,IAAI,CAAC,CAAC;QAEzF,IAAI,WAAW,EAAE;YACf,MAAM,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE;gBAC5B,WAAW,CAAC,cAAc,CAAC;oBACzB,QAAQ,EAAE,QAAQ;iBACnB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF;AAED,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,+BAA+B,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport type {UserScrollPosition} from './ElementsBreadcrumbsUtils.js';\nimport {crumbsToRender, DOMNode, NodeSelectedEvent} from './ElementsBreadcrumbsUtils.js';\n\nimport {NodeText} from './NodeText.js';\nimport type {NodeTextData} from './NodeText.js';\nexport {DOMNode};\n\nexport interface ElementsBreadcrumbsData {\n  selectedNode: DOMNode|null;\n  crumbs: DOMNode[];\n}\nexport interface ElementsBreadcrumbs extends HTMLElement {\n  addEventListener<K extends keyof HTMLElementEventMap>(\n      type: K,\n      listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) =>\n          any,  // eslint-disable-line @typescript-eslint/no-explicit-any\n      options?: boolean|AddEventListenerOptions): void;\n  addEventListener(\n      type: string, listener: EventListenerOrEventListenerObject, options?: boolean|AddEventListenerOptions): void;\n  addEventListener(type: 'breadcrumbsnodeselected', callback: (event: NodeSelectedEvent) => void): void;\n}\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport class ElementsBreadcrumbs extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private readonly resizeObserver = new ResizeObserver(() => this.checkForOverflowOnResize());\n\n  private crumbsData: readonly DOMNode[] = [];\n  private selectedDOMNode: Readonly<DOMNode>|null = null;\n  private overflowing = false;\n  private userScrollPosition: UserScrollPosition = 'start';\n  private isObservingResize = false;\n  private userHasManuallyScrolled = false;\n\n  set data(data: ElementsBreadcrumbsData) {\n    this.selectedDOMNode = data.selectedNode;\n    this.crumbsData = data.crumbs;\n    this.userHasManuallyScrolled = false;\n    this.update();\n  }\n\n  disconnectedCallback(): void {\n    this.isObservingResize = false;\n    this.resizeObserver.disconnect();\n  }\n\n  private onCrumbClick(node: DOMNode): (event: Event) => void {\n    return (event: Event): void => {\n      event.preventDefault();\n      this.dispatchEvent(new NodeSelectedEvent(node));\n    };\n  }\n\n  /*\n   * When the window is resized, we need to check if we either:\n   * 1) overflowing, and now the window is big enough that we don't need to\n   * 2) not overflowing, and now the window is small and we do need to\n   *\n   * If either of these are true, we toggle the overflowing state accordingly and trigger a re-render.\n   */\n  private async checkForOverflowOnResize(): Promise<void> {\n    const wrappingElement = this.shadow.querySelector('.crumbs');\n    const crumbs = this.shadow.querySelector('.crumbs-scroll-container');\n    if (!wrappingElement || !crumbs) {\n      return;\n    }\n\n    const totalContainingWidth = await coordinator.read<number>(() => wrappingElement.clientWidth);\n    const totalCrumbsWidth = await coordinator.read<number>(() => crumbs.clientWidth);\n\n    if (totalCrumbsWidth >= totalContainingWidth && this.overflowing === false) {\n      this.overflowing = true;\n      this.userScrollPosition = 'start';\n      this.render();\n    } else if (totalCrumbsWidth < totalContainingWidth && this.overflowing === true) {\n      this.overflowing = false;\n      this.userScrollPosition = 'start';\n      this.render();\n    }\n  }\n\n  private async update(): Promise<void> {\n    await this.render();\n    this.engageResizeObserver();\n    this.ensureSelectedNodeIsVisible();\n  }\n\n  private onCrumbMouseMove(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  private onCrumbMouseLeave(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  private onCrumbFocus(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  private onCrumbBlur(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  private engageResizeObserver(): void {\n    if (!this.resizeObserver || this.isObservingResize === true) {\n      return;\n    }\n\n    const crumbs = this.shadow.querySelector('.crumbs');\n\n    if (!crumbs) {\n      return;\n    }\n\n    this.resizeObserver.observe(crumbs);\n    this.isObservingResize = true;\n  }\n\n  /**\n   * This method runs after render and checks if the crumbs are too large for\n   * their container and therefore we need to render the overflow buttons at\n   * either end which the user can use to scroll back and forward through the crumbs.\n   * If it finds that we are overflowing, it sets the instance variable and\n   * triggers a re-render. If we are not overflowing, this method returns and\n   * does nothing.\n   */\n  private async checkForOverflow(): Promise<void> {\n    const crumbScrollContainer = this.shadow.querySelector('.crumbs-scroll-container');\n    const crumbWindow = this.shadow.querySelector('.crumbs-window');\n\n    if (!crumbScrollContainer || !crumbWindow) {\n      return;\n    }\n\n    const crumbWindowWidth = await coordinator.read<number>(() => {\n      return crumbWindow.clientWidth;\n    });\n\n    const scrollContainerWidth = await coordinator.read<number>(() => {\n      return crumbScrollContainer.clientWidth;\n    });\n\n    const paddingAllowance = 20;\n    const maxChildWidth = crumbWindowWidth - paddingAllowance;\n\n    if (scrollContainerWidth < maxChildWidth) {\n      if (this.overflowing) {\n        // We were overflowing, but now we have enough room, so re-render with\n        // overflowing set to false so the overflow buttons get removed.\n        this.overflowing = false;\n        this.render();\n      }\n      return;\n    }\n\n    // We don't have enough room, so if we are not currently overflowing, mark\n    // as overflowing and re-render to update the UI.\n    if (!this.overflowing) {\n      this.overflowing = true;\n      this.render();\n    }\n  }\n\n  private onCrumbsWindowScroll(event: Event): void {\n    if (!event.target) {\n      return;\n    }\n\n    /* not all Events are DOM Events so the TS Event def doesn't have\n     * .target typed as an Element but in this case we're getting this\n     * from a DOM event so we're confident of having .target and it\n     * being an element\n     */\n    const scrollWindow = event.target as Element;\n\n    this.updateScrollState(scrollWindow);\n  }\n\n  private updateScrollState(scrollWindow: Element): void {\n    const maxScrollLeft = scrollWindow.scrollWidth - scrollWindow.clientWidth;\n    const currentScroll = scrollWindow.scrollLeft;\n\n    /**\n     * When we check if the user is at the beginning or end of the crumbs (such\n     * that we disable the relevant button - you can't keep scrolling right if\n     * you're at the last breadcrumb) we want to not check exact numbers but\n     * give a bit of padding. This means if the user has scrolled to nearly the\n     * end but not quite (e.g. there are 2 more pixels they could scroll) we'll\n     * mark it as them being at the end. This variable controls how much padding\n     * we apply. So if a user has scrolled to within 10px of the end, we count\n     * them as being at the end and disable the button.\n     */\n    const scrollBeginningAndEndPadding = 10;\n\n    if (currentScroll < scrollBeginningAndEndPadding) {\n      this.userScrollPosition = 'start';\n    } else if (currentScroll >= maxScrollLeft - scrollBeginningAndEndPadding) {\n      this.userScrollPosition = 'end';\n    } else {\n      this.userScrollPosition = 'middle';\n    }\n\n    this.render();\n  }\n\n  private onOverflowClick(direction: 'left'|'right'): () => void {\n    return (): void => {\n      this.userHasManuallyScrolled = true;\n      const scrollWindow = this.shadow.querySelector('.crumbs-window');\n\n      if (!scrollWindow) {\n        return;\n      }\n\n      const amountToScrollOnClick = scrollWindow.clientWidth / 2;\n\n      const newScrollAmount = direction === 'left' ?\n          Math.max(Math.floor(scrollWindow.scrollLeft - amountToScrollOnClick), 0) :\n          scrollWindow.scrollLeft + amountToScrollOnClick;\n\n      scrollWindow.scrollTo({\n        behavior: 'smooth',\n        left: newScrollAmount,\n      });\n    };\n  }\n\n  private renderOverflowButton(direction: 'left'|'right', disabled: boolean): LitHtml.TemplateResult {\n    const buttonStyles = LitHtml.Directives.classMap({\n      overflow: true,\n      [direction]: true,\n      hidden: this.overflowing === false,\n    });\n\n    return LitHtml.html`\n      <button\n        class=${buttonStyles}\n        @click=${this.onOverflowClick(direction)}\n        ?disabled=${disabled}\n        aria-label=\"Scroll ${direction}\"\n      >&hellip;</button>\n      `;\n  }\n\n  private async render(): Promise<void> {\n    const crumbs = crumbsToRender(this.crumbsData, this.selectedDOMNode);\n\n    await coordinator.write('Breadcrumbs render', () => {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n        <style>\n          :host {\n            --node-text-label-color: var(--color-syntax-2);\n            --node-text-class-color: var(--color-syntax-4);\n            --node-text-id-color: var(--color-syntax-4);\n            --node-text-multiple-descriptors-id: var(--color-syntax-7);\n          }\n\n          .crumbs {\n            display: inline-flex;\n            align-items: stretch;\n            width: 100%;\n            overflow: hidden;\n            pointer-events: auto;\n            cursor: default;\n            white-space: nowrap;\n            position: relative;\n            background: var(--color-background);\n          }\n\n          .crumbs-window {\n            flex-grow: 2;\n            overflow: hidden;\n          }\n\n          .crumbs-scroll-container {\n            display: inline-flex;\n            margin: 0;\n            padding: 0;\n          }\n\n          .crumb {\n            display: block;\n            padding: 0 7px;\n            line-height: 23px;\n            white-space: nowrap;\n          }\n\n          .overflow {\n            padding: 0 7px;\n            font-weight: bold;\n            display: block;\n            border: none;\n            flex-grow: 0;\n            flex-shrink: 0;\n            text-align: center;\n            background-color: var(--color-background-elevation-1);\n            color: var(--color-text-secondary);\n            margin: 1px;\n            outline: var(--color-background-elevation-1) solid 1px;\n          }\n\n          .overflow.hidden {\n            display: none;\n          }\n\n          .overflow:disabled {\n            opacity: 50%;\n          }\n\n          .overflow:focus {\n            outline-color: var(--color-primary);\n          }\n\n          .overflow:not(:disabled):hover {\n            background-color: var(--color-background-elevation-2);\n            color: var(--color-text-primary);\n            cursor: pointer;\n          }\n\n          .crumb-link {\n            text-decoration: none;\n            color: inherit;\n          }\n\n          .crumb:hover {\n            background: var(--color-background-elevation-2);\n          }\n\n          .crumb.selected {\n            background: var(--color-background-elevation-1);\n          }\n\n          .crumb:focus {\n            outline: var(--color-primary) auto 1px;\n          }\n        </style>\n\n        <nav class=\"crumbs\">\n          ${this.renderOverflowButton('left', this.userScrollPosition === 'start')}\n\n          <div class=\"crumbs-window\" @scroll=${this.onCrumbsWindowScroll}>\n            <ul class=\"crumbs-scroll-container\">\n              ${crumbs.map(crumb => {\n                const crumbClasses = {\n                  crumb: true,\n                  selected: crumb.selected,\n                };\n                return LitHtml.html`\n                  <li class=${LitHtml.Directives.classMap(crumbClasses)}\n                    data-node-id=${crumb.node.id}\n                    data-crumb=\"true\"\n                  >\n                    <a href=\"#\"\n                      draggable=false\n                      class=\"crumb-link\"\n                      @click=${this.onCrumbClick(crumb.node)}\n                      @mousemove=${this.onCrumbMouseMove(crumb.node)}\n                      @mouseleave=${this.onCrumbMouseLeave(crumb.node)}\n                      @focus=${this.onCrumbFocus(crumb.node)}\n                      @blur=${this.onCrumbBlur(crumb.node)}\n                    ><${NodeText.litTagName} data-node-title=${crumb.title.main} .data=${{\n                      nodeTitle: crumb.title.main,\n                      nodeId: crumb.title.extras.id,\n                      nodeClasses: crumb.title.extras.classes,\n                    } as NodeTextData}></${NodeText.litTagName}></a>\n                  </li>`;\n              })}\n            </ul>\n          </div>\n          ${this.renderOverflowButton('right', this.userScrollPosition === 'end')}\n        </nav>\n      `, this.shadow, {\n        host: this,\n      });\n      // clang-format on\n    });\n\n    this.checkForOverflow();\n  }\n\n  private async ensureSelectedNodeIsVisible(): Promise<void> {\n    /*\n     * If the user has manually scrolled the crumbs in either direction, we\n     * effectively hand control over the scrolling down to them. This is to\n     * prevent the user manually scrolling to the end, and then us scrolling\n     * them back to the selected node. The moment they click either scroll\n     * button we set userHasManuallyScrolled, and we reset it when we get new\n     * data in. This means if the user clicks on a different element in the\n     * tree, we will auto-scroll that element into view, because we'll get new\n     * data and hence the flag will be reset.\n     */\n    if (!this.selectedDOMNode || !this.shadow || !this.overflowing || this.userHasManuallyScrolled) {\n      return;\n    }\n    const activeCrumbId = this.selectedDOMNode.id;\n    const activeCrumb = this.shadow.querySelector(`.crumb[data-node-id=\"${activeCrumbId}\"]`);\n\n    if (activeCrumb) {\n      await coordinator.scroll(() => {\n        activeCrumb.scrollIntoView({\n          behavior: 'smooth',\n        });\n      });\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-elements-breadcrumbs', ElementsBreadcrumbs);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-elements-breadcrumbs': ElementsBreadcrumbs;\n  }\n}\n"]}