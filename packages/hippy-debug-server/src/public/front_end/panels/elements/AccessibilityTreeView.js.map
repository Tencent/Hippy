{"version":3,"file":"AccessibilityTreeView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/AccessibilityTreeView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as LitHtml from '../../ui/lit-html/lit-html.js';\n\nimport * as ElementsComponents from './components/components.js';\n\nexport class AccessibilityTreeView extends UI.Widget.VBox {\n  private readonly accessibilityTreeComponent =\n      new TreeOutline.TreeOutline.TreeOutline<SDK.AccessibilityModel.AccessibilityNode>();\n  private treeData: ElementsComponents.AccessibilityTreeUtils.AXTreeNode[] = [];\n  private readonly toggleButton: HTMLButtonElement;\n  private accessibilityModel: SDK.AccessibilityModel.AccessibilityModel|null = null;\n  private rootAXNode: SDK.AccessibilityModel.AccessibilityNode|null = null;\n  private selectedTreeNode: ElementsComponents.AccessibilityTreeUtils.AXTreeNode|null = null;\n  private inspectedDOMNode: SDK.DOMModel.DOMNode|null = null;\n\n  constructor(toggleButton: HTMLButtonElement) {\n    super();\n    // toggleButton is bound to a click handler on ElementsPanel to switch between the DOM tree\n    // and accessibility tree views.\n    this.toggleButton = toggleButton;\n    this.contentElement.appendChild(this.toggleButton);\n    this.contentElement.appendChild(this.accessibilityTreeComponent);\n\n    // The DOM tree and accessibility are kept in sync as much as possible, so\n    // on node selection, update the currently inspected node and reveal in the\n    // DOM tree.\n    this.accessibilityTreeComponent.addEventListener('itemselected', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemSelectedEvent<SDK.AccessibilityModel.AccessibilityNode>;\n      const axNode = evt.data.node.treeNodeData;\n      if (!axNode.isDOMNode()) {\n        return;\n      }\n      const deferredNode = axNode.deferredDOMNode();\n      if (deferredNode) {\n        deferredNode.resolve(domNode => {\n          if (domNode && domNode.nodeName() === '#document') {\n            return;\n          }\n          Common.Revealer.reveal(domNode, true /* omitFocus */);\n        });\n      }\n\n      // Highlight the node as well, for keyboard navigation.\n      evt.data.node.treeNodeData.highlightDOMNode();\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseover', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemMouseOverEvent<SDK.AccessibilityModel.AccessibilityNode>;\n      evt.data.node.treeNodeData.highlightDOMNode();\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseout', () => {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    });\n  }\n\n  wasShown(): void {\n    if (this.selectedTreeNode) {\n      this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.selectedTreeNode);\n    }\n  }\n\n  setAccessibilityModel(model: SDK.AccessibilityModel.AccessibilityModel|null): void {\n    this.accessibilityModel = model;\n    this.refreshAccessibilityTree();\n  }\n\n  async refreshAccessibilityTree(): Promise<void> {\n    if (!this.accessibilityModel) {\n      return;\n    }\n\n    const root = await this.accessibilityModel.requestRootNode();\n    if (!root) {\n      return;\n    }\n\n    this.rootAXNode = root;\n    this.treeData = [ElementsComponents.AccessibilityTreeUtils.sdkNodeToAXTreeNode(this.rootAXNode)];\n\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: (node): LitHtml.TemplateResult =>\n          ElementsComponents.AccessibilityTreeUtils.accessibilityNodeRenderer(node),\n      tree: this.treeData,\n    };\n\n    this.accessibilityTreeComponent.expandRecursively(2);\n    this.selectedTreeNode = this.treeData[0];\n  }\n\n  // Given a selected DOM node, asks the model to load the missing subtree from the root to the\n  // selected node and then re-renders the tree.\n  async loadSubTreeIntoAccessibilityModel(selectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (!this.accessibilityModel) {\n      return;\n    }\n\n    this.inspectedDOMNode = selectedNode;\n\n    // If this node has been loaded previously, the accessibility tree will return it's cached node.\n    // Eventually we'll need some mechanism for forcing it to fetch a new node when we are subscribing\n    // for updates, but TBD later.\n    // EG for a backend tree like:\n    //\n    // A*\n    //   B\n    //     C\n    //   D\n    //     E\n    // Where only A is already loaded into the model, calling requestAndLoadSubTreeToNode(C) will\n    // load [A, B, D, C] into the model, and return C.\n    const inspectedAXNode = await this.accessibilityModel.requestAndLoadSubTreeToNode(selectedNode);\n    if (!inspectedAXNode) {\n      return;\n    }\n\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: (node): LitHtml.TemplateResult =>\n          ElementsComponents.AccessibilityTreeUtils.accessibilityNodeRenderer(node),\n      tree: this.treeData,\n    };\n\n    // These nodes require a special case, as they don't have an unignored node in the\n    // accessibility tree. Someone inspecting these in the DOM is probably expecting to\n    // be focused on the root WebArea of the accessibility tree.\n    // TODO(meredithl): Fix for when the inspected node is ingored in the accessibility\n    // tree. Eg, inspecting <head> in the DOM tree.\n    if (selectedNode.nodeName() === 'BODY' || selectedNode.nodeName() === 'HTML') {\n      this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.treeData[0]);\n      this.selectedTreeNode = this.treeData[0];\n      return;\n    }\n\n    this.selectedTreeNode = ElementsComponents.AccessibilityTreeUtils.sdkNodeToAXTreeNode(inspectedAXNode);\n    this.accessibilityTreeComponent.expandToAndSelectTreeNode(this.selectedTreeNode);\n  }\n\n  // Selected node in the DOM has changed, and the corresponding accessibility node may be\n  // unloaded. We probably only want to do this when the AccessibilityTree is visible.\n  async selectedNodeChanged(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (inspectedNode === this.inspectedDOMNode) {\n      return;\n    }\n    await this.loadSubTreeIntoAccessibilityModel(inspectedNode);\n  }\n}\n"]}