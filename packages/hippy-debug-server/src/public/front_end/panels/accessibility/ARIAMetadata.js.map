{"version":3,"file":"ARIAMetadata.js","sourceRoot":"","sources":["../../../../../../front_end/panels/accessibility/ARIAMetadata.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,cAAc,MAAM,mCAAmC,CAAC;AAcpE,MAAM,OAAO,YAAY;IACvB,WAAW,CAAyB;IACpC,UAAU,CAAW;IACrB,YAAY,MAAmB;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,WAAW,CAAC,MAAc;QACxB,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QAExC,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACtC,KAAK,MAAM,eAAe,IAAI,UAAU,EAAE;YACxC,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,EAAE;gBACtC,eAAe,CAAC,IAAI,GAAG,WAAW,CAAC;aACpC;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;SAC5E;QAED,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACvE,CAAC;IAED,iBAAiB,CAAC,QAAgB;QAChC,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjD,IAAI,SAAS,EAAE;YACb,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED,IAAI,QAAgC,CAAC;AAErC,MAAM,UAAU,YAAY;IAC1B,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,YAAY,CAAC,cAAc,CAAC,MAAgB,IAAI,IAAI,CAAC,CAAC;KACtE;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,OAAO,SAAS;IACpB,KAAK,CAAW;IAChB,YAAY,MAAuB;QACjC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF","sourcesContent":["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as ARIAProperties from '../../generated/ARIAProperties.js';\nexport interface AttributeConfig {\n  name: string;\n  type: string;\n  enum?: string[];\n}\nexport interface RoleConfig {\n  name: string;\n}\nexport interface Config {\n  attributes: AttributeConfig[];\n  roles: RoleConfig[];\n}\n\nexport class ARIAMetadata {\n  _attributes: Map<string, Attribute>;\n  _roleNames: string[];\n  constructor(config: Config|null) {\n    this._attributes = new Map();\n    this._roleNames = [];\n\n    if (config) {\n      this._initialize(config);\n    }\n  }\n\n  _initialize(config: Config): void {\n    const attributes = config['attributes'];\n\n    const booleanEnum = ['true', 'false'];\n    for (const attributeConfig of attributes) {\n      if (attributeConfig.type === 'boolean') {\n        attributeConfig.enum = booleanEnum;\n      }\n      this._attributes.set(attributeConfig.name, new Attribute(attributeConfig));\n    }\n\n    /** @type {!Array<string>} */\n    this._roleNames = config['roles'].map(roleConfig => roleConfig.name);\n  }\n\n  valuesForProperty(property: string): string[] {\n    const attribute = this._attributes.get(property);\n    if (attribute) {\n      return attribute.getEnum();\n    }\n\n    if (property === 'role') {\n      return this._roleNames;\n    }\n\n    return [];\n  }\n}\n\nlet instance: ARIAMetadata|undefined;\n\nexport function ariaMetadata(): ARIAMetadata {\n  if (!instance) {\n    instance = new ARIAMetadata(ARIAProperties.config as Config || null);\n  }\n  return instance;\n}\n\nexport class Attribute {\n  _enum: string[];\n  constructor(config: AttributeConfig) {\n    this._enum = [];\n\n    if (config.enum) {\n      this._enum = config.enum;\n    }\n  }\n\n  getEnum(): string[] {\n    return this._enum;\n  }\n}\n"]}