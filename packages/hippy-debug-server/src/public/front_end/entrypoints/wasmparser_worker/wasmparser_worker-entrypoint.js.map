{"version":3,"file":"wasmparser_worker-entrypoint.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/wasmparser_worker/wasmparser_worker-entrypoint.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,wBAAwB,CAAC,CAAE,iDAAiD;AAE9G,IAAI,CAAC,SAAS,GAAG,CAAC,KAA0D,EAAQ,EAAE;IACpF,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;IAEjC,IAAI,MAAM,KAAK,aAAa,EAAE;QAC5B,OAAO;KACR;IAED,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,OAAgB,EAAE,EAAE;QACvG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as WasmParserWorker from './wasmparser_worker.js';  // eslint-disable-line rulesdir/es_modules_import\n\nself.onmessage = (event: {data: {method: string, params: {content: string}}}): void => {\n  const method = event.data.method;\n\n  if (method !== 'disassemble') {\n    return;\n  }\n\n  self.postMessage(WasmParserWorker.WasmParserWorker.dissambleWASM(event.data.params, (message: unknown) => {\n    self.postMessage(message);\n  }));\n};\n\nself.postMessage('workerReady');\n"]}