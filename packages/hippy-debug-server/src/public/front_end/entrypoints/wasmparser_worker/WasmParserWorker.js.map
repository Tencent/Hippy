{"version":3,"file":"WasmParserWorker.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/wasmparser_worker/WasmParserWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2020 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as WasmParser from '../../third_party/wasmparser/wasmparser.js';\n\nexport function dissambleWASM(\n    params: {\n      content: string,\n    },\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    postMessage: (arg0: any) => void): void {\n  try {\n    const dataBuffer = Common.Base64.decode(params.content);\n\n    let parser: WasmParser.WasmParser.BinaryReader = new WasmParser.WasmParser.BinaryReader();\n    parser.setData(dataBuffer, 0, dataBuffer.byteLength);\n    const nameGenerator = new WasmParser.WasmDis.DevToolsNameGenerator();\n    nameGenerator.read(parser);\n\n    const data = new Uint8Array(dataBuffer);\n    parser = new WasmParser.WasmParser.BinaryReader();\n    const dis = new WasmParser.WasmDis.WasmDisassembler();\n    dis.addOffsets = true;\n    dis.exportMetadata = nameGenerator.getExportMetadata();\n    dis.nameResolver = nameGenerator.getNameResolver();\n    const lines = [];\n    const offsets = [];\n    const functionBodyOffsets = [];\n    const MAX_LINES = 1000 * 1000;\n    let chunkSize: number = 128 * 1024;\n    let buffer: Uint8Array = new Uint8Array(chunkSize);\n    let pendingSize = 0;\n    let offsetInModule = 0;\n    for (let i = 0; i < data.length;) {\n      if (chunkSize > data.length - i) {\n        chunkSize = data.length - i;\n      }\n      const bufferSize = pendingSize + chunkSize;\n      if (buffer.byteLength < bufferSize) {\n        const newBuffer = new Uint8Array(bufferSize);\n        newBuffer.set(buffer);\n        buffer = newBuffer;\n      }\n      while (pendingSize < bufferSize) {\n        buffer[pendingSize++] = data[i++];\n      }\n      parser.setData(buffer.buffer, 0, bufferSize, i === data.length);\n\n      // The disassemble will attemp to fetch the data as much as possible.\n      const finished = dis.disassembleChunk(parser, offsetInModule);\n\n      const result = (dis.getResult() as {\n        lines: Array<string>,\n        offsets: Array<number>,\n        functionBodyOffsets: Array<{\n          start: number,\n          end: number,\n        }>,\n      });\n      for (const line of result.lines) {\n        lines.push(line);\n      }\n      for (const offset of result.offsets) {\n        offsets.push(offset);\n      }\n      for (const functionBodyOffset of result.functionBodyOffsets) {\n        functionBodyOffsets.push(functionBodyOffset);\n      }\n\n      if (lines.length > MAX_LINES) {\n        lines[MAX_LINES] = ';; .... text is truncated due to size';\n        lines.splice(MAX_LINES + 1);\n        if (offsets) {\n          offsets.splice(MAX_LINES + 1);\n        }\n        break;\n      }\n      if (finished) {\n        break;\n      }\n\n      if (parser.position === 0) {\n        // Parser did not consume anything, needs more data.\n        pendingSize = bufferSize;\n        continue;\n      }\n\n      // Shift the data to the beginning of the buffer.\n      const pending = parser.data.subarray(parser.position, parser.length);\n      pendingSize = pending.length;\n      buffer.set(pending);\n      offsetInModule += parser.position;\n\n      const percentage = Math.floor((offsetInModule / data.length) * 100);\n      postMessage({event: 'progress', params: {percentage}});\n    }\n\n    postMessage({event: 'progress', params: {percentage: 99}});\n\n    const source = lines.join('\\n');\n\n    postMessage({event: 'progress', params: {percentage: 100}});\n\n    postMessage({method: 'disassemble', result: {source, offsets, functionBodyOffsets}});\n  } catch (error) {\n    postMessage({method: 'disassemble', error});\n  }\n}\n"]}