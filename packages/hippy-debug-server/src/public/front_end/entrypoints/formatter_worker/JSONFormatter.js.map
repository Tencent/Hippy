{"version":3,"file":"JSONFormatter.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/JSONFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {FormattedContentBuilder} from './FormattedContentBuilder.js';\nimport {createTokenizer} from './FormatterWorker.js';\n\nexport class JSONFormatter {\n  builder: FormattedContentBuilder;\n  toOffset!: number;\n  fromOffset!: number;\n  lineEndings!: number[];\n  lastLine: number;\n  text!: string;\n  constructor(builder: FormattedContentBuilder) {\n    this.builder = builder;\n    this.lastLine = -1;\n  }\n\n  format(text: string, lineEndings: number[], fromOffset: number, toOffset: number): void {\n    this.lineEndings = lineEndings;\n    this.fromOffset = fromOffset;\n    this.toOffset = toOffset;\n    this.lastLine = -1;\n    this.text = text;\n    const tokenize = createTokenizer('application/json');\n    tokenize(text.substring(this.fromOffset, this.toOffset), this.tokenCallback.bind(this));\n  }\n\n  tokenCallback(token: string, type: string|null, startPosition: number): void {\n    switch (token.charAt(0)) {\n      case '{':\n      case '[':\n        if (this.text[startPosition + 1] === '}' || this.text[startPosition + 1] === ']') {\n          this.builder.addToken(token, startPosition);\n        } else {\n          this.builder.addToken(token, startPosition);\n          this.builder.addNewLine();\n          this.builder.increaseNestingLevel();\n        }\n        break;\n      case '}':\n      case ']':\n        if (this.text[startPosition - 1] === '{' || this.text[startPosition - 1] === '[') {\n          this.builder.addToken(token, startPosition);\n        } else {\n          this.builder.decreaseNestingLevel();\n          this.builder.addNewLine();\n          this.builder.addToken(token, startPosition);\n        }\n        break;\n      case ':':\n        this.builder.addToken(token, startPosition);\n        this.builder.addSoftSpace();\n        break;\n      case ',':\n        this.builder.addToken(token, startPosition);\n        this.builder.addNewLine();\n        break;\n      case '':\n      case ' ':\n      case '\\n':\n        break;\n      default:\n        this.builder.addToken(token, startPosition);\n        break;\n    }\n  }\n}\n"]}