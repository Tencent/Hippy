{"version":3,"file":"FormattedContentBuilder.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/FormattedContentBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class FormattedContentBuilder {\n  private lastOriginalPosition = 0;\n  private formattedContent: string[] = [];\n  private formattedContentLength = 0;\n  private lastFormattedPosition = 0;\n  private nestingLevel = 0;\n  private newLines = 0;\n  private enforceSpaceBetweenWords = true;\n  private softSpace = false;\n  private hardSpaces = 0;\n  private cachedIndents = new Map<number, string>();\n\n  mapping = {original: [0], formatted: [0]};\n\n  constructor(private indentString: string) {\n  }\n\n  setEnforceSpaceBetweenWords(value: boolean): boolean {\n    const oldValue = this.enforceSpaceBetweenWords;\n    this.enforceSpaceBetweenWords = value;\n    return oldValue;\n  }\n\n  addToken(token: string, offset: number): void {\n    const last = this.formattedContent[this.formattedContent.length - 1];\n    if (this.enforceSpaceBetweenWords && last && /\\w/.test(last[last.length - 1]) && /\\w/.test(token)) {\n      this.addSoftSpace();\n    }\n\n    this.appendFormatting();\n\n    // Insert token.\n    this.addMappingIfNeeded(offset);\n    this.addText(token);\n  }\n\n  addSoftSpace(): void {\n    if (!this.hardSpaces) {\n      this.softSpace = true;\n    }\n  }\n\n  addHardSpace(): void {\n    this.softSpace = false;\n    ++this.hardSpaces;\n  }\n\n  addNewLine(noSquash?: boolean): void {\n    // Avoid leading newlines.\n    if (!this.formattedContentLength) {\n      return;\n    }\n    if (noSquash) {\n      ++this.newLines;\n    } else {\n      this.newLines = this.newLines || 1;\n    }\n  }\n\n  increaseNestingLevel(): void {\n    this.nestingLevel += 1;\n  }\n\n  decreaseNestingLevel(): void {\n    if (this.nestingLevel > 0) {\n      this.nestingLevel -= 1;\n    }\n  }\n\n  content(): string {\n    return this.formattedContent.join('') + (this.newLines ? '\\n' : '');\n  }\n\n  private appendFormatting(): void {\n    if (this.newLines) {\n      for (let i = 0; i < this.newLines; ++i) {\n        this.addText('\\n');\n      }\n      this.addText(this.indent());\n    } else if (this.softSpace) {\n      this.addText(' ');\n    }\n    if (this.hardSpaces) {\n      for (let i = 0; i < this.hardSpaces; ++i) {\n        this.addText(' ');\n      }\n    }\n    this.newLines = 0;\n    this.softSpace = false;\n    this.hardSpaces = 0;\n  }\n\n  private indent(): string {\n    const cachedValue = this.cachedIndents.get(this.nestingLevel);\n    if (cachedValue) {\n      return cachedValue;\n    }\n\n    let fullIndent = '';\n    for (let i = 0; i < this.nestingLevel; ++i) {\n      fullIndent += this.indentString;\n    }\n\n    // Cache a maximum of 20 nesting level indents.\n    if (this.nestingLevel <= 20) {\n      this.cachedIndents.set(this.nestingLevel, fullIndent);\n    }\n    return fullIndent;\n  }\n\n  private addText(text: string): void {\n    this.formattedContent.push(text);\n    this.formattedContentLength += text.length;\n  }\n\n  private addMappingIfNeeded(originalPosition: number): void {\n    if (originalPosition - this.lastOriginalPosition === this.formattedContentLength - this.lastFormattedPosition) {\n      return;\n    }\n    this.mapping.original.push(originalPosition);\n    this.lastOriginalPosition = originalPosition;\n    this.mapping.formatted.push(this.formattedContentLength);\n    this.lastFormattedPosition = this.formattedContentLength;\n  }\n}\n"]}