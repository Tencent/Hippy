{"version":3,"file":"JavaScriptFormatter.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/JavaScriptFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Acorn from '../../third_party/acorn/acorn.js';\n\nimport type {TokenOrComment} from './AcornTokenizer.js';\nimport {AcornTokenizer, ECMA_VERSION} from './AcornTokenizer.js';  // eslint-disable-line no-unused-vars\nimport {ESTreeWalker} from './ESTreeWalker.js';\nimport type {FormattedContentBuilder} from './FormattedContentBuilder.js'; // eslint-disable-line no-unused-vars\n\nexport class JavaScriptFormatter {\n  _builder: FormattedContentBuilder;\n  _tokenizer!: AcornTokenizer;\n  _content!: string;\n  _fromOffset!: number;\n  _lastLineNumber!: number;\n  _toOffset?: number;\n  constructor(builder: FormattedContentBuilder) {\n    this._builder = builder;\n  }\n\n  format(text: string, lineEndings: number[], fromOffset: number, toOffset: number): void {\n    this._fromOffset = fromOffset;\n    this._toOffset = toOffset;\n    this._content = text.substring(this._fromOffset, this._toOffset);\n    this._lastLineNumber = 0;\n    this._tokenizer = new AcornTokenizer(this._content);\n    const ast = Acorn.parse(this._content, {\n      ranges: false,\n      preserveParens: true,\n      allowImportExportEverywhere: true,\n      ecmaVersion: ECMA_VERSION,\n      allowHashBang: true,\n    });\n    const walker = new ESTreeWalker(this._beforeVisit.bind(this), this._afterVisit.bind(this));\n    // @ts-ignore Technically, the acorn Node type is a subclass of Acorn.ESTree.Node.\n    // However, the acorn package currently exports its type without specifying\n    // this relationship. So while this is allowed on runtime, we can't properly\n    // typecheck it.\n    walker.walk(ast);\n  }\n\n  _push(token: Acorn.Token|Acorn.Comment|null, format: string): void {\n    for (let i = 0; i < format.length; ++i) {\n      if (format[i] === 's') {\n        this._builder.addSoftSpace();\n      } else if (format[i] === 'S') {\n        this._builder.addHardSpace();\n      } else if (format[i] === 'n') {\n        this._builder.addNewLine();\n      } else if (format[i] === '>') {\n        this._builder.increaseNestingLevel();\n      } else if (format[i] === '<') {\n        this._builder.decreaseNestingLevel();\n      } else if (format[i] === 't') {\n        if (this._tokenizer.tokenLineStart() - this._lastLineNumber > 1) {\n          this._builder.addNewLine(true);\n        }\n        this._lastLineNumber = this._tokenizer.tokenLineEnd();\n        if (token) {\n          this._builder.addToken(this._content.substring(token.start, token.end), this._fromOffset + token.start);\n        }\n      }\n    }\n  }\n\n  _beforeVisit(node: Acorn.ESTree.Node): undefined {\n    if (!node.parent) {\n      return;\n    }\n    let token;\n    while ((token = this._tokenizer.peekToken()) && token.start < node.start) {\n      const token = (this._tokenizer.nextToken() as TokenOrComment);\n      // @ts-ignore Same reason as above about Acorn types and ESTree types\n      const format = this._formatToken(node.parent, token);\n      this._push(token, format);\n    }\n    return;\n  }\n\n  _afterVisit(node: Acorn.ESTree.Node): void {\n    let token;\n    while ((token = this._tokenizer.peekToken()) && token.start < node.end) {\n      const token = (this._tokenizer.nextToken() as TokenOrComment);\n      const format = this._formatToken(node, token);\n      this._push(token, format);\n    }\n    this._push(null, this._finishNode(node));\n  }\n\n  _inForLoopHeader(node: Acorn.ESTree.Node): boolean {\n    const parent = node.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.type === 'ForStatement') {\n      const parentNode = (parent as Acorn.ESTree.ForStatement);\n      return node === parentNode.init || node === parentNode.test || node === parentNode.update;\n    }\n    if (parent.type === 'ForInStatement' || parent.type === 'ForOfStatement') {\n      const parentNode = (parent as Acorn.ESTree.ForInStatement | Acorn.ESTree.ForOfStatement);\n      return node === parentNode.left || node === parentNode.right;\n    }\n    return false;\n  }\n\n  _formatToken(node: Acorn.ESTree.Node, tokenOrComment: TokenOrComment): string {\n    const AT = AcornTokenizer;\n    if (AT.lineComment(tokenOrComment)) {\n      return 'tn';\n    }\n    if (AT.blockComment(tokenOrComment)) {\n      return 'tn';\n    }\n    const token = (tokenOrComment as Acorn.Token);\n    if (node.type === 'ContinueStatement' || node.type === 'BreakStatement') {\n      return node.label && AT.keyword(token) ? 'ts' : 't';\n    }\n    if (node.type === 'Identifier') {\n      return 't';\n    }\n    if (node.type === 'PrivateIdentifier') {\n      return 't';\n    }\n    if (node.type === 'ReturnStatement') {\n      if (AT.punctuator(token, ';')) {\n        return 't';\n      }\n      return node.argument ? 'ts' : 't';\n    }\n    if (node.type === 'AwaitExpression') {\n      if (AT.punctuator(token, ';')) {\n        return 't';\n      }\n      return node.argument ? 'ts' : 't';\n    }\n    if (node.type === 'Property') {\n      if (AT.punctuator(token, ':')) {\n        return 'ts';\n      }\n      return 't';\n    }\n    if (node.type === 'ArrayExpression') {\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n      return 't';\n    }\n    if (node.type === 'LabeledStatement') {\n      if (AT.punctuator(token, ':')) {\n        return 'ts';\n      }\n    } else if (\n        node.type === 'LogicalExpression' || node.type === 'AssignmentExpression' || node.type === 'BinaryExpression') {\n      if (AT.punctuator(token) && !AT.punctuator(token, '()')) {\n        return 'sts';\n      }\n    } else if (node.type === 'ConditionalExpression') {\n      if (AT.punctuator(token, '?:')) {\n        return 'sts';\n      }\n    } else if (node.type === 'VariableDeclarator') {\n      if (AT.punctuator(token, '=')) {\n        return 'sts';\n      }\n    } else if (node.type === 'ObjectPattern') {\n      if (node.parent && node.parent.type === 'VariableDeclarator' && AT.punctuator(token, '{')) {\n        return 'st';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n    } else if (node.type === 'FunctionDeclaration') {\n      if (AT.punctuator(token, ',)')) {\n        return 'ts';\n      }\n    } else if (node.type === 'FunctionExpression') {\n      if (AT.punctuator(token, ',)')) {\n        return 'ts';\n      }\n      if (AT.keyword(token, 'function')) {\n        return node.id ? 'ts' : 't';\n      }\n    } else if (node.type === 'WithStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'SwitchStatement') {\n      if (AT.punctuator(token, '{')) {\n        return 'tn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return 'n<tn';\n      }\n      if (AT.punctuator(token, ')')) {\n        return 'ts';\n      }\n    } else if (node.type === 'SwitchCase') {\n      if (AT.keyword(token, 'case')) {\n        return 'n<ts';\n      }\n      if (AT.keyword(token, 'default')) {\n        return 'n<t';\n      }\n      if (AT.punctuator(token, ':')) {\n        return 'tn>';\n      }\n    } else if (node.type === 'VariableDeclaration') {\n      if (AT.punctuator(token, ',')) {\n        let allVariablesInitialized = true;\n        const declarations = (node.declarations as Acorn.ESTree.Node[]);\n        for (let i = 0; i < declarations.length; ++i) {\n          // @ts-ignore We are doing a subtype check, without properly checking whether\n          // it exists. We can't fix that, unless we use proper typechecking\n          allVariablesInitialized = allVariablesInitialized && Boolean(declarations[i].init);\n        }\n        return !this._inForLoopHeader(node) && allVariablesInitialized ? 'nSSts' : 'ts';\n      }\n    } else if (node.type === 'PropertyDefinition') {\n      if (AT.punctuator(token, '=')) {\n        return 'sts';\n      }\n      if (AT.punctuator(token, ';')) {\n        return 'tn';\n      }\n    } else if (node.type === 'BlockStatement') {\n      if (AT.punctuator(token, '{')) {\n        return node.body.length ? 'tn>' : 't';\n      }\n      if (AT.punctuator(token, '}')) {\n        return node.body.length ? 'n<t' : 't';\n      }\n    } else if (node.type === 'CatchClause') {\n      if (AT.punctuator(token, ')')) {\n        return 'ts';\n      }\n    } else if (node.type === 'ObjectExpression') {\n      if (!node.properties.length) {\n        return 't';\n      }\n      if (AT.punctuator(token, '{')) {\n        return 'tn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return 'n<t';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'tn';\n      }\n    } else if (node.type === 'IfStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.consequent && node.consequent.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n\n      if (AT.keyword(token, 'else')) {\n        const preFormat = node.consequent && node.consequent.type === 'BlockStatement' ? 'st' : 'n<t';\n        let postFormat = 'n>';\n        if (node.alternate && (node.alternate.type === 'BlockStatement' || node.alternate.type === 'IfStatement')) {\n          postFormat = 's';\n        }\n        return preFormat + postFormat;\n      }\n    } else if (node.type === 'CallExpression') {\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n    } else if (node.type === 'SequenceExpression' && AT.punctuator(token, ',')) {\n      return node.parent && node.parent.type === 'SwitchCase' ? 'ts' : 'tn';\n    } else if (node.type === 'ForStatement' || node.type === 'ForOfStatement' || node.type === 'ForInStatement') {\n      if (AT.punctuator(token, ';')) {\n        return 'ts';\n      }\n      if (AT.keyword(token, 'in') || AT.identifier(token, 'of')) {\n        return 'sts';\n      }\n\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'WhileStatement') {\n      if (AT.punctuator(token, ')')) {\n        return node.body && node.body.type === 'BlockStatement' ? 'ts' : 'tn>';\n      }\n    } else if (node.type === 'DoWhileStatement') {\n      const blockBody = node.body && node.body.type === 'BlockStatement';\n      if (AT.keyword(token, 'do')) {\n        return blockBody ? 'ts' : 'tn>';\n      }\n      if (AT.keyword(token, 'while')) {\n        return blockBody ? 'sts' : 'n<ts';\n      }\n      if (AT.punctuator(token, ';')) {\n        return 'tn';\n      }\n    } else if (node.type === 'ClassBody') {\n      if (AT.punctuator(token, '{')) {\n        return 'stn>';\n      }\n      if (AT.punctuator(token, '}')) {\n        return '<ntn';\n      }\n      return 't';\n    } else if (node.type === 'YieldExpression') {\n      return 't';\n    } else if (node.type === 'Super') {\n      return 't';\n    } else if (node.type === 'ImportExpression') {\n      return 't';\n    } else if (node.type === 'ExportAllDeclaration') {\n      if (AT.punctuator(token, '*')) {\n        return 'sts';\n      }\n      return 't';\n    } else if (node.type === 'ExportNamedDeclaration' || node.type === 'ImportDeclaration') {\n      if (AT.punctuator(token, '{')) {\n        return 'st';\n      }\n      if (AT.punctuator(token, ',')) {\n        return 'ts';\n      }\n      if (AT.punctuator(token, '}')) {\n        return node.source ? 'ts' : 't';\n      }\n      if (AT.punctuator(token, '*')) {\n        return 'sts';\n      }\n      return 't';\n    }\n    return AT.keyword(token) && !AT.keyword(token, 'this') ? 'ts' : 't';\n  }\n\n  _finishNode(node: Acorn.ESTree.Node): string {\n    if (node.type === 'WithStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'VariableDeclaration') {\n      if (!this._inForLoopHeader(node)) {\n        return 'n';\n      }\n    } else if (node.type === 'ForStatement' || node.type === 'ForOfStatement' || node.type === 'ForInStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'BlockStatement') {\n      if (node.parent && node.parent.type === 'IfStatement') {\n        const parentNode = (node.parent as Acorn.ESTree.IfStatement);\n        if (parentNode.alternate && parentNode.consequent === node) {\n          return '';\n        }\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'Property') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'VariableDeclarator') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'FunctionExpression' && node.parent.parent &&\n          node.parent.parent.type === 'CallExpression') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'DoWhileStatement') {\n        return '';\n      }\n      if (node.parent && node.parent.type === 'TryStatement') {\n        const parentNode = (node.parent as Acorn.ESTree.TryStatement);\n        if (parentNode.block === node) {\n          return 's';\n        }\n      }\n      if (node.parent && node.parent.type === 'CatchClause') {\n        const parentNode = (node.parent as Acorn.ESTree.CatchClause);\n        // @ts-ignore We are doing a subtype check, without properly checking whether\n        // it exists. We can't fix that, unless we use proper typechecking\n        if (parentNode.parent && parentNode.parent.finalizer) {\n          return 's';\n        }\n      }\n      return 'n';\n    } else if (node.type === 'WhileStatement') {\n      if (node.body && node.body.type !== 'BlockStatement') {\n        return 'n<';\n      }\n    } else if (node.type === 'IfStatement') {\n      if (node.alternate) {\n        if (node.alternate.type !== 'BlockStatement' && node.alternate.type !== 'IfStatement') {\n          return '<';\n        }\n      } else if (node.consequent) {\n        if (node.consequent.type !== 'BlockStatement') {\n          return '<';\n        }\n      }\n    } else if (\n        node.type === 'BreakStatement' || node.type === 'ContinueStatement' || node.type === 'ThrowStatement' ||\n        node.type === 'ReturnStatement' || node.type === 'ExpressionStatement') {\n      return 'n';\n    } else if (\n        node.type === 'ImportDeclaration' || node.type === 'ExportAllDeclaration' ||\n        node.type === 'ExportDefaultDeclaration' || node.type === 'ExportNamedDeclaration') {\n      return 'n';\n    }\n    return '';\n  }\n}\n"]}