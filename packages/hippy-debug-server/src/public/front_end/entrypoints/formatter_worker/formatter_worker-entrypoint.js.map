{"version":3,"file":"formatter_worker-entrypoint.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/formatter_worker-entrypoint.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,0EAA0E,CAAC;AAClF,OAAO,sDAAsD,CAAC;AAC9D,OAAO,sDAAsD,CAAC;AAC9D,OAAO,oEAAoE,CAAC;AAE5E,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,eAAe,MAAM,uBAAuB,CAAC,CAAE,iDAAiD;AAI5G,IAAI,CAAC,SAAS,GAAG,UAAS,KAAmB;IAC3C,MAAM,MAAM,GAAqB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;IACnD,MAAM,MAAM,GAA8D,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;IAC5F,IAAI,CAAC,MAAM,EAAE;QACX,OAAO;KACR;IAED,QAAQ,MAAM,EAAE;QACd;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YAC/G,MAAM;QACR;YACE,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACzE,MAAM;QACR;YACE,eAAe,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1E,MAAM;QACR;YACE,eAAe,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACtF,MAAM;QACR;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACxF,MAAM;QACR;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,8BAA8B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACjG,MAAM;QACR;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACrF,MAAM;QACR;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACvF,MAAM;QACR;YACE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAChF,MAAM;QACR;YACE,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAE,0BAA0B,MAAM,EAAE,CAAC,CAAC;KACpE;AACH,CAAC,CAAC;AAEF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../third_party/codemirror/package/addon/runmode/runmode-standalone.js';\nimport '../../third_party/codemirror/package/mode/css/css.js';\nimport '../../third_party/codemirror/package/mode/xml/xml.js';\nimport '../../third_party/codemirror/package/mode/javascript/javascript.js';\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as FormatterWorker from './formatter_worker.js';  // eslint-disable-line rulesdir/es_modules_import\n\nimport {FormatterActions} from './FormatterActions.js';\n\nself.onmessage = function(event: MessageEvent): void {\n  const method: FormatterActions = event.data.method;\n  const params: {indentString: string, content: string, mimeType: string} = event.data.params;\n  if (!method) {\n    return;\n  }\n\n  switch (method) {\n    case FormatterActions.FORMAT:\n      self.postMessage(FormatterWorker.FormatterWorker.format(params.mimeType, params.content, params.indentString));\n      break;\n    case FormatterActions.PARSE_CSS:\n      FormatterWorker.CSSRuleParser.parseCSS(params.content, self.postMessage);\n      break;\n    case FormatterActions.HTML_OUTLINE:\n      FormatterWorker.HTMLOutline.htmlOutline(params.content, self.postMessage);\n      break;\n    case FormatterActions.JAVASCRIPT_OUTLINE:\n      FormatterWorker.JavaScriptOutline.javaScriptOutline(params.content, self.postMessage);\n      break;\n    case FormatterActions.JAVASCRIPT_IDENTIFIERS:\n      self.postMessage(FormatterWorker.FormatterWorker.javaScriptIdentifiers(params.content));\n      break;\n    case FormatterActions.EVALUATE_JAVASCRIPT_SUBSTRING:\n      self.postMessage(FormatterWorker.FormatterWorker.evaluatableJavaScriptSubstring(params.content));\n      break;\n    case FormatterActions.FIND_LAST_EXPRESSION:\n      self.postMessage(FormatterWorker.FormatterWorker.findLastExpression(params.content));\n      break;\n    case FormatterActions.FIND_LAST_FUNCTION_CALL:\n      self.postMessage(FormatterWorker.FormatterWorker.findLastFunctionCall(params.content));\n      break;\n    case FormatterActions.ARGUMENTS_LIST:\n      self.postMessage(FormatterWorker.FormatterWorker.argumentsList(params.content));\n      break;\n    default:\n      Platform.assertNever(method, `Unsupport method name: ${method}`);\n  }\n};\n\nself.postMessage('workerReady');\n"]}