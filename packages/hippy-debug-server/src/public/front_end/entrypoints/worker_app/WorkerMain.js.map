{"version":3,"file":"WorkerMain.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/worker_app/WorkerMain.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,gBAAgB,MAAM,qDAAqD,CAAC;AACxF,OAAO,KAAK,UAAU,MAAM,2CAA2C,CAAC;AAExE,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,IAAI,EAAE,MAAM;CACb,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,sCAAsC,EAAE,SAAS,CAAC,CAAC;AAC5F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,IAAI,sBAAsC,CAAC;AAE3C,MAAM,OAAO,cAAe,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAa;IACpE,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,sBAAsB,IAAI,QAAQ,EAAE;YACvC,sBAAsB,GAAG,IAAI,cAAc,EAAE,CAAC;SAC/C;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,GAAG;QACP,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;YAC5C,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CACnD,MAAM,EAAE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,UAAU,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;QACjF,IAAI,gBAAgB,CAAC,qBAAqB,CAAC,qBAAqB,EAAE,CAAC;IACrE,CAAC;CACF;AAED,MAAM,CAAC,QAAQ,CAAC,mCAAmC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAE7E,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,kBAAkB,EAAC,EAAE,EAAE;IACvF,gGAAgG;IAChG,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,kBAAkB,EAAE;QACnG,OAAO;KACR;IACD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACpE,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO;KACR;IACD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE;QACnC,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;KAC3E;IACD,aAAa,CAAC,KAAK,EAAE,CAAC;AACxB,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as MobileThrottling from '../../panels/mobile_throttling/mobile_throttling.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\n\nconst UIStrings = {\n  /**\n  *@description Text that refers to the main target.\n  */\n  main: 'Main',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('entrypoints/worker_app/WorkerMain.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet workerMainImplInstance: WorkerMainImpl;\n\nexport class WorkerMainImpl extends Common.ObjectWrapper.ObjectWrapper implements Common.Runnable.Runnable {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): WorkerMainImpl {\n    const {forceNew} = opts;\n    if (!workerMainImplInstance || forceNew) {\n      workerMainImplInstance = new WorkerMainImpl();\n    }\n\n    return workerMainImplInstance;\n  }\n\n  async run(): Promise<void> {\n    SDK.Connections.initMainConnection(async () => {\n      SDK.TargetManager.TargetManager.instance().createTarget(\n          'main', i18nString(UIStrings.main), SDK.Target.Type.ServiceWorker, null);\n    }, Components.TargetDetachedDialog.TargetDetachedDialog.webSocketConnectionLost);\n    new MobileThrottling.NetworkPanelIndicator.NetworkPanelIndicator();\n  }\n}\n\nCommon.Runnable.registerEarlyInitializationRunnable(WorkerMainImpl.instance);\n\nSDK.ChildTargetManager.ChildTargetManager.install(async ({target, waitingForDebugger}) => {\n  // Only pause the new worker if debugging SW - we are going through the pause on start checkbox.\n  if (target.parentTarget() || target.type() !== SDK.Target.Type.ServiceWorker || !waitingForDebugger) {\n    return;\n  }\n  const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n  if (!debuggerModel) {\n    return;\n  }\n  if (!debuggerModel.isReadyToPause()) {\n    await debuggerModel.once(SDK.DebuggerModel.Events.DebuggerIsReadyToPause);\n  }\n  debuggerModel.pause();\n});\n"]}