import type * as Common from '../../core/common/common.js';
import { ContextMenu } from './ContextMenu.js';
import { Constraints } from './Geometry.js';
import { Icon } from './Icon.js';
import { Toolbar } from './Toolbar.js';
import type { Widget } from './Widget.js';
import { VBox } from './Widget.js';
export declare class TabbedPane extends VBox {
    _headerElement: HTMLElement;
    _headerContentsElement: HTMLElement;
    _tabSlider: HTMLDivElement;
    _tabsElement: HTMLElement;
    _contentElement: HTMLElement;
    _tabs: TabbedPaneTab[];
    _tabsHistory: TabbedPaneTab[];
    _tabsById: Map<string, TabbedPaneTab>;
    _currentTabLocked: boolean;
    _autoSelectFirstItemOnShow: boolean;
    _triggerDropDownTimeout: number | null;
    _dropDownButton: HTMLDivElement;
    _currentDevicePixelRatio: number;
    _shrinkableTabs?: boolean;
    _verticalTabLayout?: boolean;
    _closeableTabs?: boolean;
    _delegate?: TabbedPaneTabDelegate;
    _currentTab?: TabbedPaneTab;
    _sliderEnabled?: boolean;
    _placeholderElement?: Element;
    _focusedPlaceholderElement?: Element;
    _placeholderContainerElement?: HTMLElement;
    _lastSelectedOverflowTab?: TabbedPaneTab;
    _overflowDisabled?: boolean;
    _measuredDropDownButtonWidth?: number;
    _leftToolbar?: Toolbar;
    _rightToolbar?: Toolbar;
    _allowTabReorder?: boolean;
    _automaticReorder?: boolean;
    constructor();
    setAccessibleName(name: string): void;
    setCurrentTabLocked(locked: boolean): void;
    setAutoSelectFirstItemOnShow(autoSelect: boolean): void;
    get visibleView(): Widget | null;
    tabIds(): string[];
    tabIndex(tabId: string): number;
    tabViews(): Widget[];
    tabView(tabId: string): Widget | null;
    get selectedTabId(): string | null;
    setShrinkableTabs(shrinkableTabs: boolean): void;
    makeVerticalTabLayout(): void;
    setCloseableTabs(closeableTabs: boolean): void;
    focus(): void;
    focusSelectedTabHeader(): void;
    headerElement(): Element;
    isTabCloseable(id: string): boolean;
    setTabDelegate(delegate: TabbedPaneTabDelegate): void;
    appendTab(id: string, tabTitle: string, view: Widget, tabTooltip?: string, userGesture?: boolean, isCloseable?: boolean, index?: number): void;
    closeTab(id: string, userGesture?: boolean): void;
    closeTabs(ids: string[], userGesture?: boolean): void;
    _innerCloseTab(id: string, userGesture?: boolean): true | undefined;
    hasTab(tabId: string): boolean;
    otherTabs(id: string): string[];
    _tabsToTheRight(id: string): string[];
    _viewHasFocus(): boolean;
    selectTab(id: string, userGesture?: boolean, forceFocus?: boolean): boolean;
    selectNextTab(): void;
    selectPrevTab(): void;
    lastOpenedTabIds(tabsCount: number): string[];
    setTabIcon(id: string, icon: Icon | null): void;
    setTabEnabled(id: string, enabled: boolean): void;
    toggleTabClass(id: string, className: string, force?: boolean): void;
    _zoomChanged(_event: Common.EventTarget.EventTargetEvent): void;
    _clearMeasuredWidths(): void;
    changeTabTitle(id: string, tabTitle: string, tabTooltip?: string): void;
    changeTabView(id: string, view: Widget): void;
    onResize(): void;
    headerResized(): void;
    wasShown(): void;
    makeTabSlider(): void;
    _setTabSlider(enable: boolean): void;
    calculateConstraints(): Constraints;
    _updateTabElements(): void;
    setPlaceholderElement(element: Element, focusedElement?: Element): void;
    waitForTabElementUpdate(): Promise<void>;
    _innerUpdateTabElements(): void;
    _showTabElement(index: number, tab: TabbedPaneTab): void;
    _hideTabElement(tab: TabbedPaneTab): void;
    _createDropDownButton(): HTMLDivElement;
    _dropDownClicked(ev: Event): void;
    _dropDownKeydown(event: Event): void;
    _dropDownMenuItemSelected(tab: TabbedPaneTab): void;
    _totalWidth(): number;
    _numberOfTabsShown(): number;
    disableOverflowMenu(): void;
    _updateTabsDropDown(): void;
    _maybeShowDropDown(hasMoreTabs: boolean): void;
    _measureDropDownButton(): void;
    _updateWidths(): void;
    _measureWidths(): number[];
    _calculateMaxWidth(measuredWidths: number[], totalWidth: number): number;
    _tabsToShowIndexes(tabsOrdered: TabbedPaneTab[], tabsHistory: TabbedPaneTab[], totalWidth: number, measuredDropDownButtonWidth: number): number[];
    _hideCurrentTab(): void;
    _showTab(tab: TabbedPaneTab): void;
    _updateTabSlider(): void;
    _hideTab(tab: TabbedPaneTab): void;
    elementsToRestoreScrollPositionsFor(): Element[];
    _insertBefore(tab: TabbedPaneTab, index: number): void;
    leftToolbar(): Toolbar;
    rightToolbar(): Toolbar;
    setAllowTabReorder(allow: boolean, automatic?: boolean): void;
    _keyDown(ev: Event): void;
}
export interface EventData {
    prevTabId?: string;
    tabId: string;
    view?: Widget;
    isUserGesture?: boolean;
}
export declare enum Events {
    TabInvoked = "TabInvoked",
    TabSelected = "TabSelected",
    TabClosed = "TabClosed",
    TabOrderChanged = "TabOrderChanged"
}
export declare class TabbedPaneTab {
    _closeable: boolean;
    _tabbedPane: TabbedPane;
    _id: string;
    _title: string;
    _tooltip: string | undefined;
    _view: Widget;
    _shown: boolean;
    _measuredWidth: number | undefined;
    _tabElement: HTMLElement | undefined;
    _iconContainer: Element | null;
    _icon?: Icon | null;
    _width?: number;
    _delegate?: TabbedPaneTabDelegate;
    _titleElement?: HTMLElement;
    _dragStartX?: number;
    constructor(tabbedPane: TabbedPane, id: string, title: string, closeable: boolean, view: Widget, tooltip?: string);
    get id(): string;
    get title(): string;
    set title(title: string);
    isCloseable(): boolean;
    _setIcon(icon: Icon | null): void;
    _toggleClass(className: string, force?: boolean): boolean;
    get view(): Widget;
    set view(view: Widget);
    get tooltip(): string | undefined;
    set tooltip(tooltip: string | undefined);
    get tabElement(): HTMLElement;
    width(): number;
    setWidth(width: number): void;
    setDelegate(delegate: TabbedPaneTabDelegate): void;
    _createIconElement(tabElement: Element, titleElement: Element, measuring: boolean): void;
    _createTabElement(measuring: boolean): HTMLElement;
    _tabClicked(ev: Event): void;
    _tabMouseDown(ev: Event): void;
    _tabMouseUp(ev: Event): void;
    _closeTabs(ids: string[]): void;
    _tabContextMenu(event: Event): void;
    _startTabDragging(ev: Event): boolean;
    _tabDragging(ev: Event): void;
    _endTabDragging(_event: Event): void;
}
export interface TabbedPaneTabDelegate {
    closeTabs(tabbedPane: TabbedPane, ids: string[]): void;
    onContextMenu(tabId: string, contextMenu: ContextMenu): void;
}
