{"version":3,"file":"ThrottledWidget.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ThrottledWidget.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,EAAC,IAAI,EAAC,MAAM,aAAa,CAAC;AAEjC,MAAM,OAAO,eAAgB,SAAQ,IAAI;IACvC,gBAAgB,CAA6B;IAC7C,kBAAkB,CAAU;IAE5B,YAAY,cAAwB,EAAE,OAAgB;QACpD,KAAK,CAAC,cAAc,CAAC,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC9F,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAClC,CAAC;IAES,QAAQ;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,kBAAkB,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QAC5C,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE;YAClC,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;gBACpB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;aACxB;YACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../core/common/common.js';\nimport {VBox} from './Widget.js';\n\nexport class ThrottledWidget extends VBox {\n  _updateThrottler: Common.Throttler.Throttler;\n  _updateWhenVisible: boolean;\n\n  constructor(isWebComponent?: boolean, timeout?: number) {\n    super(isWebComponent);\n    this._updateThrottler = new Common.Throttler.Throttler(timeout === undefined ? 100 : timeout);\n    this._updateWhenVisible = false;\n  }\n\n  protected doUpdate(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  update(): void {\n    this._updateWhenVisible = !this.isShowing();\n    if (this._updateWhenVisible) {\n      return;\n    }\n    this._updateThrottler.schedule(() => {\n      if (this.isShowing()) {\n        return this.doUpdate();\n      }\n      this._updateWhenVisible = true;\n      return Promise.resolve();\n    });\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    if (this._updateWhenVisible) {\n      this.update();\n    }\n  }\n}\n"]}