{"version":3,"file":"SyntaxHighlighter.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/text_editor/SyntaxHighlighter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,SAAS,MAAM,6CAA6C,CAAC;AACzE,OAAO,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAEtC,MAAM,OAAO,iBAAiB;IAC5B,SAAS,CAAS;IAClB,qBAAqB,CAAU;IAE/B,YAAY,QAAgB,EAAE,oBAA6B;QACzD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;IACpD,CAAC;IAED,UAAU,CAAC,OAAe,EAAE,SAAiB;QAC3C,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpD,IAAI,IAAI,CAAC,qBAAqB,IAAI,SAAS,KAAK,YAAY,EAAE;YAC5D,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;SAC/D;QACD,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,mBAAmB,CAAC,IAAa;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnE,IAAI,cAAsB,CAAC;QAC3B,IAAI,IAAY,CAAC;QAEjB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChB,cAAc,GAAG,CAAC,CAAC;YACnB,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACxC,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,EAAE;gBAChC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9D,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;aAC7C;YACD,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACxC;SACF;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAEzB,SAAS,YAAY,CACQ,KAAa,EAAE,SAAsB,EAAE,MAAc,EAAE,SAAiB;YACnG,IAAI,CAAC,SAAS,EAAE;gBACd,OAAO;aACR;YAED,IAAI,MAAM,GAAG,cAAc,EAAE;gBAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;gBACzD,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;aAC7C;YACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;YACpD,cAAc,GAAG,SAAS,CAAC;QAC7B,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../legacy.js';\n\nexport class SyntaxHighlighter {\n  _mimeType: string;\n  _stripExtraWhitespace: boolean;\n\n  constructor(mimeType: string, stripExtraWhitespace: boolean) {\n    this._mimeType = mimeType;\n    this._stripExtraWhitespace = stripExtraWhitespace;\n  }\n\n  createSpan(content: string, className: string): Element {\n    const span = document.createElement('span');\n    span.className = className.replace(/\\S+/g, 'cm-$&');\n    if (this._stripExtraWhitespace && className !== 'whitespace') {\n      content = content.replace(/^[\\n\\r]*/, '').replace(/\\s*$/, '');\n    }\n    UI.UIUtils.createTextChild(span, content);\n    return span;\n  }\n\n  syntaxHighlightNode(node: Element): Promise<void> {\n    const lines = node.textContent ? node.textContent.split('\\n') : [];\n    let plainTextStart: number;\n    let line: string;\n\n    node.removeChildren();\n    const tokenize = TextUtils.CodeMirrorUtils.TokenizerFactory.instance().createTokenizer(this._mimeType);\n    for (let i = 0; i < lines.length; ++i) {\n      line = lines[i];\n      plainTextStart = 0;\n      tokenize(line, processToken.bind(this));\n      if (plainTextStart < line.length) {\n        const plainText = line.substring(plainTextStart, line.length);\n        UI.UIUtils.createTextChild(node, plainText);\n      }\n      if (i < lines.length - 1) {\n        UI.UIUtils.createTextChild(node, '\\n');\n      }\n    }\n    return Promise.resolve();\n\n    function processToken(\n        this: SyntaxHighlighter, token: string, tokenType: string|null, column: number, newColumn: number): void {\n      if (!tokenType) {\n        return;\n      }\n\n      if (column > plainTextStart) {\n        const plainText = line.substring(plainTextStart, column);\n        UI.UIUtils.createTextChild(node, plainText);\n      }\n      node.appendChild(this.createSpan(token, tokenType));\n      plainTextStart = newColumn;\n    }\n  }\n}\n"]}