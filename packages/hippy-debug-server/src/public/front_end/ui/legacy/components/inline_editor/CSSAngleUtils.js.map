{"version":3,"file":"CSSAngleUtils.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSAngleUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as UI from '../../legacy.js';\n\nexport const CSSAngleRegex = /(?<value>[+-]?\\d*\\.?\\d+)(?<unit>deg|grad|rad|turn)/;\n\nexport const enum AngleUnit {\n  Deg = 'deg',\n  Grad = 'grad',\n  Rad = 'rad',\n  Turn = 'turn',\n}\n\nexport interface Angle {\n  value: number;\n  unit: AngleUnit;\n}\n\nexport const parseText = (text: string): Angle|null => {\n  const result = text.match(CSSAngleRegex);\n  if (!result || !result.groups) {\n    return null;\n  }\n\n  return {\n    value: Number(result.groups.value),\n    unit: result.groups.unit as AngleUnit,\n  };\n};\n\nexport const getAngleFromRadians = (rad: number, targetUnit: AngleUnit): Angle => {\n  let value = rad;\n  switch (targetUnit) {\n    case AngleUnit.Grad:\n      value = UI.Geometry.radiansToGradians(rad);\n      break;\n    case AngleUnit.Deg:\n      value = UI.Geometry.radiansToDegrees(rad);\n      break;\n    case AngleUnit.Turn:\n      value = UI.Geometry.radiansToTurns(rad);\n      break;\n  }\n\n  return {\n    value,\n    unit: targetUnit,\n  };\n};\n\nexport const getRadiansFromAngle = (angle: Angle): number => {\n  switch (angle.unit) {\n    case AngleUnit.Deg:\n      return UI.Geometry.degreesToRadians(angle.value);\n    case AngleUnit.Grad:\n      return UI.Geometry.gradiansToRadians(angle.value);\n    case AngleUnit.Turn:\n      return UI.Geometry.turnsToRadians(angle.value);\n  }\n\n  return angle.value;\n};\n\nexport const get2DTranslationsForAngle = (angle: Angle, radius: number): {translateX: number, translateY: number} => {\n  const radian = getRadiansFromAngle(angle);\n  return {\n    translateX: Math.sin(radian) * radius,\n    translateY: -Math.cos(radian) * radius,\n  };\n};\n\nexport const roundAngleByUnit = (angle: Angle): Angle => {\n  let roundedValue = angle.value;\n\n  switch (angle.unit) {\n    case AngleUnit.Deg:\n    case AngleUnit.Grad:\n      // Round to nearest whole unit.\n      roundedValue = Math.round(angle.value);\n      break;\n    case AngleUnit.Rad:\n      // Allow up to 4 decimals.\n      roundedValue = Math.round(angle.value * 10000) / 10000;\n      break;\n    case AngleUnit.Turn:\n      // Allow up to 2 decimals.\n      roundedValue = Math.round(angle.value * 100) / 100;\n      break;\n    default:\n      Platform.assertNever(angle.unit, `Unknown angle unit: ${angle.unit}`);\n  }\n\n  return {\n    value: roundedValue,\n    unit: angle.unit,\n  };\n};\n\nexport const getNextUnit = (currentUnit: AngleUnit): AngleUnit => {\n  switch (currentUnit) {\n    case AngleUnit.Deg:\n      return AngleUnit.Grad;\n    case AngleUnit.Grad:\n      return AngleUnit.Rad;\n    case AngleUnit.Rad:\n      return AngleUnit.Turn;\n    default:\n      return AngleUnit.Deg;\n  }\n};\n\nexport const convertAngleUnit = (angle: Angle, newUnit: AngleUnit): Angle => {\n  if (angle.unit === newUnit) {\n    return angle;\n  }\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian, newUnit);\n};\n\nexport const getNewAngleFromEvent = (angle: Angle, event: MouseEvent|KeyboardEvent): Angle|undefined => {\n  const direction = UI.UIUtils.getValueModificationDirection(event);\n  if (direction === null) {\n    return;\n  }\n  let diff = direction === 'Up' ? Math.PI / 180 : -Math.PI / 180;\n  if (event.shiftKey) {\n    diff *= 10;\n  }\n\n  const radian = getRadiansFromAngle(angle);\n  return getAngleFromRadians(radian + diff, angle.unit);\n};\n"]}