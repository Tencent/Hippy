{"version":3,"file":"LiveHeapProfile.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/perf_ui/LiveHeapProfile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../../../core/common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Host from '../../../../core/host/host.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\n\nimport {Memory} from './LineLevelProfile.js';\n\nlet liveHeapProfileInstance: LiveHeapProfile;\nexport class LiveHeapProfile implements Common.Runnable.Runnable,\n                                        SDK.TargetManager.SDKModelObserver<SDK.HeapProfilerModel.HeapProfilerModel> {\n  _running: boolean;\n  _sessionId: number;\n  _loadEventCallback: (arg0?: Function|null) => void;\n  _setting: Common.Settings.Setting<boolean>;\n\n  private constructor() {\n    this._running = false;\n    this._sessionId = 0;\n    this._loadEventCallback = (): void => {};\n    this._setting = Common.Settings.Settings.instance().moduleSetting('memoryLiveHeapProfile');\n    this._setting.addChangeListener(event => event.data ? this._startProfiling() : this._stopProfiling());\n    if (this._setting.get()) {\n      this._startProfiling();\n    }\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): LiveHeapProfile {\n    const {forceNew} = opts;\n    if (!liveHeapProfileInstance || forceNew) {\n      liveHeapProfileInstance = new LiveHeapProfile();\n    }\n\n    return liveHeapProfileInstance;\n  }\n\n  run(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  modelAdded(model: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    model.startSampling(1e4);\n  }\n\n  modelRemoved(_model: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    // Cannot do much when the model has already been removed.\n  }\n\n  async _startProfiling(): Promise<void> {\n    if (this._running) {\n      return;\n    }\n    this._running = true;\n    const sessionId = this._sessionId;\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this._loadEventFired, this);\n\n    do {\n      const models = SDK.TargetManager.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel);\n      const profiles = await Promise.all(models.map(model => model.getSamplingProfile()));\n      if (sessionId !== this._sessionId) {\n        break;\n      }\n      Memory.instance().reset();\n      for (let i = 0; i < profiles.length; ++i) {\n        const profile = profiles[i];\n        if (!profile) {\n          continue;\n        }\n\n        Memory.instance().appendHeapProfile(profile, models[i].target());\n      }\n      await Promise.race([\n        new Promise(r => setTimeout(r, Host.InspectorFrontendHost.isUnderTest() ? 10 : 5000)),\n        new Promise(r => {\n          this._loadEventCallback = r;\n        }),\n      ]);\n    } while (sessionId === this._sessionId);\n\n    SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this._loadEventFired, this);\n    for (const model of SDK.TargetManager.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel)) {\n      model.stopSampling();\n    }\n    Memory.instance().reset();\n  }\n\n  _stopProfiling(): void {\n    if (!this._running) {\n      return;\n    }\n    this._running = false;\n    this._sessionId++;\n  }\n\n  _loadEventFired(): void {\n    this._loadEventCallback();\n  }\n}\n"]}