{"version":3,"file":"SortableDataGrid.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/data_grid/SortableDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Platform from '../../../../core/platform/platform.js';\n\nimport type {ColumnDescriptor, DataGridData, Parameters} from './DataGrid.js';\nimport {Events} from './DataGrid.js';\nimport {ViewportDataGrid, ViewportDataGridNode} from './ViewportDataGrid.js';\n\nexport class SortableDataGrid<T> extends ViewportDataGrid<SortableDataGridNode<T>> {\n  _sortingFunction: <T>(a: SortableDataGridNode<T>, b: SortableDataGridNode<T>) => number;\n  constructor(dataGridParameters: Parameters) {\n    super(dataGridParameters);\n    this._sortingFunction = SortableDataGrid.TrivialComparator;\n    this.setRootNode((new SortableDataGridNode() as SortableDataGridNode<T>));\n  }\n\n  static TrivialComparator<T>(_a: SortableDataGridNode<T>, _b: SortableDataGridNode<T>): number {\n    return 0;\n  }\n\n  static NumericComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aNumber = Number(aValue instanceof Node ? aValue.textContent : aValue);\n    const bNumber = Number(bValue instanceof Node ? bValue.textContent : bValue);\n    return aNumber < bNumber ? -1 : (aNumber > bNumber ? 1 : 0);\n  }\n\n  static StringComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aString = aValue instanceof Node ? aValue.textContent : String(aValue);\n    const bString = bValue instanceof Node ? bValue.textContent : String(bValue);\n    if (!aString || !bString) {\n      return 0;\n    }\n    return aString < bString ? -1 : (aString > bString ? 1 : 0);\n  }\n\n  static Comparator<T>(\n      comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean,\n      a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    return reverseMode ? comparator(b, a) : comparator(a, b);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static create<T>(columnNames: string[], values: any[], displayName: string):\n      SortableDataGrid<SortableDataGridNode<T>>|null {\n    const numColumns = columnNames.length;\n    if (!numColumns) {\n      return null;\n    }\n\n    const columns = ([] as ColumnDescriptor[]);\n    for (let i = 0; i < columnNames.length; ++i) {\n      const id = String(i);\n      columns.push(({id, title: columnNames[i], sortable: true} as ColumnDescriptor));\n    }\n\n    const nodes = [];\n    for (let i = 0; i < values.length / numColumns; ++i) {\n      const data: DataGridData = {};\n      for (let j = 0; j < columnNames.length; ++j) {\n        data[j] = values[numColumns * i + j];\n      }\n\n      const node = new SortableDataGridNode(data);\n      node.selectable = false;\n      nodes.push(node);\n    }\n\n    const dataGrid = new SortableDataGrid(({displayName, columns} as Parameters));\n    const length = nodes.length;\n    const rootNode = dataGrid.rootNode();\n    for (let i = 0; i < length; ++i) {\n      rootNode.appendChild(nodes[i]);\n    }\n\n    dataGrid.addEventListener(Events.SortingChanged, sortDataGrid);\n\n    function sortDataGrid(): void {\n      const nodes = dataGrid.rootNode().children;\n      const sortColumnId = dataGrid.sortColumnId();\n      if (!sortColumnId) {\n        return;\n      }\n\n      let columnIsNumeric = true;\n      for (let i = 0; i < nodes.length; i++) {\n        const value = nodes[i].data[sortColumnId];\n        if (isNaN(value instanceof Node ? value.textContent : value)) {\n          columnIsNumeric = false;\n          break;\n        }\n      }\n\n      const comparator = columnIsNumeric ? SortableDataGrid.NumericComparator : SortableDataGrid.StringComparator;\n      dataGrid.sortNodes(comparator.bind(null, sortColumnId), !dataGrid.isSortOrderAscending());\n    }\n    return dataGrid;\n  }\n\n  insertChild(node: SortableDataGridNode<T>): void {\n    const root = (this.rootNode() as SortableDataGridNode<T>);\n    root.insertChildOrdered(node);\n  }\n\n  sortNodes(comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean):\n      void {\n    this._sortingFunction = SortableDataGrid.Comparator.bind(null, comparator, reverseMode);\n    this.rootNode().recalculateSiblings(0);\n    (this.rootNode() as SortableDataGridNode<T>)._sortChildren();\n    this.scheduleUpdateStructure();\n  }\n}\n\nexport class SortableDataGridNode<T> extends ViewportDataGridNode<SortableDataGridNode<T>> {\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    super(data, hasChildren);\n  }\n\n  insertChildOrdered(node: SortableDataGridNode<T>): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (dataGrid) {\n      this.insertChild(\n          node,\n          Platform.ArrayUtilities.upperBound(\n              (this.children as SortableDataGridNode<T>[]), node, dataGrid._sortingFunction));\n    }\n  }\n\n  _sortChildren(): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (!dataGrid) {\n      return;\n    }\n    (this.children as SortableDataGridNode<T>[]).sort(dataGrid._sortingFunction);\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child.recalculateSiblings(i);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child._sortChildren();\n    }\n  }\n}\n"]}