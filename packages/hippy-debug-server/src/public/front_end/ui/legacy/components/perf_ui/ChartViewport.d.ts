import * as UI from '../../legacy.js';
export interface ChartViewportDelegate {
    windowChanged(startTime: number, endTime: number, animate: boolean): void;
    updateRangeSelection(startTime: number, endTime: number): void;
    setSize(width: number, height: number): void;
    update(): void;
}
export declare class ChartViewport extends UI.Widget.VBox {
    _delegate: ChartViewportDelegate;
    viewportElement: HTMLElement;
    _alwaysShowVerticalScroll: boolean;
    _rangeSelectionEnabled: boolean;
    _vScrollElement: HTMLElement;
    _vScrollContent: HTMLElement;
    _selectionOverlay: HTMLElement;
    _selectedTimeSpanLabel: HTMLElement;
    _cursorElement: HTMLElement;
    _isDragging: boolean;
    _totalHeight: number;
    _offsetHeight: number;
    _scrollTop: number;
    _rangeSelectionStart: number | null;
    _rangeSelectionEnd: number | null;
    _dragStartPointX: number;
    _dragStartPointY: number;
    _dragStartScrollTop: number;
    _visibleLeftTime: number;
    _visibleRightTime: number;
    _offsetWidth: number;
    _targetLeftTime: number;
    _targetRightTime: number;
    _selectionOffsetShiftX: number;
    _selectionOffsetShiftY: number;
    _selectionStartX: number | null;
    _lastMouseOffsetX: number;
    _minimumBoundary: number;
    _totalTime: number;
    _updateTimerId?: number;
    _cancelWindowTimesAnimation?: (() => void) | null;
    constructor(delegate: ChartViewportDelegate);
    alwaysShowVerticalScroll(): void;
    disableRangeSelection(): void;
    isDragging(): boolean;
    elementsToRestoreScrollPositionsFor(): Element[];
    _updateScrollBar(): void;
    onResize(): void;
    reset(): void;
    _updateContentElementSize(): void;
    setContentHeight(totalHeight: number): void;
    setScrollOffset(offset: number, height?: number): void;
    scrollOffset(): number;
    chartHeight(): number;
    setBoundaries(zeroTime: number, totalTime: number): void;
    _onMouseWheel(e: Event): void;
    _startDragging(event: MouseEvent): boolean;
    _dragging(event: MouseEvent): void;
    _endDragging(): void;
    _startRangeSelection(event: MouseEvent): boolean;
    _endRangeSelection(): void;
    hideRangeSelection(): void;
    setRangeSelection(startTime: number, endTime: number): void;
    onClick(event: Event): void;
    _rangeSelectionDragging(event: MouseEvent): void;
    _updateRangeSelectionOverlay(): void;
    _onScroll(): void;
    _onMouseOut(): void;
    _updateCursorPosition(e: Event): void;
    pixelToTime(x: number): number;
    pixelToTimeOffset(x: number): number;
    timeToPosition(time: number): number;
    timeToPixel(): number;
    _showCursor(visible: boolean): void;
    _onChartKeyDown(e: Event): void;
    _onChartKeyUp(e: Event): void;
    _handleZoomPanKeys(e: Event): void;
    _handleZoomGesture(zoom: number): void;
    _handlePanGesture(offset: number, animate?: boolean): void;
    _requestWindowTimes(bounds: {
        left: number;
        right: number;
    }, animate: boolean): void;
    scheduleUpdate(): void;
    _update(): void;
    setWindowTimes(startTime: number, endTime: number, animate?: boolean): void;
    windowLeftTime(): number;
    windowRightTime(): number;
}
