{"version":3,"file":"ContrastInfo.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastInfo.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Common from '../../../../core/common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper {\n  _isNull: boolean;\n  _contrastRatio: number|null;\n  _contrastRatioAPCA: number|null;\n  _contrastRatioThresholds: {\n    [x: string]: number,\n  }|null;\n  _contrastRationAPCAThreshold: number|null;\n  _fgColor: Common.Color.Color|null;\n  _bgColor: Common.Color.Color|null;\n  _colorFormat!: string|undefined;\n  constructor(contrastInfo: ContrastInfoType|null) {\n    super();\n    this._isNull = true;\n    this._contrastRatio = null;\n    this._contrastRatioAPCA = null;\n    this._contrastRatioThresholds = null;\n    this._contrastRationAPCAThreshold = 0;\n    this._fgColor = null;\n    this._bgColor = null;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight || !contrastInfo.backgroundColors ||\n        contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n\n    this._isNull = false;\n    this._contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this._contrastRationAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.Color.parse(bgColorText);\n    if (bgColor) {\n      this._setBgColorInternal(bgColor);\n    }\n  }\n\n  isNull(): boolean {\n    return this._isNull;\n  }\n\n  setColor(fgColor: Common.Color.Color, colorFormat?: string): void {\n    this._fgColor = fgColor;\n    this._colorFormat = colorFormat;\n    this._updateContrastRatio();\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  colorFormat(): string|undefined {\n    return this._colorFormat;\n  }\n\n  color(): Common.Color.Color|null {\n    return this._fgColor;\n  }\n\n  contrastRatio(): number|null {\n    return this._contrastRatio;\n  }\n\n  contrastRatioAPCA(): number|null {\n    return this._contrastRatioAPCA;\n  }\n\n  contrastRatioAPCAThreshold(): number|null {\n    return this._contrastRationAPCAThreshold;\n  }\n\n  setBgColor(bgColor: Common.Color.Color): void {\n    this._setBgColorInternal(bgColor);\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  _setBgColorInternal(bgColor: Common.Color.Color): void {\n    this._bgColor = bgColor;\n\n    if (!this._fgColor) {\n      return;\n    }\n\n    const fgRGBA = this._fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      const blendedRGBA: number[] = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this._bgColor = new Common.Color.Color(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this._contrastRatio = Common.ColorUtils.contrastRatio(fgRGBA, this._bgColor.rgba());\n    this._contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this._fgColor.rgba(), this._bgColor.rgba());\n  }\n\n  bgColor(): Common.Color.Color|null {\n    return this._bgColor;\n  }\n\n  _updateContrastRatio(): void {\n    if (!this._bgColor || !this._fgColor) {\n      return;\n    }\n    this._contrastRatio = Common.ColorUtils.contrastRatio(this._fgColor.rgba(), this._bgColor.rgba());\n    this._contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this._fgColor.rgba(), this._bgColor.rgba());\n  }\n\n  contrastRatioThreshold(level: string): number|null {\n    if (!this._contrastRatioThresholds) {\n      return null;\n    }\n    return this._contrastRatioThresholds[level];\n  }\n}\n\nexport const enum Events {\n  ContrastInfoUpdated = 'ContrastInfoUpdated',\n}\n\nexport interface ContrastInfoType {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"]}