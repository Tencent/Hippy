import * as Common from '../../../../core/common/common.js';
import * as TextUtils from '../../../../models/text_utils/text_utils.js';
import * as UI from '../../legacy.js';
import type { CodeMirrorTextEditor } from './CodeMirrorTextEditor.js';
export declare class TextEditorAutocompleteController implements UI.SuggestBox.SuggestBoxDelegate {
    _textEditor: CodeMirrorTextEditor;
    _codeMirror: any;
    _config: UI.TextEditor.AutocompleteConfig;
    _initialized: boolean;
    _mouseDown: () => void;
    _lastHintText: string;
    _suggestBox: UI.SuggestBox.SuggestBox | null;
    _currentSuggestion: UI.SuggestBox.Suggestion | null;
    _hintElement: HTMLSpanElement;
    _tooltipGlassPane: UI.GlassPane.GlassPane;
    _tooltipElement: HTMLDivElement;
    _queryRange: TextUtils.TextRange.TextRange | null;
    _dictionary?: Common.TextDictionary.TextDictionary;
    _updatedLines?: any;
    _hintMarker?: any | null;
    _anchorBox?: AnchorBox | null;
    constructor(textEditor: CodeMirrorTextEditor, codeMirror: any, config: UI.TextEditor.AutocompleteConfig);
    _initializeIfNeeded(): void;
    dispose(): void;
    _beforeChange(codeMirror: typeof CodeMirror, changeObject: any): void;
    _addWordsFromText(text: string): void;
    _removeWordsFromText(text: string): void;
    _substituteRange(lineNumber: number, columnNumber: number): TextUtils.TextRange.TextRange | null;
    _wordsWithQuery(queryRange: TextUtils.TextRange.TextRange, substituteRange: TextUtils.TextRange.TextRange, force?: boolean): Promise<UI.SuggestBox.Suggestions>;
    _changes(codeMirror: typeof CodeMirror, changes: any[]): void;
    _blur(): void;
    _validateSelectionsContexts(mainSelection: TextUtils.TextRange.TextRange): boolean;
    autocomplete(force?: boolean): void;
    _setHint(hint: string): void;
    _clearHint(): void;
    _onSuggestionsShownForTest(_suggestions: UI.SuggestBox.Suggestions): void;
    _onSuggestionsHiddenForTest(): void;
    clearAutocomplete(): void;
    _hideSuggestBox(): void;
    keyDown(event: KeyboardEvent): boolean;
    _isCursorAtEndOfLine(): boolean;
    applySuggestion(suggestion: UI.SuggestBox.Suggestion | null, _isIntermediateSuggestion?: boolean): void;
    acceptSuggestion(): void;
    ariaControlledBy(): Element;
    textWithCurrentSuggestion(): string;
    _onScroll(): void;
    _updateTooltip(): Promise<void>;
    _onCursorActivity(): void;
    _onCursorActivityHandledForTest(): void;
    _updateAnchorBox(): void;
    static readonly HintBookmark: unique symbol;
}
