{"version":3,"file":"ActionRegistry.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ActionRegistry.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,6BAA6B,EAAC,MAAM,yBAAyB,CAAC,CAAU,qCAAqC;AACrH,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC,CAA2C,qCAAqC;AAErH,IAAI,sBAAgD,CAAC;AAErD,MAAM,OAAO,cAAc;IACzB,YAAY,CAAsB;IAClC;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,sBAAsB,IAAI,QAAQ,EAAE;YACvC,sBAAsB,GAAG,IAAI,cAAc,EAAE,CAAC;SAC/C;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,sBAAsB,GAAG,SAAS,CAAC;IACrC,CAAC;IAED,gBAAgB;QACd,KAAK,MAAM,MAAM,IAAI,6BAA6B,EAAE,EAAE;YACpD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE;gBAC5B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;SACF;IACH,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnF,CAAC;IAED,OAAO;QACL,OAAO,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,iBAAiB,CAAC,SAAmB,EAAE,OAAgB;QACrD,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;gBAC9B,IAAI,gCAAgC,CAAE,MAAiB,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE;oBAC3E,iBAAiB,CAAC,IAAI,CAAE,MAAiB,CAAC,CAAC;iBAC5C;aACF;SACF;QACD,OAAO,iBAAiB,CAAC;QAEzB,SAAS,gCAAgC,CAAC,MAAc,EAAE,mBAAiC;YACzF,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YAC3C,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC5C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,mBAAmB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAChF,IAAI,UAAU,EAAE;oBACd,OAAO,IAAI,CAAC;iBACb;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAgB;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;IACjD,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type {Action} from './ActionRegistration.js';\nimport {getRegisteredActionExtensions} from './ActionRegistration.js';          // eslint-disable-line no-unused-vars\nimport {Context} from './Context.js';                                           // eslint-disable-line no-unused-vars\n\nlet actionRegistryInstance: ActionRegistry|undefined;\n\nexport class ActionRegistry {\n  _actionsById: Map<string, Action>;\n  private constructor() {\n    this._actionsById = new Map();\n    this._registerActions();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionRegistry {\n    const {forceNew} = opts;\n    if (!actionRegistryInstance || forceNew) {\n      actionRegistryInstance = new ActionRegistry();\n    }\n\n    return actionRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    actionRegistryInstance = undefined;\n  }\n\n  _registerActions(): void {\n    for (const action of getRegisteredActionExtensions()) {\n      this._actionsById.set(action.id(), action);\n      if (!action.canInstantiate()) {\n        action.setEnabled(false);\n      }\n    }\n  }\n\n  availableActions(): Action[] {\n    return this.applicableActions([...this._actionsById.keys()], Context.instance());\n  }\n\n  actions(): Action[] {\n    return [...this._actionsById.values()];\n  }\n\n  applicableActions(actionIds: string[], context: Context): Action[] {\n    const applicableActions: Action[] = [];\n    for (const actionId of actionIds) {\n      const action = this._actionsById.get(actionId);\n      if (action && action.enabled()) {\n        if (isActionApplicableToContextTypes((action as Action), context.flavors())) {\n          applicableActions.push((action as Action));\n        }\n      }\n    }\n    return applicableActions;\n\n    function isActionApplicableToContextTypes(action: Action, currentContextTypes: Set<unknown>): boolean {\n      const contextTypes = action.contextTypes();\n      if (!contextTypes) {\n        return true;\n      }\n      for (let i = 0; i < contextTypes.length; ++i) {\n        const contextType = contextTypes[i];\n        const isMatching = Boolean(contextType) && currentContextTypes.has(contextType);\n        if (isMatching) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  action(actionId: string): Action|null {\n    return this._actionsById.get(actionId) || null;\n  }\n}\n"]}