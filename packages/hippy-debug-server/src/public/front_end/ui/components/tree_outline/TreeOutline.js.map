{"version":3,"file":"TreeOutline.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/tree_outline/TreeOutline.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport type {TreeNode, TreeNodeWithChildren} from './TreeOutlineUtils.js';\nimport {findNextNodeForTreeOutlineKeyboardNavigation, getNodeChildren, getPathToTreeNode, isExpandableNode, trackDOMNodeToTreeNode} from './TreeOutlineUtils.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport interface TreeOutlineData<TreeNodeDataType> {\n  defaultRenderer: (node: TreeNode<TreeNodeDataType>, state: {isExpanded: boolean}) => LitHtml.TemplateResult;\n  /**\n   * Note: it is important that all the TreeNode objects are unique. They are\n   * used internally to the TreeOutline as keys to track state (such as if a\n   * node is expanded or not), and providing the same object multiple times will\n   * cause issues in the TreeOutline.\n   */\n  tree: readonly TreeNode<TreeNodeDataType>[];\n}\n\nexport function defaultRenderer(node: TreeNode<string>): LitHtml.TemplateResult {\n  return LitHtml.html`${node.treeNodeData}`;\n}\n\nexport class ItemSelectedEvent<TreeNodeDataType> extends Event {\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super('itemselected', {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\nexport class ItemMouseOverEvent<TreeNodeDataType> extends Event {\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super('itemmouseover', {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\nexport class ItemMouseOutEvent<TreeNodeDataType> extends Event {\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super('itemmouseout', {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\nexport class TreeOutline<TreeNodeDataType> extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private treeData: readonly TreeNode<TreeNodeDataType>[] = [];\n  private nodeExpandedMap: WeakMap<TreeNode<TreeNodeDataType>, boolean> = new WeakMap();\n  private domNodeToTreeNodeMap: WeakMap<HTMLLIElement, TreeNode<TreeNodeDataType>> = new WeakMap();\n  private hasRenderedAtLeastOnce = false;\n  /**\n   * If we have expanded to a certain node, we want to focus it once we've\n   * rendered. But we render lazily and wrapped in LitHtml.until, so we can't\n   * know for sure when that node will be rendered. This variable tracks the\n   * node that we want focused but may not yet have been rendered.\n   */\n  private nodePendingFocus: TreeNode<TreeNodeDataType>|null = null;\n  private selectedTreeNode: TreeNode<TreeNodeDataType>|null = null;\n  private defaultRenderer =\n      (node: TreeNode<TreeNodeDataType>, _state: {isExpanded: boolean}): LitHtml.TemplateResult => {\n        if (typeof node.treeNodeData !== 'string') {\n          console.warn(`The default TreeOutline renderer simply stringifies its given value. You passed in ${\n              JSON.stringify(\n                  node.treeNodeData, null,\n                  2)}. Consider providing a different defaultRenderer that can handle nodes of this type.`);\n        }\n        return LitHtml.html`${String(node.treeNodeData)}`;\n      };\n\n  /**\n   * scheduledRender = render() has been called and scheduled a render.\n   */\n  private scheduledRender = false;\n  /**\n   * enqueuedRender = render() was called mid-way through an existing render.\n   */\n  private enqueuedRender = false;\n\n  static get observedAttributes(): string[] {\n    return ['nowrap', 'toplevelbordercolor'];\n  }\n\n  attributeChangedCallback(name: 'nowrap'|'toplevelbordercolor', oldValue: string|null, newValue: string|null): void {\n    switch (name) {\n      case 'nowrap': {\n        this.setNodeKeyNoWrapCSSVariable(newValue);\n        break;\n      }\n      case 'toplevelbordercolor': {\n        this.setTopLevelNodeBorderColorCSSVariable(newValue);\n        break;\n      }\n    }\n  }\n\n  connectedCallback(): void {\n    this.setTopLevelNodeBorderColorCSSVariable(this.getAttribute('toplevelbordercolor'));\n    this.setNodeKeyNoWrapCSSVariable(this.getAttribute('nowrap'));\n  }\n\n  get data(): TreeOutlineData<TreeNodeDataType> {\n    return {\n      tree: this.treeData as TreeNode<TreeNodeDataType>[],\n      defaultRenderer: this.defaultRenderer,\n    };\n  }\n\n  set data(data: TreeOutlineData<TreeNodeDataType>) {\n    this.defaultRenderer = data.defaultRenderer;\n    this.treeData = data.tree;\n    if (!this.hasRenderedAtLeastOnce) {\n      this.selectedTreeNode = this.treeData[0];\n    }\n    this.render();\n  }\n\n  /**\n   * Recursively expands the tree from the root nodes, to a max depth. The max\n   * depth is 0 indexed - so a maxDepth of 2 (default) will expand 3 levels: 0,\n   * 1 and 2.\n   */\n  async expandRecursively(maxDepth = 2): Promise<void> {\n    await Promise.all(this.treeData.map(rootNode => this.expandAndRecurse(rootNode, 0, maxDepth)));\n    await this.render();\n  }\n\n  /**\n   * Takes a TreeNode, expands the outline to reveal it, and focuses it.\n   */\n  async expandToAndSelectTreeNode(targetTreeNode: TreeNode<TreeNodeDataType>): Promise<void> {\n    const pathToTreeNode = await getPathToTreeNode(this.treeData, targetTreeNode);\n\n    if (pathToTreeNode === null) {\n      throw new Error(`Could not find node ${JSON.stringify(targetTreeNode)} in the tree.`);\n    }\n    pathToTreeNode.forEach((node, index) => {\n      // We don't expand the very last node, which was the target node.\n      if (index < pathToTreeNode.length - 1) {\n        this.setNodeExpandedState(node, true);\n      }\n    });\n\n    // Mark the node as pending focus so when it is rendered into the DOM we can focus it\n    this.nodePendingFocus = targetTreeNode;\n    await this.render();\n  }\n\n  async collapseChildrenOfNode(domNode: HTMLLIElement): Promise<void> {\n    const treeNode = this.domNodeToTreeNodeMap.get(domNode);\n    if (!treeNode) {\n      return;\n    }\n    await this.recursivelyCollapseTreeNodeChildren(treeNode);\n    await this.render();\n  }\n\n  private setNodeKeyNoWrapCSSVariable(attributeValue: string|null): void {\n    ComponentHelpers.SetCSSProperty.set(\n        this, '--override-key-whitespace-wrapping', attributeValue !== null ? 'nowrap' : 'initial');\n  }\n\n  private setTopLevelNodeBorderColorCSSVariable(attributeValue: string|null): void {\n    ComponentHelpers.SetCSSProperty.set(\n        this, '--override-top-node-border', attributeValue ? `1px solid ${attributeValue}` : '');\n  }\n\n  private async recursivelyCollapseTreeNodeChildren(treeNode: TreeNode<TreeNodeDataType>): Promise<void> {\n    if (!isExpandableNode(treeNode) || !this.nodeIsExpanded(treeNode)) {\n      return;\n    }\n    const children = await this.fetchNodeChildren(treeNode);\n    const childRecursions = Promise.all(children.map(child => this.recursivelyCollapseTreeNodeChildren(child)));\n    await childRecursions;\n    this.setNodeExpandedState(treeNode, false);\n  }\n\n  private getSelectedTreeNode(): TreeNode<TreeNodeDataType> {\n    if (!this.selectedTreeNode) {\n      throw new Error('getSelectedNode was called but selectedTreeNode is null');\n    }\n    return this.selectedTreeNode;\n  }\n\n  private async fetchNodeChildren(node: TreeNodeWithChildren<TreeNodeDataType>): Promise<TreeNode<TreeNodeDataType>[]> {\n    return getNodeChildren(node);\n  }\n\n  private setNodeExpandedState(node: TreeNode<TreeNodeDataType>, newExpandedState: boolean): void {\n    this.nodeExpandedMap.set(node, newExpandedState);\n  }\n\n  private nodeIsExpanded(node: TreeNode<TreeNodeDataType>): boolean {\n    return this.nodeExpandedMap.get(node) || false;\n  }\n\n  private async expandAndRecurse(node: TreeNode<TreeNodeDataType>, currentDepth: number, maxDepth: number):\n      Promise<void> {\n    if (!isExpandableNode(node)) {\n      return;\n    }\n    this.setNodeExpandedState(node, true);\n    if (currentDepth === maxDepth || !isExpandableNode(node)) {\n      return;\n    }\n    const children = await this.fetchNodeChildren(node);\n    await Promise.all(children.map(child => this.expandAndRecurse(child, currentDepth + 1, maxDepth)));\n  }\n\n  private onArrowClick(node: TreeNode<TreeNodeDataType>): ((e: Event) => void) {\n    return (event: Event): void => {\n      event.stopPropagation();\n      if (isExpandableNode(node)) {\n        this.setNodeExpandedState(node, !this.nodeIsExpanded(node));\n        this.render();\n      }\n    };\n  }\n\n  private onNodeClick(event: Event): void {\n    // Avoid it bubbling up to parent tree elements, else clicking a node deep in the tree will toggle it + all its ancestor's visibility.\n    event.stopPropagation();\n    const nodeClickExpandsOrContracts = this.getAttribute('clickabletitle') !== null;\n    const domNode = event.currentTarget as HTMLLIElement;\n    const node = this.domNodeToTreeNodeMap.get(domNode);\n    if (nodeClickExpandsOrContracts && node && isExpandableNode(node)) {\n      this.setNodeExpandedState(node, !this.nodeIsExpanded(node));\n    }\n    this.focusTreeNode(domNode);\n  }\n\n  private async focusTreeNode(domNode: HTMLLIElement): Promise<void> {\n    const treeNode = this.domNodeToTreeNodeMap.get(domNode);\n    if (!treeNode) {\n      return;\n    }\n    this.selectedTreeNode = treeNode;\n    await this.render();\n    this.dispatchEvent(new ItemSelectedEvent(treeNode));\n    coordinator.write('DOMNode focus', () => {\n      domNode.focus();\n    });\n  }\n\n  private processHomeAndEndKeysNavigation(key: 'Home'|'End'): void {\n    if (key === 'Home') {\n      const firstRootNode = this.shadow.querySelector<HTMLLIElement>('ul[role=\"tree\"] > li[role=\"treeitem\"]');\n      if (firstRootNode) {\n        this.focusTreeNode(firstRootNode);\n      }\n    } else if (key === 'End') {\n      /**\n       * The End key takes the user to the last visible node in the tree - you\n       * can think of this as the one that's rendered closest to the bottom of\n       * the page.\n       *\n       * We could walk our tree and compute this - but it will also be the last\n       * li[role=\"treeitem\"] in the DOM because we only render visible nodes.\n       * Therefore we can select all the nodes and pick the last one.\n       */\n      const allTreeItems = this.shadow.querySelectorAll<HTMLLIElement>('li[role=\"treeitem\"]');\n      const lastTreeItem = allTreeItems[allTreeItems.length - 1];\n      if (lastTreeItem) {\n        this.focusTreeNode(lastTreeItem);\n      }\n    }\n  }\n\n  private async processArrowKeyNavigation(key: Platform.KeyboardUtilities.ArrowKey, currentDOMNode: HTMLLIElement):\n      Promise<void> {\n    const currentTreeNode = this.domNodeToTreeNodeMap.get(currentDOMNode);\n    if (!currentTreeNode) {\n      return;\n    }\n\n    const domNode = findNextNodeForTreeOutlineKeyboardNavigation({\n      currentDOMNode,\n      currentTreeNode,\n      direction: key,\n      setNodeExpandedState: (node, expanded) => this.setNodeExpandedState(node, expanded),\n    });\n    this.focusTreeNode(domNode);\n  }\n\n  private processEnterOrSpaceNavigation(currentDOMNode: HTMLLIElement): void {\n    const currentTreeNode = this.domNodeToTreeNodeMap.get(currentDOMNode);\n    if (!currentTreeNode) {\n      return;\n    }\n    if (isExpandableNode(currentTreeNode)) {\n      const currentExpandedState = this.nodeIsExpanded(currentTreeNode);\n      this.setNodeExpandedState(currentTreeNode, !currentExpandedState);\n      this.render();\n    }\n  }\n\n  private async onTreeKeyDown(event: KeyboardEvent): Promise<void> {\n    if (!(event.target instanceof HTMLLIElement)) {\n      throw new Error('event.target was not an <li> element');\n    }\n\n    if (event.key === 'Home' || event.key === 'End') {\n      event.preventDefault();\n      this.processHomeAndEndKeysNavigation(event.key);\n    } else if (Platform.KeyboardUtilities.keyIsArrowKey(event.key)) {\n      event.preventDefault();\n      await this.processArrowKeyNavigation(event.key, event.target);\n    } else if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.processEnterOrSpaceNavigation(event.target);\n    }\n  }\n\n  private focusPendingNode(domNode: HTMLLIElement): void {\n    this.nodePendingFocus = null;\n    this.focusTreeNode(domNode);\n  }\n\n  private isSelectedNode(node: TreeNode<TreeNodeDataType>): boolean {\n    if (node.id) {\n      if (this.selectedTreeNode && this.selectedTreeNode.id) {\n        return node.id === this.selectedTreeNode.id;\n      }\n    }\n\n    return node === this.selectedTreeNode;\n  }\n\n  private renderNode(node: TreeNode<TreeNodeDataType>, {depth, setSize, positionInSet}: {\n    depth: number,\n    setSize: number,\n    positionInSet: number,\n  }): LitHtml.TemplateResult {\n    let childrenToRender;\n    const nodeIsExpanded = this.nodeIsExpanded(node);\n    if (!isExpandableNode(node) || !nodeIsExpanded) {\n      childrenToRender = LitHtml.nothing;\n    } else {\n      const childNodes = this.fetchNodeChildren(node).then(children => {\n        return children.map((childNode, index) => {\n          return this.renderNode(childNode, {depth: depth + 1, setSize: children.length, positionInSet: index});\n        });\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      childrenToRender = LitHtml.html`<ul role=\"group\">${LitHtml.Directives.until(childNodes)}</ul>`;\n      // clang-format on\n    }\n\n    const nodeIsFocusable = this.getSelectedTreeNode() === node;\n    const tabIndex = nodeIsFocusable ? 0 : -1;\n    const listItemClasses = LitHtml.Directives.classMap({\n      expanded: isExpandableNode(node) && nodeIsExpanded,\n      parent: isExpandableNode(node),\n      selected: this.isSelectedNode(node),\n      'is-top-level': depth === 0,\n    });\n    const ariaExpandedAttribute =\n        LitHtml.Directives.ifDefined(isExpandableNode(node) ? String(nodeIsExpanded) : undefined);\n\n    let renderedNodeKey: LitHtml.TemplateResult;\n    if (node.renderer) {\n      renderedNodeKey = node.renderer(node, {isExpanded: nodeIsExpanded});\n    } else {\n      renderedNodeKey = this.defaultRenderer(node, {isExpanded: nodeIsExpanded});\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      <li role=\"treeitem\"\n        tabindex=${tabIndex}\n        aria-setsize=${setSize}\n        aria-expanded=${ariaExpandedAttribute}\n        aria-level=${depth + 1}\n        aria-posinset=${positionInSet + 1}\n        class=${listItemClasses}\n        @click=${this.onNodeClick}\n        track-dom-node-to-tree-node=${trackDOMNodeToTreeNode(this.domNodeToTreeNodeMap, node)}\n        on-render=${ComponentHelpers.Directives.nodeRenderedCallback(domNode => {\n         /**\n           * Because TreeNodes are lazily rendered, you can call\n           * `outline.expandToAndSelect(NodeX)`, but `NodeX` will be rendered at some\n           * later point, once it's been fully resolved, within a LitHtml.until\n           * directive. That means we don't have a direct hook into when it's\n           * rendered, which we need because we want to focus the element, so we use this directive to receive a callback when the node is rendered.\n           */\n          if (!(domNode instanceof HTMLLIElement)) {\n            return;\n          }\n\n          // If an id key was supplied for the node, match on that.\n          // Otherwise default to object equality.\n          if (node.id && this.nodePendingFocus && this.nodePendingFocus.id && node.id === this.nodePendingFocus.id) {\n            this.focusPendingNode(domNode);\n          } else if (node === this.nodePendingFocus) {\n            this.focusPendingNode(domNode);\n          }\n        })}\n      >\n        <span class=\"arrow-and-key-wrapper\"\n          @mouseover=${(): void => {\n            this.dispatchEvent(new ItemMouseOverEvent(node));\n          }}\n          @mouseout=${(): void => {\n            this.dispatchEvent(new ItemMouseOutEvent(node));\n          }}\n        >\n          <span class=\"arrow-icon\" @click=${this.onArrowClick(node)}>\n          </span>\n          <span class=\"tree-node-key\" data-node-key=${node.treeNodeData}>${renderedNodeKey}</span>\n        </span>\n        ${childrenToRender}\n      </li>\n    `;\n    // clang-format on\n  }\n  private async render(): Promise<void> {\n    if (this.scheduledRender) {\n      // If we are already rendering, don't render again immediately, but\n      // enqueue it to be run after we're done on our current render.\n      this.enqueuedRender = true;\n      return;\n    }\n\n    this.scheduledRender = true;\n\n    await coordinator.write('TreeOutline render', () => {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n      <style>\n        li {\n          list-style: none;\n          text-overflow: ellipsis;\n          min-height: 12px;\n        }\n\n        .tree-node-key {\n          white-space: var(--override-key-whitespace-wrapping);\n        }\n\n        .arrow-icon {\n          display: block;\n          user-select: none;\n          -webkit-mask-image: var(--image-file-treeoutlineTriangles);\n          -webkit-mask-size: 32px 24px;\n          -webkit-mask-position: 0 0;\n          background-color: var(--color-text-primary);\n          content: \"\";\n          text-shadow: none;\n          height: 12px;\n          width: 13px;\n          overflow: hidden;\n        }\n\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n\n        ul[role=\"group\"] {\n          padding-left: 16px;\n        }\n\n        li:not(.parent) > .arrow-and-key-wrapper > .arrow-icon {\n          -webkit-mask-size: 0;\n        }\n\n        li.parent.expanded > .arrow-and-key-wrapper > .arrow-icon {\n          -webkit-mask-position: -16px 0;\n        }\n\n        li.is-top-level {\n          border-top: var(--override-top-node-border);\n        }\n\n        li.is-top-level:last-child {\n          border-bottom: var(--override-top-node-border);\n        }\n\n        :host([animated]) li:not(.is-top-level) {\n          animation-name: slideIn;\n          animation-duration: 150ms;\n          animation-timing-function: cubic-bezier(0, 0, 0.3, 1);\n          animation-fill-mode: forwards;\n        }\n\n        @keyframes slideIn {\n          from {\n            transform: translateY(-5px);\n            opacity: 0%;\n          }\n\n          to {\n            transform: none;\n            opacity: 100%;\n          }\n        }\n\n        .arrow-and-key-wrapper {\n          border: 2px solid transparent;\n          display: flex;\n          align-content: center;\n        }\n\n        [role=\"treeitem\"]:focus {\n          outline: 0;\n        }\n\n        [role=\"treeitem\"].selected > .arrow-and-key-wrapper {\n          /* stylelint-disable-next-line color-named */\n          background-color: var(--legacy-selection-bg-color);\n        }\n      </style>\n      <div class=\"wrapping-container\">\n      <ul role=\"tree\" @keydown=${this.onTreeKeyDown}>\n        ${this.treeData.map((topLevelNode, index) => {\n          return this.renderNode(topLevelNode, {\n            depth: 0,\n            setSize: this.treeData.length,\n            positionInSet: index,\n          });\n        })}\n      </ul>\n      </div>\n      `, this.shadow, {\n        host: this,\n      });\n    });\n    // clang-format on\n    this.hasRenderedAtLeastOnce = true;\n    this.scheduledRender = false;\n\n    // If render() was called when we were already mid-render, let's re-render\n    // to ensure we're not rendering any stale UI.\n    if (this.enqueuedRender) {\n      this.enqueuedRender = false;\n      return this.render();\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-tree-outline', TreeOutline);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-tree-outline': TreeOutline<unknown>;\n  }\n}\n"]}