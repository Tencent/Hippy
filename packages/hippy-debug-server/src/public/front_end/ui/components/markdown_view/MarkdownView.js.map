{"version":3,"file":"MarkdownView.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/markdown_view/MarkdownView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\n\nimport type {MarkdownImageData} from './MarkdownImage.js';\nimport type {MarkdownLinkData} from './MarkdownLink.js';\nimport {MarkdownLink} from './MarkdownLink.js';\nimport {MarkdownImage} from './MarkdownImage.js';\n\nconst html = LitHtml.html;\nconst render = LitHtml.render;\n\nexport interface MarkdownViewData {\n  tokens: Marked.Marked.Token[];\n}\n\nexport class MarkdownView extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n\n  // TODO(crbug.com/1108699): Replace with `Marked.Marked.Token[]` once AST types are fixed upstream.\n  private tokenData: readonly Object[] = [];\n\n  set data(data: MarkdownViewData) {\n    this.tokenData = data.tokens;\n    this.update();\n  }\n\n  private update(): void {\n    this.render();\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>\n      .message {\n        line-height: 20px;\n        font-size: 14px;\n        color: var(--color-text-secondary);\n        margin-bottom: 4px;\n        user-select: text;\n      }\n\n      .message p {\n        margin-bottom: 16px;\n        margin-block-start: 2px;\n      }\n\n      .message ul {\n        list-style-type: none;\n        list-style-position: inside;\n        padding-inline-start: 0;\n      }\n\n      .message li {\n        margin-top: 8px;\n        display: list-item;\n      }\n\n      .message li::before {\n        content: \"â†’\";\n        -webkit-mask-image: none;\n        padding-right: 5px;\n        position: relative;\n        top: -1px;\n      }\n\n      .message code {\n        color: var(--color-text-primary);\n        font-size: 12px;\n        user-select: text;\n        cursor: text;\n        background: var(--color-background-elevation-1);\n      }\n      </style>\n      <div class='message'>\n        ${this.tokenData.map(renderToken)}\n      </div>\n    `, this.shadow);\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-markdown-view', MarkdownView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-view': MarkdownView;\n  }\n}\n\n// TODO(crbug.com/1108699): Fix types when they are available.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst renderChildTokens = (token: any): string => {\n  return token.tokens.map(renderToken);\n};\n\nconst unescape = (text: string): string => {\n  // Unescape will get rid of the escaping done by Marked to avoid double escaping due to escaping it also with Lit-html\n  // Table taken from: front_end/third_party/marked/package/src/helpers.js\n  /** @type {Map<string,string>} */\n  const escapeReplacements = new Map<string, string>([\n    ['&amp;', '&'],\n    ['&lt;', '<'],\n    ['&gt;', '>'],\n    ['&quot;', '\"'],\n    ['&#39;', '\\''],\n  ]);\n  return text.replace(/&(amp|lt|gt|quot|#39);/g, (matchedString: string) => {\n    const replacement = escapeReplacements.get(matchedString);\n    return replacement ? replacement : matchedString;\n  });\n};\n// TODO(crbug.com/1108699): Fix types when they are available.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst renderText = (token: any): LitHtml.TemplateResult => {\n  if (token.tokens && token.tokens.length > 0) {\n    return html`${renderChildTokens(token)}`;\n  }\n  // Due to unescaping, unescaped html entities (see escapeReplacements' keys) will be rendered\n  // as their corresponding symbol while the rest will be rendered as verbatim.\n  // Marked's escape function can be found in front_end/third_party/marked/package/src/helpers.js\n  return html`${unescape(token.text)}`;\n};\n\n// TODO(crbug.com/1108699): Fix types when they are available.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst tokenRenderers = new Map<string, (token: any) => LitHtml.TemplateResult>([\n  ['paragraph', (token): LitHtml.TemplateResult => html`<p>${renderChildTokens(token)}`],\n  ['list', (token): LitHtml.TemplateResult => html`<ul>${token.items.map(renderToken)}</ul>`],\n  ['list_item', (token): LitHtml.TemplateResult => html`<li>${renderChildTokens(token)}`],\n  ['text', renderText],\n  ['codespan', (token): LitHtml.TemplateResult => html`<code>${unescape(token.text)}</code>`],\n  ['space', (): LitHtml.TemplateResult => html``],\n  [\n    'link',\n    (token): LitHtml.TemplateResult => html`<${MarkdownLink.litTagName} .data=\"${\n        {key: token.href, title: token.text} as MarkdownLinkData}\"></${MarkdownLink.litTagName}>`,\n  ],\n  [\n    'image',\n    (token): LitHtml.TemplateResult => html`<${MarkdownImage.litTagName} .data=\"${\n        {key: token.href, title: token.text} as MarkdownImageData}\"></${MarkdownImage.litTagName}>`,\n  ],\n]);\n\n// TODO(crbug.com/1108699): Fix types when they are available.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const renderToken = (token: any): LitHtml.TemplateResult => {\n  const renderFn = tokenRenderers.get(token.type);\n  if (!renderFn) {\n    throw new Error(`Markdown token type '${token.type}' not supported.`);\n  }\n  return renderFn(token);\n};\n"]}