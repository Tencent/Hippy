{"version":3,"file":"MarkdownLink.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/markdown_view/MarkdownLink.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,wBAAwB,CAAC,CAAC,yBAAyB;AAE1D,OAAO,KAAK,gBAAgB,MAAM,qCAAqC,CAAC;AACxE,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAC,eAAe,EAAC,MAAM,uBAAuB,CAAC;AAOtD;;;;GAIG;AACH,MAAM,OAAO,YAAa,SAAQ,WAAW;IAC3C,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,wBAAwB,CAAC;IAE3C,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACpD,QAAQ,GAAW,EAAE,CAAC;IACtB,OAAO,GAAW,EAAE,CAAC;IAE7B,IAAI,IAAI,CAAC,IAAsB;QAC7B,MAAM,EAAC,GAAG,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC;QAC1B,MAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,MAAM;QACZ,mBAAmB;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAA;;;;;;;;;;;2CAWY,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ;KACnE,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,kBAAkB;IACpB,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../legacy/legacy.js'; // Required for <x-link>.\n\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport {getMarkdownLink} from './MarkdownLinksMap.js';\n\nexport interface MarkdownLinkData {\n  key: string;\n  title: string;\n}\n\n/**\n * Component to render link from parsed markdown.\n * Parsed links from markdown are not directly rendered, instead they have to be added to the <key, link> map in MarkdownLinksMap.ts.\n * This makes sure that all links are accounted for and no bad links are introduced to devtools via markdown.\n */\nexport class MarkdownLink extends HTMLElement {\n  static litTagName = LitHtml.literal`devtools-markdown-link`;\n\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private linkText: string = '';\n  private linkUrl: string = '';\n\n  set data(data: MarkdownLinkData) {\n    const {key, title} = data;\n    const markdownLink = getMarkdownLink(key);\n    this.linkText = title;\n    this.linkUrl = markdownLink;\n    this.render();\n  }\n\n  private render(): void {\n    // clang-format off\n    const output = LitHtml.html`\n      <style>\n        .devtools-link {\n          color: var(--color-link);\n          text-decoration: none;\n        }\n\n        .devtools-link:hover {\n          text-decoration: underline;\n        }\n      </style>\n      <x-link class=\"devtools-link\" href=${this.linkUrl}>${this.linkText}</x-link>\n    `;\n    LitHtml.render(output, this.shadow);\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-markdown-link', MarkdownLink);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-link': MarkdownLink;\n  }\n}\n"]}