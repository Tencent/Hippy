{"version":3,"file":"MarkdownImage.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/markdown_view/MarkdownImage.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,qCAAqC,CAAC;AACxE,OAAO,KAAK,UAAU,MAAM,6CAA6C,CAAC;AAC1E,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AAGtD,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAOxD;;;;GAIG;AACH,MAAM,OAAO,aAAc,SAAQ,WAAW;IAC5C,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,yBAAyB,CAAC;IAE5C,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACpD,SAAS,CAAa;IACtB,UAAU,CAAU;IAE5B;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED,IAAI,IAAI,CAAC,IAAuB;QAC9B,MAAM,EAAC,GAAG,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO,OAAO,CAAC,IAAI,CAAA,EAAE,CAAC;SACvB;QACD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,GAAG,MAAM,EAAE,MAAM,GAAG,MAAM,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QACrE,OAAO,OAAO,CAAC,IAAI,CAAA;SACd,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,UAChC,EAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAA6B,MAAM,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU;KACzG,CAAC;IACJ,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO,OAAO,CAAC,IAAI,CAAA,EAAE,CAAC;SACvB;QACD,MAAM,EAAC,GAAG,EAAE,KAAK,GAAG,MAAM,EAAE,MAAM,GAAG,MAAM,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9D,OAAO,OAAO,CAAC,IAAI,CAAA;;;;;;wCAMiB,GAAG,QAAQ,IAAI,CAAC,UAAU,UAAU,KAAK,WAAW,MAAM;KAC7F,CAAC;IACJ,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO;SACR;QACD,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACnF,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as IconButton from '../../components/icon_button/icon_button.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport type {ImageData} from './MarkdownImagesMap.js';\nimport {getMarkdownImage} from './MarkdownImagesMap.js';\n\nexport interface MarkdownImageData {\n  key: string;\n  title: string;\n}\n\n/**\n * Component to render images from parsed markdown.\n * Parsed images from markdown are not directly rendered, instead they have to be added to the MarkdownImagesMap.ts.\n * This makes sure that all icons/images are accounted for in markdown.\n */\nexport class MarkdownImage extends HTMLElement {\n  static litTagName = LitHtml.literal`devtools-markdown-image`;\n\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private imageData?: ImageData;\n  private imageTitle?: string;\n\n  constructor() {\n    super();\n  }\n\n  set data(data: MarkdownImageData) {\n    const {key, title} = data;\n    const markdownImage = getMarkdownImage(key);\n    this.imageData = markdownImage;\n    this.imageTitle = title;\n    this.render();\n  }\n\n  private getIconComponent(): LitHtml.TemplateResult {\n    if (!this.imageData) {\n      return LitHtml.html``;\n    }\n    const {src, color, width = '100%', height = '100%'} = this.imageData;\n    return LitHtml.html`\n      <${IconButton.Icon.Icon.litTagName} .data=${\n        {iconPath: src, color, width, height} as IconButton.Icon.IconData}></${IconButton.Icon.Icon.litTagName}>\n    `;\n  }\n\n  private getImageComponent(): LitHtml.TemplateResult {\n    if (!this.imageData) {\n      return LitHtml.html``;\n    }\n    const {src, width = '100%', height = '100%'} = this.imageData;\n    return LitHtml.html`\n      <style>\n        .markdown-image {\n          display: block;\n        }\n      </style>\n      <img class=\"markdown-image\" src=${src} alt=${this.imageTitle} width=${width} height=${height}/>\n    `;\n  }\n\n  private render(): void {\n    if (!this.imageData) {\n      return;\n    }\n    const {isIcon} = this.imageData;\n    const imageComponent = isIcon ? this.getIconComponent() : this.getImageComponent();\n    LitHtml.render(imageComponent, this.shadow);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-markdown-image', MarkdownImage);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-image': MarkdownImage;\n  }\n}\n"]}