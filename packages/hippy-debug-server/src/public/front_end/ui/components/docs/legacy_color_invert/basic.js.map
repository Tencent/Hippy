{"version":3,"file":"basic.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/components/docs/legacy_color_invert/basic.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FrontendHelpers from '../../../../../test/unittests/front_end/helpers/EnvironmentHelpers.js';\nimport * as Common from '../../../../core/common/common.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as ComponentHelpers from '../../helpers/helpers.js';\n\nawait ComponentHelpers.ComponentServerSetup.setup();\nawait FrontendHelpers.initializeGlobalVars();\n\nconst form = document.querySelector<HTMLFormElement>('form');\nif (!form) {\n  throw new Error('could not find form');\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const property = form.querySelector<HTMLInputElement>('#css-property')?.value;\n  const value = form.querySelector<HTMLInputElement>('#css-value')?.value;\n  if (!property || !value) {\n    return;\n  }\n  const output = legacyInvertVariableForDarkMode(property, value);\n  const outputElem = document.querySelector<HTMLElement>('#output');\n  if (outputElem) {\n    outputElem.innerText = output;\n  }\n});\n\n/**\n * This code is largely copy and pasted from the legacy theme_support_impl\n * around color patching. This is because we are working towards removing the\n * legacy color patching, but still may need to be able to generate legacy dark\n * mode values for light colors during the migration. This doc exists for that\n * reason.\n */\n\ntype ColorUsage = 'unknown'|'foreground'|'background';\n\nfunction patchHSLA(hsla: number[], colorUsage: ColorUsage): void {\n  const hue = hsla[0];\n  const sat = hsla[1];\n  let lit: number = hsla[2];\n  const alpha = hsla[3];\n\n  const minCap = colorUsage === 'background' ? 0.14 : 0;\n  const maxCap = colorUsage === 'foreground' ? 0.9 : 1;\n  lit = 1 - lit;\n  if (lit < minCap * 2) {\n    lit = minCap + lit / 2;\n  } else if (lit > 2 * maxCap - 1) {\n    lit = maxCap - 1 / 2 + lit / 2;\n  }\n  hsla[0] = Platform.NumberUtilities.clamp(hue, 0, 1);\n  hsla[1] = Platform.NumberUtilities.clamp(sat, 0, 1);\n  hsla[2] = Platform.NumberUtilities.clamp(lit, 0, 1);\n  hsla[3] = Platform.NumberUtilities.clamp(alpha, 0, 1);\n}\n\nfunction patchColor(colorAsText: string, colorUsage: ColorUsage): string {\n  const color = Common.Color.Color.parse(colorAsText);\n  if (!color) {\n    return colorAsText;\n  }\n  const hsla = color.hsla();\n  patchHSLA(hsla, colorUsage);\n\n  const rgba: number[] = [];\n  Common.Color.Color.hsl2rgb(hsla, rgba);\n  const outColor = new Common.Color.Color(rgba, color.format());\n  let outText = outColor.asString(null);\n  if (!outText) {\n    outText = outColor.asString(outColor.hasAlpha() ? Common.Color.Format.RGBA : Common.Color.Format.RGB);\n  }\n  return outText || colorAsText;\n}\n\nfunction legacyInvertVariableForDarkMode(cssProperty: string, cssValue: string): string {\n  let colorUsage: ColorUsage = 'unknown';\n  if (cssProperty.indexOf('background') === 0 || cssProperty.indexOf('border') === 0) {\n    colorUsage = 'background';\n  }\n  if (cssProperty.indexOf('background') === -1) {\n    colorUsage = 'foreground';\n  }\n\n  const items = cssValue.replace(Common.Color.Regex, '\\0$1\\0').split('\\0');\n  const output = [];\n  for (const item of items) {\n    if (!item) {\n      continue;\n    }\n    const newColor = patchColor(item, colorUsage);\n    output.push(newColor);\n  }\n  return output.join(' ');\n}\n"]}