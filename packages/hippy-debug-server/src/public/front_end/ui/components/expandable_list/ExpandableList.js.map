{"version":3,"file":"ExpandableList.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/expandable_list/ExpandableList.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,qCAAqC,CAAC;AACxE,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AAMtD,MAAM,OAAO,cAAe,SAAQ,WAAW;IAC7C,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,0BAA0B,CAAC;IAE7C,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACpD,QAAQ,GAAG,KAAK,CAAC;IACjB,IAAI,GAA6B,EAAE,CAAC;IAE5C,IAAI,IAAI,CAAC,IAAwB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,MAAM;QACZ,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,OAAO;SACR;QAED,qDAAqD;QACrD,mBAAmB;QACnB,OAAO,CAAC,MAAM,CACV,OAAO,CAAC,IAAI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsDR,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,IAAI,CAAA;+BACO,GAAS,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE;0CACpB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;;aAE5D;YACH,CAAC,CAAC,OAAO,CAAC,OAAO;;;YAGf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAA;cACpF,GAAG;WACN,CAAC;;;KAGP,EACG,IAAI,CAAC,MAAM,CAAC,CAAC;QACjB,kBAAkB;IACpB,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,0BAA0B,EAAE,cAAc,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nexport interface ExpandableListData {\n  rows: LitHtml.TemplateResult[];\n}\n\nexport class ExpandableList extends HTMLElement {\n  static litTagName = LitHtml.literal`devtools-expandable-list`;\n\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private expanded = false;\n  private rows: LitHtml.TemplateResult[] = [];\n\n  set data(data: ExpandableListData) {\n    this.rows = data.rows;\n    this.render();\n  }\n\n  private onArrowClick(): void {\n    this.expanded = !this.expanded;\n    this.render();\n  }\n\n  private render(): void {\n    if (this.rows.length < 1) {\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(\n        LitHtml.html`\n      <style>\n        div {\n          line-height: 1.7em;\n        }\n\n        .arrow-icon-button {\n          cursor: pointer;\n          padding: 1px 0;\n          border: none;\n          background: none;\n        }\n\n        .arrow-icon {\n          display: inline-block;\n          -webkit-mask-image: url(Images/treeoutlineTriangles.svg);\n          -webkit-mask-size: 32px 24px;\n          -webkit-mask-position: 0 0;\n          background-color: var(--color-text-primary);\n          margin-top: 2px;\n          height: 12px;\n          width: 13px;\n        }\n\n        .arrow-icon.expanded {\n          -webkit-mask-position: -16px 0;\n        }\n\n        .expandable-list-container {\n          display: flex;\n          margin-top: 4px;\n        }\n\n        .expandable-list-items {\n          overflow: hidden;\n        }\n\n        .link,\n        .devtools-link {\n          color: var(--color-link);\n          text-decoration: underline;\n          cursor: pointer;\n          padding: 2px 0; /* adjust focus ring size */\n        }\n\n        button.link {\n          border: none;\n          background: none;\n          font-family: inherit;\n          font-size: inherit;\n        }\n      </style>\n      <div class=\"expandable-list-container\">\n        <div>\n          ${this.rows.length > 1 ?\n            LitHtml.html`\n              <button @click=${(): void => this.onArrowClick()} class=\"arrow-icon-button\">\n                <span class=\"arrow-icon ${this.expanded ? 'expanded' : ''}\"></span>\n              </button>\n            `\n          : LitHtml.nothing}\n        </div>\n        <div class=\"expandable-list-items\">\n          ${this.rows.filter((_, index) => (this.expanded || index === 0)).map(row => LitHtml.html`\n            ${row}\n          `)}\n        </div>\n      </div>\n    `,\n        this.shadow);\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-expandable-list', ExpandableList);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-expandable-list': ExpandableList;\n  }\n}\n"]}