{"version":3,"file":"LinearMemoryInspectorController.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as UI from '../../legacy/legacy.js';\n\nimport type {Settings} from './LinearMemoryInspector.js';\nimport {LinearMemoryInspectorPaneImpl} from './LinearMemoryInspectorPane.js';\nimport type {ValueType, ValueTypeMode} from './ValueInterpreterDisplayUtils.js';\nimport {Endianness, getDefaultValueTypeMapping} from './ValueInterpreterDisplayUtils.js';\n\nconst LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP = 'linear-memory-inspector';\nconst MEMORY_TRANSFER_MIN_CHUNK_SIZE = 1000;\nexport const ACCEPTED_MEMORY_TYPES = ['webassemblymemory', 'typedarray', 'dataview', 'arraybuffer'];\n\nlet controllerInstance: LinearMemoryInspectorController;\n\nexport interface LazyUint8Array {\n  getRange(start: number, end: number): Promise<Uint8Array>;\n  length(): number;\n}\n\nexport class RemoteArrayBufferWrapper implements LazyUint8Array {\n  private remoteArrayBuffer: SDK.RemoteObject.RemoteArrayBuffer;\n\n  constructor(arrayBuffer: SDK.RemoteObject.RemoteArrayBuffer) {\n    this.remoteArrayBuffer = arrayBuffer;\n  }\n\n  length(): number {\n    return this.remoteArrayBuffer.byteLength();\n  }\n\n  async getRange(start: number, end: number): Promise<Uint8Array> {\n    const newEnd = Math.min(end, this.length());\n    if (start < 0 || start > newEnd) {\n      console.error(`Requesting invalid range of memory: (${start}, ${end})`);\n      return new Uint8Array(0);\n    }\n    const array = await this.remoteArrayBuffer.bytes(start, newEnd);\n    return new Uint8Array(array);\n  }\n}\n\nasync function getBufferFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<SDK.RemoteObject.RemoteArrayBuffer> {\n  console.assert(obj.type === 'object');\n  console.assert(obj.subtype !== undefined && ACCEPTED_MEMORY_TYPES.includes(obj.subtype));\n  const response = await obj.runtimeModel()._agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return this instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \\'undefined\\' && this instanceof SharedArrayBuffer) ? this : this.buffer; }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing ArrayBuffer could not be retrieved: ${error}`);\n  }\n  obj = obj.runtimeModel().createRemoteObject(response.result);\n  return new SDK.RemoteObject.RemoteArrayBuffer(obj);\n}\n\ntype SerializableSettings = {\n  valueTypes: ValueType[],\n  valueTypeModes: [ValueType, ValueTypeMode][],\n  endianness: Endianness,\n};\n\nexport class LinearMemoryInspectorController extends SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  private paneInstance = LinearMemoryInspectorPaneImpl.instance();\n  private bufferIdToRemoteObject: Map<string, SDK.RemoteObject.RemoteObject> = new Map();\n  private settings: Common.Settings.Setting<SerializableSettings>;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.onGlobalObjectClear, this);\n    this.paneInstance.addEventListener('view-closed', this.viewClosed.bind(this));\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.onDebuggerPause, this);\n\n    const defaultValueTypeModes = getDefaultValueTypeMapping();\n    const defaultSettings: SerializableSettings = {\n      valueTypes: Array.from(defaultValueTypeModes.keys()),\n      valueTypeModes: Array.from(defaultValueTypeModes),\n      endianness: Endianness.Little,\n    };\n    this.settings = Common.Settings.Settings.instance().createSetting('lmiInterpreterSettings', defaultSettings);\n  }\n\n  static instance(): LinearMemoryInspectorController {\n    if (controllerInstance) {\n      return controllerInstance;\n    }\n    controllerInstance = new LinearMemoryInspectorController();\n    return controllerInstance;\n  }\n\n  static async getMemoryForAddress(memoryWrapper: LazyUint8Array, address: number):\n      Promise<{memory: Uint8Array, offset: number}> {\n    // Provide a chunk of memory that covers the address to show and some before and after\n    // as 1. the address shown is not necessarily at the beginning of a page and\n    // 2. to allow for fewer memory requests.\n    const memoryChunkStart = Math.max(0, address - MEMORY_TRANSFER_MIN_CHUNK_SIZE / 2);\n    const memoryChunkEnd = memoryChunkStart + MEMORY_TRANSFER_MIN_CHUNK_SIZE;\n    const memory = await memoryWrapper.getRange(memoryChunkStart, memoryChunkEnd);\n    return {memory: memory, offset: memoryChunkStart};\n  }\n\n  static async getMemoryRange(memoryWrapper: LazyUint8Array, start: number, end: number): Promise<Uint8Array> {\n    // Check that the requested start is within bounds.\n    // If the requested end is larger than the actual\n    // memory, it will be automatically capped when\n    // requesting the range.\n    if (start < 0 || start > end || start >= memoryWrapper.length()) {\n      throw new Error('Requested range is out of bounds.');\n    }\n    const chunkEnd = Math.max(end, start + MEMORY_TRANSFER_MIN_CHUNK_SIZE);\n    return await memoryWrapper.getRange(start, chunkEnd);\n  }\n\n  saveSettings(data: Settings): void {\n    const valueTypes = Array.from(data.valueTypes);\n    const modes = [...data.modes];\n    this.settings.set({valueTypes, valueTypeModes: modes, endianness: data.endianness});\n  }\n\n  loadSettings(): Settings {\n    const settings = this.settings.get();\n    return {\n      valueTypes: new Set(settings.valueTypes),\n      modes: new Map(settings.valueTypeModes),\n      endianness: settings.endianness,\n    };\n  }\n\n  async openInspectorView(obj: SDK.RemoteObject.RemoteObject, address?: number): Promise<void> {\n    if (address !== undefined) {\n      Host.userMetrics.linearMemoryInspectorTarget(\n          Host.UserMetrics.LinearMemoryInspectorTarget.DWARFInspectableAddress);\n    } else if (obj.subtype === Protocol.Runtime.RemoteObjectSubtype.Arraybuffer) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.ArrayBuffer);\n    } else if (obj.subtype === Protocol.Runtime.RemoteObjectSubtype.Dataview) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.DataView);\n    } else if (obj.subtype === Protocol.Runtime.RemoteObjectSubtype.Typedarray) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.TypedArray);\n    } else {\n      console.assert(obj.subtype === Protocol.Runtime.RemoteObjectSubtype.Webassemblymemory);\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.WebAssemblyMemory);\n    }\n    const buffer = await getBufferFromObject(obj);\n    const {internalProperties} = await buffer.object().getOwnProperties(false);\n    const idProperty = internalProperties?.find(({name}) => name === '[[ArrayBufferData]]');\n    const id = idProperty?.value?.value;\n    if (!id) {\n      throw new Error('Unable to find backing store id for array buffer');\n    }\n    const memoryProperty = internalProperties?.find(({name}) => name === '[[WebAssemblyMemory]]');\n    const memory = memoryProperty?.value;\n\n    if (this.bufferIdToRemoteObject.has(id)) {\n      this.paneInstance.reveal(id, address);\n      UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n      return;\n    }\n\n    const title = String(memory ? memory.description : buffer.object().description);\n    this.bufferIdToRemoteObject.set(id, buffer.object());\n    const arrayBufferWrapper = new RemoteArrayBufferWrapper(buffer);\n\n    this.paneInstance.create(id, title, arrayBufferWrapper, address);\n    UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n  }\n\n  modelRemoved(model: SDK.RuntimeModel.RuntimeModel): void {\n    for (const [bufferId, remoteObject] of this.bufferIdToRemoteObject) {\n      if (model === remoteObject.runtimeModel()) {\n        this.bufferIdToRemoteObject.delete(bufferId);\n        this.paneInstance.close(bufferId);\n      }\n    }\n  }\n\n  private onDebuggerPause(event: Common.EventTarget.EventTargetEvent): void {\n    const debuggerModel = event.data as SDK.DebuggerModel.DebuggerModel;\n    for (const [bufferId, remoteObject] of this.bufferIdToRemoteObject) {\n      if (debuggerModel.runtimeModel() === remoteObject.runtimeModel()) {\n        this.paneInstance.refreshView(bufferId);\n      }\n    }\n  }\n\n  private onGlobalObjectClear(event: Common.EventTarget.EventTargetEvent): void {\n    const debuggerModel = event.data as SDK.DebuggerModel.DebuggerModel;\n    this.modelRemoved(debuggerModel.runtimeModel());\n  }\n\n  private viewClosed(event: Common.EventTarget.EventTargetEvent): void {\n    const bufferId = event.data;\n    const remoteObj = this.bufferIdToRemoteObject.get(bufferId);\n    if (remoteObj) {\n      remoteObj.release();\n    }\n    this.bufferIdToRemoteObject.delete(event.data);\n  }\n}\n"]}