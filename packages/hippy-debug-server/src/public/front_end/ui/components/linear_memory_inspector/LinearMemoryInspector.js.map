{"version":3,"file":"LinearMemoryInspector.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryInspector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\n\nconst {render, html} = LitHtml;\n\nimport type {AddressInputChangedEvent, HistoryNavigationEvent, LinearMemoryNavigatorData, PageNavigationEvent} from './LinearMemoryNavigator.js';\nimport {Mode, Navigation, LinearMemoryNavigator} from './LinearMemoryNavigator.js';\nimport type {EndiannessChangedEvent, LinearMemoryValueInterpreterData, ValueTypeToggledEvent} from './LinearMemoryValueInterpreter.js';\nimport {LinearMemoryValueInterpreter} from './LinearMemoryValueInterpreter.js';\nimport type {ByteSelectedEvent, LinearMemoryViewerData, ResizeEvent} from './LinearMemoryViewer.js';\nimport type {ValueType, ValueTypeMode} from './ValueInterpreterDisplayUtils.js';\nimport {VALUE_INTEPRETER_MAX_NUM_BYTES, Endianness, getDefaultValueTypeMapping} from './ValueInterpreterDisplayUtils.js';\nimport {formatAddress, parseAddress} from './LinearMemoryInspectorUtils.js';\nimport type {JumpToPointerAddressEvent, ValueTypeModeChangedEvent} from './ValueInterpreterDisplay.js';\nimport {LinearMemoryViewer} from './LinearMemoryViewer.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over an invalid address in the address line in the Linear Memory Inspector\n  *@example {0x00000000} PH1\n  *@example {0x00400000} PH2\n  */\n  addressHasToBeANumberBetweenSAnd: 'Address has to be a number between {PH1} and {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/LinearMemoryInspector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n// If the LinearMemoryInspector only receives a portion\n// of the original Uint8Array to show, it requires information\n// on the 1. memoryOffset (at which index this portion starts),\n// and on the 2. outerMemoryLength (length of the original Uint8Array).\nexport interface LinearMemoryInspectorData {\n  memory: Uint8Array;\n  address: number;\n  memoryOffset: number;\n  outerMemoryLength: number;\n  valueTypes?: Set<ValueType>;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n  endianness?: Endianness;\n}\n\nexport type Settings = {\n  valueTypes: Set<ValueType>,\n  modes: Map<ValueType, ValueTypeMode>,\n  endianness: Endianness,\n};\n\nexport class MemoryRequestEvent extends Event {\n  data: {start: number, end: number, address: number};\n\n  constructor(start: number, end: number, address: number) {\n    super('memoryrequest');\n    this.data = {start, end, address};\n  }\n}\n\nexport class AddressChangedEvent extends Event {\n  data: number;\n\n  constructor(address: number) {\n    super('addresschanged');\n    this.data = address;\n  }\n}\n\nexport class SettingsChangedEvent extends Event {\n  data: Settings;\n\n  constructor(settings: Settings) {\n    super('settingschanged');\n    this.data = settings;\n  }\n}\n\nclass AddressHistoryEntry implements Common.SimpleHistoryManager.HistoryEntry {\n  private address = 0;\n  private callback;\n\n  constructor(address: number, callback: (x: number) => void) {\n    if (address < 0) {\n      throw new Error('Address should be a greater or equal to zero');\n    }\n    this.address = address;\n    this.callback = callback;\n  }\n\n  valid(): boolean {\n    return true;\n  }\n\n  reveal(): void {\n    this.callback(this.address);\n  }\n}\n\nexport class LinearMemoryInspector extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private readonly history = new Common.SimpleHistoryManager.SimpleHistoryManager(10);\n\n  private memory = new Uint8Array();\n  private memoryOffset = 0;\n  private outerMemoryLength = 0;\n\n  private address = -1;\n\n  private currentNavigatorMode = Mode.Submitted;\n  private currentNavigatorAddressLine = `${this.address}`;\n\n  private numBytesPerPage = 4;\n\n  private valueTypeModes = getDefaultValueTypeMapping();\n  private valueTypes = new Set(this.valueTypeModes.keys());\n  private endianness = Endianness.Little;\n\n  set data(data: LinearMemoryInspectorData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    this.memory = data.memory;\n    this.memoryOffset = data.memoryOffset;\n    this.outerMemoryLength = data.outerMemoryLength;\n    this.valueTypeModes = data.valueTypeModes || this.valueTypeModes;\n    this.valueTypes = data.valueTypes || this.valueTypes;\n    this.endianness = data.endianness || this.endianness;\n    this.setAddress(data.address);\n    this.render();\n  }\n\n  private render(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n\n    const navigatorAddressToShow =\n        this.currentNavigatorMode === Mode.Submitted ? formatAddress(this.address) : this.currentNavigatorAddressLine;\n    const navigatorAddressIsValid = this.isValidAddress(navigatorAddressToShow);\n\n    const invalidAddressMsg = i18nString(\n        UIStrings.addressHasToBeANumberBetweenSAnd,\n        {PH1: formatAddress(0), PH2: formatAddress(this.outerMemoryLength)});\n\n    const errorMsg = navigatorAddressIsValid ? undefined : invalidAddressMsg;\n\n    const canGoBackInHistory = this.history.canRollback();\n    const canGoForwardInHistory = this.history.canRollover();\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>\n        :host {\n          flex: auto;\n          display: flex;\n        }\n\n        .view {\n          width: 100%;\n          display: flex;\n          flex: 1;\n          flex-direction: column;\n          font-family: var(--monospace-font-family);\n          font-size: var(--monospace-font-size);\n          padding: 9px 12px 9px 7px;\n        }\n\n        devtools-linear-memory-inspector-navigator + devtools-linear-memory-inspector-viewer {\n          margin-top: 12px;\n        }\n\n        .value-interpreter {\n          display: flex;\n        }\n      </style>\n      <div class=\"view\">\n        <${LinearMemoryNavigator.litTagName}\n          .data=${{address: navigatorAddressToShow, valid: navigatorAddressIsValid, mode: this.currentNavigatorMode, error: errorMsg, canGoBackInHistory, canGoForwardInHistory} as LinearMemoryNavigatorData}\n          @refreshrequested=${this.onRefreshRequest}\n          @addressinputchanged=${this.onAddressChange}\n          @pagenavigation=${this.navigatePage}\n          @historynavigation=${this.navigateHistory}></${LinearMemoryNavigator.litTagName}>\n        <${LinearMemoryViewer.litTagName}\n          .data=${{memory: this.memory.slice(start - this.memoryOffset, end - this.memoryOffset), address: this.address, memoryOffset: start, focus: this.currentNavigatorMode === Mode.Submitted} as LinearMemoryViewerData}\n          @byteselected=${this.onByteSelected}\n          @resize=${this.resize}>\n        </${LinearMemoryViewer.litTagName}>\n      </div>\n      <div class=\"value-interpreter\">\n        <${LinearMemoryValueInterpreter.litTagName}\n          .data=${{\n            value: this.memory.slice(this.address - this.memoryOffset, this.address + VALUE_INTEPRETER_MAX_NUM_BYTES).buffer,\n            valueTypes: this.valueTypes,\n            valueTypeModes: this.valueTypeModes,\n            endianness: this.endianness,\n            memoryLength: this.outerMemoryLength } as LinearMemoryValueInterpreterData}\n          @valuetypetoggled=${this.onValueTypeToggled}\n          @valuetypemodechanged=${this.onValueTypeModeChanged}\n          @endiannesschanged=${this.onEndiannessChanged}\n          @jumptopointeraddress=${this.onJumpToPointerAddress}\n          >\n        </${LinearMemoryValueInterpreter.litTagName}/>\n      </div>\n      `, this.shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  private onJumpToPointerAddress(e: JumpToPointerAddressEvent): void {\n    // Stop event from bubbling up, since no element further up needs the event.\n    e.stopPropagation();\n    this.currentNavigatorMode = Mode.Submitted;\n    const addressInRange = Math.max(0, Math.min(e.data, this.outerMemoryLength - 1));\n    this.jumpToAddress(addressInRange);\n  }\n\n  private onRefreshRequest(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n    this.dispatchEvent(new MemoryRequestEvent(start, end, this.address));\n  }\n\n  private onByteSelected(e: ByteSelectedEvent): void {\n    this.currentNavigatorMode = Mode.Submitted;\n    const addressInRange = Math.max(0, Math.min(e.data, this.outerMemoryLength - 1));\n    this.jumpToAddress(addressInRange);\n  }\n\n  private createSettings(): Settings {\n    return {valueTypes: this.valueTypes, modes: this.valueTypeModes, endianness: this.endianness};\n  }\n\n  private onEndiannessChanged(e: EndiannessChangedEvent): void {\n    this.endianness = e.data;\n    this.dispatchEvent(new SettingsChangedEvent(this.createSettings()));\n    this.render();\n  }\n\n  private isValidAddress(address: string): boolean {\n    const newAddress = parseAddress(address);\n    return newAddress !== undefined && newAddress >= 0 && newAddress < this.outerMemoryLength;\n  }\n\n  private onAddressChange(e: AddressInputChangedEvent): void {\n    const {address, mode} = e.data;\n    const isValid = this.isValidAddress(address);\n    const newAddress = parseAddress(address);\n    this.currentNavigatorAddressLine = address;\n\n    if (newAddress !== undefined && isValid) {\n      this.currentNavigatorMode = mode;\n      this.jumpToAddress(newAddress);\n      return;\n    }\n\n    if (mode === Mode.Submitted && !isValid) {\n      this.currentNavigatorMode = Mode.InvalidSubmit;\n    } else {\n      this.currentNavigatorMode = Mode.Edit;\n    }\n\n    this.render();\n  }\n\n  private onValueTypeToggled(e: ValueTypeToggledEvent): void {\n    const {type, checked} = e.data;\n    if (checked) {\n      this.valueTypes.add(type);\n    } else {\n      this.valueTypes.delete(type);\n    }\n    this.dispatchEvent(new SettingsChangedEvent(this.createSettings()));\n    this.render();\n  }\n\n  private onValueTypeModeChanged(e: ValueTypeModeChangedEvent): void {\n    e.stopImmediatePropagation();\n    const {type, mode} = e.data;\n    this.valueTypeModes.set(type, mode);\n    this.dispatchEvent(new SettingsChangedEvent(this.createSettings()));\n    this.render();\n  }\n\n  private navigateHistory(e: HistoryNavigationEvent): boolean {\n    return e.data === Navigation.Forward ? this.history.rollover() : this.history.rollback();\n  }\n\n  private navigatePage(e: PageNavigationEvent): void {\n    const newAddress =\n        e.data === Navigation.Forward ? this.address + this.numBytesPerPage : this.address - this.numBytesPerPage;\n    const addressInRange = Math.max(0, Math.min(newAddress, this.outerMemoryLength - 1));\n    this.jumpToAddress(addressInRange);\n  }\n\n  private jumpToAddress(address: number): void {\n    if (address < 0 || address >= this.outerMemoryLength) {\n      console.warn(`Specified address is out of bounds: ${address}`);\n      return;\n    }\n    this.setAddress(address);\n    this.update();\n  }\n\n  private getPageRangeForAddress(address: number, numBytesPerPage: number): {start: number, end: number} {\n    const pageNumber = Math.floor(address / numBytesPerPage);\n    const pageStartAddress = pageNumber * numBytesPerPage;\n    const pageEndAddress = Math.min(pageStartAddress + numBytesPerPage, this.outerMemoryLength);\n    return {start: pageStartAddress, end: pageEndAddress};\n  }\n\n  private resize(event: ResizeEvent): void {\n    this.numBytesPerPage = event.data;\n    this.update();\n  }\n\n  private update(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n    if (start < this.memoryOffset || end > this.memoryOffset + this.memory.length) {\n      this.dispatchEvent(new MemoryRequestEvent(start, end, this.address));\n    } else {\n      this.render();\n    }\n  }\n\n  private setAddress(address: number): void {\n    // If we are already showing the address that is requested, no need to act upon it.\n    if (this.address === address) {\n      return;\n    }\n    const historyEntry = new AddressHistoryEntry(address, () => this.jumpToAddress(address));\n    this.history.push(historyEntry);\n    this.address = address;\n    this.dispatchEvent(new AddressChangedEvent(this.address));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-linear-memory-inspector-inspector', LinearMemoryInspector);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-inspector': LinearMemoryInspector;\n  }\n}\n"]}