{"version":3,"file":"LinearMemoryInspectorPane.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAG7C,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC,CAAE,qCAAqC;AAExG,OAAO,EAAC,+BAA+B,EAAC,MAAM,sCAAsC,CAAC,CAAE,qCAAqC;AAE5H,MAAM,SAAS,GAAG;IAChB;;;MAGE;IACF,iBAAiB,EAAE,qBAAqB;CACzC,CAAC;AACF,MAAM,IAAI,GACN,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,oEAAoE,EAAE,SAAS,CAAC,CAAC;AACjH,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,IAAI,iBAAgD,CAAC;AAErD,IAAI,eAAwB,CAAC;AAE7B,MAAM,OAAO,OAAQ,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IACzC,IAAI,CAAgC;IACpC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,6BAA6B,CAAC,QAAQ,EAAE,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,eAAe,IAAI,QAAQ,EAAE;YAChC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;SACjC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;CACF;AAED,MAAM,OAAO,6BAA8B,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IAC/D,WAAW,CAA2B;IACtC,qBAAqB,CAAyC;IAC9D;QACE,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,WAAW,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClE,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE3C,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,EAAE,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,iBAAiB,EAAE;YACtB,iBAAiB,GAAG,IAAI,6BAA6B,EAAE,CAAC;SACzD;QACD,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,KAAa,EAAE,KAAa,EAAE,YAA4B,EAAE,OAAgB;QACjF,MAAM,aAAa,GAAG,IAAI,yBAAyB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAC3E,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAChF,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,KAAa;QACjB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,KAAa,EAAE,OAAgB;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,qDAAqD,KAAK,EAAE,CAAC,CAAC;SAC/E;QAED,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC7B;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,6CAA6C,KAAK,EAAE,CAAC,CAAC;SACvE;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,UAAU,CAAC,KAA0C;QACnD,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,wBAAwB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC;CACF;AAED,MAAM,yBAA0B,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IACpD,cAAc,CAAiB;IAC/B,QAAQ,CAAS;IACjB,UAAU,CAAwB;IAClC,aAAa,CAAU;IACvB,YAAY,aAA6B,EAAE,UAA4B,CAAC;QACtE,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,aAAa,CAAC,MAAM,EAAE,EAAE;YACpD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QAED,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC,KAAY,EAAE,EAAE;YACjE,mEAAmE;YACnE,8DAA8D;YAC9D,IAAI,CAAC,gBAAgB,CAAE,KAAa,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,KAAY,EAAE,EAAE;YAClE,mEAAmE;YACnE,8DAA8D;YAC9D,IAAI,CAAC,aAAa,CAAE,KAAa,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,KAAY,EAAE,EAAE;YACnE,4EAA4E;YAC5E,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,mEAAmE;YACnE,8DAA8D;YAC9D,IAAI,CAAC,YAAY,CAAE,KAAa,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,YAAY,CAAC,QAAkB;QAC7B,+BAA+B,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACpE,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,+BAA+B,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,MAAM,EAAE,MAAM,EAAC,EAAE,EAAE;YAChH,IAAI,UAAU,CAAC;YACf,IAAI,cAAc,CAAC;YACnB,IAAI,UAAU,CAAC;YACf,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,MAAM,QAAQ,GAAG,+BAA+B,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE,CAAC;gBAC3E,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBACjC,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAChC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;aAC5B;YACD,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG;gBACrB,MAAM;gBACN,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,YAAY,EAAE,MAAM;gBACpB,iBAAiB,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;gBAC/C,UAAU;gBACV,cAAc;gBACd,UAAU;aACX,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,KAA0C;QACzD,MAAM,EAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAC,GAAI,KAAK,CAAC,IAInC,CAAC;QACH,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,IAAI,GAAG,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QAED,+BAA+B,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5F,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG;gBACrB,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,OAAO;gBAChB,YAAY,EAAE,KAAK;gBACnB,iBAAiB,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;aAChD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport type * as Common from '../../../core/common/common.js'; // eslint-disable-line no-unused-vars\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as UI from '../../legacy/legacy.js';\n\nimport type {Settings} from './LinearMemoryInspector.js';\nimport {LinearMemoryInspector} from './LinearMemoryInspector.js';  // eslint-disable-line no-unused-vars\nimport type {LazyUint8Array} from './LinearMemoryInspectorController.js';\nimport {LinearMemoryInspectorController} from './LinearMemoryInspectorController.js';  // eslint-disable-line no-unused-vars\n\nconst UIStrings = {\n  /**\n  *@description Label in the Linear Memory Inspector tool that serves as a placeholder if no inspections are open (i.e. nothing to see here).\n  *             Inspection hereby refers to viewing, navigating and understanding the memory through this tool.\n  */\n  noOpenInspections: 'No open inspections',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet inspectorInstance: LinearMemoryInspectorPaneImpl;\n\nlet wrapperInstance: Wrapper;\n\nexport class Wrapper extends UI.Widget.VBox {\n  view: LinearMemoryInspectorPaneImpl;\n  private constructor() {\n    super();\n    this.view = LinearMemoryInspectorPaneImpl.instance();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Wrapper {\n    const {forceNew} = opts;\n    if (!wrapperInstance || forceNew) {\n      wrapperInstance = new Wrapper();\n    }\n\n    return wrapperInstance;\n  }\n\n  wasShown(): void {\n    this.view.show(this.contentElement);\n  }\n}\n\nexport class LinearMemoryInspectorPaneImpl extends UI.Widget.VBox {\n  _tabbedPane: UI.TabbedPane.TabbedPane;\n  _tabIdToInspectorView: Map<string, LinearMemoryInspectorView>;\n  constructor() {\n    super(false);\n    const placeholder = document.createElement('div');\n    placeholder.textContent = i18nString(UIStrings.noOpenInspections);\n    placeholder.style.display = 'flex';\n    this._tabbedPane = new UI.TabbedPane.TabbedPane();\n    this._tabbedPane.setPlaceholderElement(placeholder);\n    this._tabbedPane.setCloseableTabs(true);\n    this._tabbedPane.setAllowTabReorder(true, true);\n    this._tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, this._tabClosed, this);\n    this._tabbedPane.show(this.contentElement);\n\n    this._tabIdToInspectorView = new Map();\n  }\n\n  static instance(): LinearMemoryInspectorPaneImpl {\n    if (!inspectorInstance) {\n      inspectorInstance = new LinearMemoryInspectorPaneImpl();\n    }\n    return inspectorInstance;\n  }\n\n  create(tabId: string, title: string, arrayWrapper: LazyUint8Array, address?: number): void {\n    const inspectorView = new LinearMemoryInspectorView(arrayWrapper, address);\n    this._tabIdToInspectorView.set(tabId, inspectorView);\n    this._tabbedPane.appendTab(tabId, title, inspectorView, undefined, false, true);\n    this._tabbedPane.selectTab(tabId);\n  }\n\n  close(tabId: string): void {\n    this._tabbedPane.closeTab(tabId, false);\n  }\n\n  reveal(tabId: string, address?: number): void {\n    const view = this._tabIdToInspectorView.get(tabId);\n    if (!view) {\n      throw new Error(`No linear memory inspector view for given tab id: ${tabId}`);\n    }\n\n    if (address !== undefined) {\n      view.updateAddress(address);\n    }\n    this.refreshView(tabId);\n    this._tabbedPane.selectTab(tabId);\n  }\n\n  refreshView(tabId: string): void {\n    const view = this._tabIdToInspectorView.get(tabId);\n    if (!view) {\n      throw new Error(`View for specified tab id does not exist: ${tabId}`);\n    }\n    view.refreshData();\n  }\n\n  _tabClosed(event: Common.EventTarget.EventTargetEvent): void {\n    const tabId = event.data.tabId;\n    this._tabIdToInspectorView.delete(tabId);\n    this.dispatchEventToListeners('view-closed', tabId);\n  }\n}\n\nclass LinearMemoryInspectorView extends UI.Widget.VBox {\n  _memoryWrapper: LazyUint8Array;\n  _address: number;\n  _inspector: LinearMemoryInspector;\n  firstTimeOpen: boolean;\n  constructor(memoryWrapper: LazyUint8Array, address: number|undefined = 0) {\n    super(false);\n\n    if (address < 0 || address >= memoryWrapper.length()) {\n      throw new Error('Requested address is out of bounds.');\n    }\n\n    this._memoryWrapper = memoryWrapper;\n    this._address = address;\n    this._inspector = new LinearMemoryInspector();\n    this._inspector.addEventListener('memoryrequest', (event: Event) => {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._memoryRequested((event as any));\n    });\n    this._inspector.addEventListener('addresschanged', (event: Event) => {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.updateAddress((event as any).data);\n    });\n    this._inspector.addEventListener('settingschanged', (event: Event) => {\n      // Stop event from bubbling up, since no element further up needs the event.\n      event.stopPropagation();\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.saveSettings((event as any).data);\n    });\n    this.contentElement.appendChild(this._inspector);\n    this.firstTimeOpen = true;\n  }\n\n  wasShown(): void {\n    this.refreshData();\n  }\n\n  saveSettings(settings: Settings): void {\n    LinearMemoryInspectorController.instance().saveSettings(settings);\n  }\n\n  updateAddress(address: number): void {\n    if (address < 0 || address >= this._memoryWrapper.length()) {\n      throw new Error('Requested address is out of bounds.');\n    }\n    this._address = address;\n  }\n\n  refreshData(): void {\n    LinearMemoryInspectorController.getMemoryForAddress(this._memoryWrapper, this._address).then(({memory, offset}) => {\n      let valueTypes;\n      let valueTypeModes;\n      let endianness;\n      if (this.firstTimeOpen) {\n        const settings = LinearMemoryInspectorController.instance().loadSettings();\n        valueTypes = settings.valueTypes;\n        valueTypeModes = settings.modes;\n        endianness = settings.endianness;\n        this.firstTimeOpen = false;\n      }\n      this._inspector.data = {\n        memory,\n        address: this._address,\n        memoryOffset: offset,\n        outerMemoryLength: this._memoryWrapper.length(),\n        valueTypes,\n        valueTypeModes,\n        endianness,\n      };\n    });\n  }\n\n  _memoryRequested(event: Common.EventTarget.EventTargetEvent): void {\n    const {start, end, address} = (event.data as {\n      start: number,\n      end: number,\n      address: number,\n    });\n    if (address < start || address >= end) {\n      throw new Error('Requested address is out of bounds.');\n    }\n\n    LinearMemoryInspectorController.getMemoryRange(this._memoryWrapper, start, end).then(memory => {\n      this._inspector.data = {\n        memory: memory,\n        address: address,\n        memoryOffset: start,\n        outerMemoryLength: this._memoryWrapper.length(),\n      };\n    });\n  }\n}\n"]}