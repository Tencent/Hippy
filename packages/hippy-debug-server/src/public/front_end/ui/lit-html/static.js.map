{"version":3,"file":"static.js","sourceRoot":"","sources":["../../../../../../front_end/ui/lit-html/static.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../third_party/lit-html/lit-html.js';\n\nexport interface Static {\n  value: unknown;\n  $$static$$: true;\n}\n\ntype TemplateValues = Static|unknown;\ntype FlattenedTemplateValues = {\n  strings: TemplateStringsArray,\n  valueMap: boolean[],\n};\n\nexport function flattenTemplate(strings: TemplateStringsArray, ...values: TemplateValues[]): FlattenedTemplateValues {\n  const valueMap: boolean[] = [];\n  const newStrings: string[] = [];\n\n  // Start with an empty buffer and start running over the values.\n  let buffer = '';\n  for (let v = 0; v < values.length; v++) {\n    const possibleStatic = values[v];\n    if (isStaticLiteral(possibleStatic)) {\n      // If this is a static literal, add the current string plus the\n      // static literal's value to the buffer.\n      buffer += strings[v] + possibleStatic.value;\n\n      // Filter this value in future invocations.\n      valueMap.push(false);\n    } else {\n      // If we reach a non-static value, push what we have on to\n      // the new strings array, and reset the buffer.\n      buffer += strings[v];\n      newStrings.push(buffer);\n      buffer = '';\n\n      // Include this value in future invocations.\n      valueMap.push(true);\n    }\n  }\n\n  // Since the strings length is always the values length + 1, we need\n  // to append whatever that final string is to whatever is left in the\n  // buffer, and flush both out to the newStrings.\n  newStrings.push(buffer + strings[values.length]);\n  (newStrings as unknown as {raw: readonly string[]}).raw = [...newStrings];\n  return {strings: newStrings as unknown as TemplateStringsArray, valueMap};\n}\n\nexport function html(strings: TemplateStringsArray, ...values: TemplateValues[]): LitHtml.TemplateResult {\n  if (values.some(value => isStaticLiteral(value))) {\n    return htmlWithStatics(strings, ...values);\n  }\n\n  return LitHtml.html(strings, ...values);\n}\n\nexport function literal(value: TemplateStringsArray): Static {\n  return {\n    value: value[0],\n    $$static$$: true,\n  };\n}\n\nfunction isStaticLiteral(item: TemplateValues|unknown): item is Static {\n  return typeof item === 'object' && (item !== null && '$$static$$' in item);\n}\n\nconst flattenedTemplates = new WeakMap<TemplateStringsArray, FlattenedTemplateValues>();\nfunction htmlWithStatics(strings: TemplateStringsArray, ...values: TemplateValues[]): LitHtml.TemplateResult {\n  // Check to see if we've already converted this before.\n  const existing = flattenedTemplates.get(strings);\n  if (existing) {\n    const filteredValues = values.filter((a, index) => {\n      if (!existing) {\n        return false;\n      }\n\n      return existing.valueMap[index];\n    });\n\n    // Pass through to Lit.\n    return LitHtml.html(existing.strings, ...filteredValues);\n  }\n\n  flattenedTemplates.set(strings, flattenTemplate(strings, ...values));\n  return htmlWithStatics(strings, ...values);\n}\n"]}