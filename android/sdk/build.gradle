/*
 *
 * Tencent is pleased to support the open source community by making
 * Hippy available.
 *
 * Copyright (C) 2022 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply from: './publish.gradle'

buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$AGP_VERSION"
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
  }
}

android {
  archivesBaseName = ARCHIVES_BASE_NAME
  compileSdkVersion COMPILE_VERSION as int
  ndkVersion = NDK_VERSION
  defaultConfig {
    minSdkVersion MIN_VERSION as int
    targetSdkVersion TARGET_VERSION as int
    versionName VERSION_NAME

    // 保证app使用aar时，会自动将该proguard文件添加到本身的proguard规则中
    consumerProguardFiles 'proguard-rules.pro'

    buildConfigField("boolean", "ENABLE_SO_DOWNLOAD", ENABLE_SO_DOWNLOAD)
    buildConfigField("String", "LIBRARY_VERSION", "String.valueOf(\"$VERSION_NAME\")")

    packagingOptions {
      if (!INCLUDE_ABI_ARMEABI.toBoolean()) {
        exclude 'lib/armeabi/*'
      }
      if (!INCLUDE_ABI_ARMEABI_V7A.toBoolean() && !INCLUDE_ABI_ARMEABI.toBoolean()) {
        exclude 'lib/armeabi-v7a/*'
      }
      if (!INCLUDE_ABI_ARM64_V8A.toBoolean()) {
        exclude 'lib/arm64-v8a/*'
      }
      if (!INCLUDE_ABI_X86.toBoolean()) {
        exclude 'lib/x86/*'
      }
      if (!INCLUDE_ABI_X86_64.toBoolean()) {
        exclude 'lib/x86_64/*'
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      externalNativeBuild {
        cmake {
          arguments "-DJS_ENGINE=V8",
                  "-DANDROID_CPP_FEATURES=no-rtti no-exceptions",
                  "-DANDROID_PLATFORM=android-21",
                  "-DANDROID_ARM_NEON=${INCLUDE_ABI_ARMEABI.toBoolean() ? 'FALSE' : 'TRUE'}",
                  "-DCMAKE_BUILD_TYPE=Release",
                  "-DANDROID_STL=$ANDROID_STL",
                  "-DV8_COMPONENT=$V8_COMPONENT",
                  "-DHIDDEN_LIBRARY_SYMBOL=$HIDDEN_LIBRARY_SYMBOL"

          if (INCLUDE_ABI_ARMEABI_V7A.toBoolean() || INCLUDE_ABI_ARMEABI.toBoolean()) {
            abiFilters 'armeabi-v7a'
          }
          if (INCLUDE_ABI_ARM64_V8A.toBoolean()) {
            abiFilters 'arm64-v8a'
          }
          if (INCLUDE_ABI_X86.toBoolean()) {
            abiFilters 'x86'
          }
          if (INCLUDE_ABI_X86_64.toBoolean()) {
            abiFilters 'x86_64'
          }
        }
      }
    }
    debug {
      minifyEnabled false
      externalNativeBuild {
        cmake {
          arguments "-DJS_ENGINE=V8",
                  "-DANDROID_CPP_FEATURES=no-rtti no-exceptions",
                  "-DANDROID_PLATFORM=android-21",
                  "-DANDROID_ARM_NEON=${INCLUDE_ABI_ARMEABI.toBoolean() ? 'FALSE' : 'TRUE'}",
                  "-DCMAKE_BUILD_TYPE=Debug",
                  "-DANDROID_STL=$ANDROID_STL",
                  "-DV8_COMPONENT=$V8_COMPONENT",
                  "-DHIDDEN_LIBRARY_SYMBOL=$HIDDEN_LIBRARY_SYMBOL"

          if (INCLUDE_ABI_ARMEABI_V7A.toBoolean() || INCLUDE_ABI_ARMEABI.toBoolean()) {
            abiFilters 'armeabi-v7a'
          }
          if (INCLUDE_ABI_ARM64_V8A.toBoolean()) {
            abiFilters 'arm64-v8a'
          }
          if (INCLUDE_ABI_X86.toBoolean()) {
            abiFilters 'x86'
          }
          if (INCLUDE_ABI_X86_64.toBoolean()) {
            abiFilters 'x86_64'
          }
        }
      }
    }
  }

  if (!SKIP_CMAKE_AND_NINJA.toBoolean() && System.getenv('skipCmakeAndNinja') == null) {
    externalNativeBuild {
      cmake {
        path "src/main/jni/CMakeLists.txt"
        version CMAKE_VERSION
      }
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }
}

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])
  //noinspection GradleDependency
  implementation 'androidx.annotation:annotation:1.0.0'
  api 'androidx.recyclerview:recyclerview:1.1.0'
  api 'androidx.viewpager:viewpager:1.0.0'

  testImplementation "junit:junit:4.13.2"
  testImplementation "org.mockito:mockito-core:2.8.9"
  testImplementation "org.mockito:mockito-android:2.8.9"
  testImplementation "org.powermock:powermock-module-junit4:2.0.7"
  testImplementation "org.powermock:powermock-api-mockito2:2.0.7"
  testImplementation 'org.powermock:powermock-core:2.0.7'
  testImplementation "org.powermock:powermock-module-junit4-rule:2.0.7"
  testImplementation "org.powermock:powermock-classloading-xstream:2.0.7"
  testImplementation "org.robolectric:robolectric:4.4"
}

project.tasks.whenTaskAdded { task ->
  if (task.name == 'assembleRelease') {
    task.finalizedBy dealAfterAssembleRelease
  }

  if (task.name == 'assembleDebug') {
    task.finalizedBy dealAfterAssembleDebug
  }

  if (task.name == 'mergeReleaseNativeLibs') {
    task.finalizedBy dealAfterMergeReleaseNativeLibs
  }

  if (task.name == 'mergeDebugNativeLibs') {
    task.finalizedBy dealAfterMergeDebugNativeLibs
  }

  if (task.name == 'stripReleaseDebugSymbols') {
    task.finalizedBy dealAfterStripReleaseDebugSymbols
  }

  if (task.name == 'stripDebugDebugSymbols') {
    task.finalizedBy dealAfterStripDebugDebugSymbols
  }
}

def dealAfterMergeNativeLibs(mergedNativeLibsPath) {
  EXCLUDE_LIBRARY_FILES.tokenize(";").each{filename ->
    if (INCLUDE_ABI_ARMEABI_V7A.toBoolean() || INCLUDE_ABI_ARMEABI.toBoolean()) {
      delete "$mergedNativeLibsPath/armeabi-v7a/$filename"
    }
    if (INCLUDE_ABI_ARM64_V8A.toBoolean()) {
      delete "$mergedNativeLibsPath/arm64-v8a/$filename"
    }
    if (INCLUDE_ABI_X86.toBoolean()) {
      delete "$mergedNativeLibsPath/x86/$filename"
    }
    if (INCLUDE_ABI_X86_64.toBoolean()) {
      delete "$mergedNativeLibsPath/x86_64/$filename"
    }
  }
}

def MERGED_NATIVE_LIBS_PATH = "$buildDir/intermediates/merged_native_libs"
task dealAfterMergeReleaseNativeLibs() {
  doLast {
    dealAfterMergeNativeLibs("$MERGED_NATIVE_LIBS_PATH/release/out/lib")
  }
}

task dealAfterMergeDebugNativeLibs() {
  doLast {
    dealAfterMergeNativeLibs("$MERGED_NATIVE_LIBS_PATH/debug/out/lib")
  }
}

def dealAfterStripSymbols(strippedNativeLibsPath) {
  delete "$strippedNativeLibsPath/armeabi"
  if (INCLUDE_ABI_ARMEABI.toBoolean()) {
    copy {
      from "$strippedNativeLibsPath/armeabi-v7a"
      into "$strippedNativeLibsPath/armeabi"
    }
    if (!INCLUDE_ABI_ARMEABI_V7A.toBoolean()) {
      delete "$strippedNativeLibsPath/armeabi-v7a"
    }
  }
}

def STRIPPED_NATIVE_LIBS_PATH = "$buildDir/intermediates/stripped_native_libs"
task dealAfterStripReleaseDebugSymbols() {
  doLast {
    dealAfterStripSymbols("$STRIPPED_NATIVE_LIBS_PATH/release/out/lib")
  }
}

task dealAfterStripDebugDebugSymbols() {
  doLast {
    dealAfterStripSymbols("$STRIPPED_NATIVE_LIBS_PATH/debug/out/lib")
  }
}

def dealAfterAssemble(outputPath, buildType) {
  file("$outputPath/$buildType").deleteDir()
  File target = file("$outputPath/$ARCHIVES_BASE_NAME" + ".aar")
  delete target
  file(outputPath).list().each{fileName ->
    if (fileName.contains(buildType + ".aar")) {
      copy {
        from zipTree("$outputPath/$fileName")
        into "$outputPath/$buildType"
      }
      copy {
        from "$outputPath/$buildType"
        into outputPath
        include 'classes.jar'
        rename 'classes.jar', 'hippy.jar'
      }
      file("$outputPath/$fileName").renameTo(target)
    }
  }
}

def OUTPUT_PATH = "$buildDir/outputs/aar"
task dealAfterAssembleDebug() {
  doLast {
    dealAfterAssemble(OUTPUT_PATH, "debug")
  }
}

task dealAfterAssembleRelease() {
  doLast {
    dealAfterAssemble(OUTPUT_PATH, "release")
    copy {
      from "$OUTPUT_PATH/$ARCHIVES_BASE_NAME-release.aar"
      into "$projectDir.absolutePath/../../examples/android-demo/example/libs"
    }
  }
}
