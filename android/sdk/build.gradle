apply plugin: 'com.android.library'
apply from: './bintrayUpload.gradle'

ext {
  CMAKE_PATH = "$projectDir.absolutePath/src/main/jni/CMakeLists.txt"
  OUTPUT_PATH = "$buildDir/outputs/aar/"
  THIRD_PARTY_LIBRARY_PATH = "$projectDir.absolutePath/src/main/jni/third_party"
  JNI_LIBRARY_PATH = "$projectDir.absolutePath/libs"
}

buildscript {
  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.0+'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  ext {
    Properties localProperties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    localProperties.load(inputStream)

    MAVEN_USER = localProperties.getProperty('maven_username')
    MAVEN_PWD = localProperties.getProperty('maven_password')
    MAVEN_URL = localProperties.getProperty('maven_url')

    println("===============MAVEN_USER=" + MAVEN_USER + ", MAVEN_PWD=" + MAVEN_PWD)
  }

  repositories {
    if (MAVEN_URL != null) {
      maven {
        url MAVEN_URL
        credentials {
          username MAVEN_USER
          password MAVEN_PWD
        }
      }
    }
    google()
    jcenter()
  }
}

android {
  archivesBaseName = ARCHIVES_BASE_NAME
  compileSdkVersion COMPILE_SDK_VERSION as int
  buildToolsVersion BUILD_TOOLS_VERSION
  defaultConfig {
    minSdkVersion MIN_SDK_VERSION as int
    targetSdkVersion TARGET_SDK_VERSION as int
    versionCode VERSION_CODE as int
    versionName VERSION_NAME

    // 保证app使用aar时，会自动将该proguard文件添加到本身的proguard规则中
    consumerProguardFiles 'proguard-rules.pro'

    buildConfigField("String", "PRODUCT_FLAVORS", "\"" + PRODUCT_FLAVORS + "\"")
    buildConfigField("boolean", "ENABLE_SO_DOWNLOAD", (PRODUCT_FLAVORS == 'QQ') ? "false" : "true")

    packagingOptions {
      pickFirst 'lib/armeabi-v7a/libmtt_shared.so'
      pickFirst 'lib/armeabi-v7a/libmttv8.so'
      pickFirst 'lib/armeabi-v7a/libhippybridge.so'
      pickFirst 'lib/arm64-v8a/libmtt_shared.so'
      pickFirst 'lib/arm64-v8a/libmttv8.so'
      pickFirst 'lib/arm64-v8a/libhippybridge.so'
      pickFirst 'lib/x86/libmtt_shared.so'
      pickFirst 'lib/x86/libmttv8.so'
      pickFirst 'lib/x86/libhippybridge.so'
      pickFirst 'lib/x86_64/libmtt_shared.so'
      pickFirst 'lib/x86_64/libmttv8.so'
      pickFirst 'lib/x86_64/libhippybridge.so'
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      externalNativeBuild {
        cmake {
          arguments "-DJS_ENGINE=V8",
                  "-DANDROID_CPP_FEATURES=rtti exceptions",
                  "-DANDROID_PLATFORM=android-21",
                  "-DCMAKE_BUILD_TYPE=Release",
                  "-DV8_VERSION=$V8_VERSION"

          if (PRODUCT_FLAVORS == 'SIMULATOR') {
            abiFilters 'x86', 'x86_64'
          } else {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
          }
        }
      }
    }
    debug {
      minifyEnabled false
      externalNativeBuild {
        cmake {
          arguments "-DJS_ENGINE=V8",
                  "-DANDROID_CPP_FEATURES=rtti exceptions",
                  "-DANDROID_PLATFORM=android-21",
                  "-DCMAKE_BUILD_TYPE=Debug",
                  "-DV8_VERSION=$V8_VERSION"

          if (PRODUCT_FLAVORS == 'SIMULATOR') {
            abiFilters 'x86_64'
          } else {
            abiFilters 'arm64-v8a'
          }
        }
      }
    }
  }

  externalNativeBuild {
    cmake {
      path CMAKE_PATH
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  sourceSets{
    main {
      if (PRODUCT_FLAVORS == 'QB') {
        java.exclude("com/tencent/mtt/supportui/**")
        java.exclude("com/tencent/mtt/hippy/views/videoview/**")
      } else if (PRODUCT_FLAVORS == 'QQ') {
        java.exclude("com/tencent/mtt/hippy/views/videoview/**")
      }

      jniLibs.srcDirs = ['libs']
    }
  }
}

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'com.android.support:support-annotations:28.0.0'
  if (PRODUCT_FLAVORS == 'QB') {
    compileOnly('com.tencent.mtt:support-ui:99.1.0')
  }
}

task clearJNILibs() {
  File libs = new File(JNI_LIBRARY_PATH);
  if (libs.exists()) {
    libs.deleteDir()
  }
}

task installJNILibs(dependsOn: clearJNILibs) {
  def arches = (PRODUCT_FLAVORS == 'SIMULATOR') ? ['x86', 'x86_64'] : ['armeabi-v7a', 'arm64-v8a']
  for (arch in arches) {
    copy {
      from "$THIRD_PARTY_LIBRARY_PATH/$V8_VERSION/v8/$arch/libmtt_shared.so",
              "$THIRD_PARTY_LIBRARY_PATH/$V8_VERSION/v8/$arch/libmttv8.so",
              "$THIRD_PARTY_LIBRARY_PATH/layout/$arch/libflexbox.so"
      into "$JNI_LIBRARY_PATH/$arch/"
    }
  }
}

afterEvaluate {
  installJNILibs
  android.libraryVariants.each { variant ->
    def assembleTask
    if (variant.buildType.name == 'release') {
      assembleTask = project.tasks.findByName('assembleRelease')
    } else {
      assembleTask = project.tasks.findByName('assembleDebug')
    }
    assembleTask.finalizedBy dealAfterBuild
  }
}

task dealAfterBuild() {
  doLast {
    file(OUTPUT_PATH).list().each{fileName ->
      if (fileName.contains(".aar")) {
        copy {
          from zipTree("$OUTPUT_PATH/$fileName")
          into OUTPUT_PATH
          include 'classes.jar', 'jni/'
          rename 'classes.jar', 'hippy.jar'
        }
      }
    }
  }
}
