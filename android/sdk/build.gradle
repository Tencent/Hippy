apply plugin: 'com.android.library'
apply from: './bintrayUpload.gradle'

buildscript {
  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.0+'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    jcenter()
  }
}

ext {
  println("===============projectDir.absolutePath=" + projectDir.absolutePath)
  ARCHIVES_BASE_NAME = "android-sdk"
  V8_VERSION = "v8_72"
  CMAKE_PATH = "$projectDir.absolutePath/src/main/jni/CMakeLists.txt"
  OUTPUT_DIR = "$buildDir/outputs/aar/"
}

android {
  archivesBaseName = ARCHIVES_BASE_NAME
  compileSdkVersion 29
  buildToolsVersion '30.0.3'
  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"

    // 保证app使用aar时，会自动将该proguard文件添加到本身的proguard规则中
    consumerProguardFiles 'proguard-rules.pro'

    externalNativeBuild {
      cmake {
        arguments "-DJS_ENGINE=V8",
                "-DANDROID_CPP_FEATURES=rtti exceptions",
                "-DANDROID_PLATFORM=android-21",
                "-DCMAKE_BUILD_TYPE=Release",
                "-DV8_VERSION=${V8_VERSION}"

        abiFilters 'armeabi-v7a', 'arm64-v8a'
        //'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
      }
    }

    packagingOptions {
      pickFirst 'lib/armeabi-v7a/libmtt_shared.so'
      pickFirst 'lib/armeabi-v7a/libmttv8.so'
      pickFirst 'lib/armeabi-v7a/libhippybridge.so'
      pickFirst 'lib/arm64-v8a/libmtt_shared.so'
      pickFirst 'lib/arm64-v8a/libmttv8.so'
      pickFirst 'lib/arm64-v8a/libhippybridge.so'
      pickFirst 'lib/x86/libmtt_shared.so'
      pickFirst 'lib/x86/libmttv8.so'
      pickFirst 'lib/x86/libhippybridge.so'
      pickFirst 'lib/x86_64/libmtt_shared.so'
      pickFirst 'lib/x86_64/libmttv8.so'
      pickFirst 'lib/x86_64/libhippybridge.so'
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      minifyEnabled false
    }
  }

  externalNativeBuild {
    cmake {
      path CMAKE_PATH
    }
  }

  sourceSets.main {
    jni.srcDirs = []
    jniLibs.srcDirs = ['libs']
  }
}

dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])
}

task dealAfterEvaluate() {
  copy {
    from "src/main/jni/third_party/$V8_VERSION/v8/x86"
    into "libs/x86/"
    include "libmtt_shared.so", "libmttv8.so"
  }
  copy {
    from "src/main/jni/third_party/$V8_VERSION/v8/x86_64"
    into "libs/x86_64/"
    include "libmtt_shared.so", "libmttv8.so"
  }
  copy {
    from "src/main/jni/third_party/$V8_VERSION/v8/arm64-v8a"
    into "libs/arm64-v8a/"
    include "libmtt_shared.so", "libmttv8.so"
  }
  copy {
    from "src/main/jni/third_party/$V8_VERSION/v8/armeabi-v7a"
    into "libs/armeabi-v7a/"
    include "libmtt_shared.so", "libmttv8.so"
  }
}

afterEvaluate {
  dealAfterEvaluate
  def assembleReleaseTask = project.tasks.findByName('assembleRelease')
  if (assembleReleaseTask != null) {
    assembleReleaseTask.finalizedBy dealAfterBuild
  }
}

task dealAfterBuild() {
  doLast {
    file(OUTPUT_DIR).list().each{f ->
      println("===============dealAfterBuild: f=" + f)
      if (f.contains("release.aar")) {
        copy {
          from zipTree("${OUTPUT_DIR}/${f}")
          into OUTPUT_DIR
          include 'classes.jar', 'jni/'
          rename 'classes.jar', 'hippy.jar'
        }
      }
    }
  }
}
