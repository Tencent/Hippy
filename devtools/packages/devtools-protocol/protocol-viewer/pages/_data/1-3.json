{
  "domains": [
    {
      "domain": "Browser",
      "description": "The Browser domain defines methods and events for browser managing.",
      "types": [],
      "commands": [
        {
          "name": "close",
          "description": "Close browser gracefully."
        },
        {
          "name": "getVersion",
          "description": "Returns version information.",
          "returns": [
            {
              "name": "protocolVersion",
              "description": "Protocol version.",
              "type": "string"
            },
            {
              "name": "product",
              "description": "Product name.",
              "type": "string"
            },
            {
              "name": "revision",
              "description": "Product revision.",
              "type": "string"
            },
            {
              "name": "userAgent",
              "description": "User-Agent.",
              "type": "string"
            },
            {
              "name": "jsVersion",
              "description": "V8 version.",
              "type": "string"
            }
          ]
        }
      ],
      "events": []
    },
    {
      "domain": "DOM",
      "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object\nthat has an `id`. This `id` can be used to get additional information on the Node, resolve it into\nthe JavaScript object wrapper, etc. It is important that client receives DOM events only for the\nnodes that are known to the client. Backend keeps track of the nodes that were sent to the client\nand never sends the same node twice. It is client's responsibility to collect information about\nthe nodes that were sent to the client.<p>Note that `iframe` owner elements will return\ncorresponding document elements as their child nodes.</p>",
      "dependencies": [
        "Runtime"
      ],
      "types": [
        {
          "id": "NodeId",
          "description": "Unique DOM node identifier.",
          "type": "integer"
        },
        {
          "id": "BackendNodeId",
          "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the\nfront-end.",
          "type": "integer"
        },
        {
          "id": "BackendNode",
          "description": "Backend node with a friendly name.",
          "type": "object",
          "properties": [
            {
              "name": "nodeType",
              "description": "`Node`'s nodeType.",
              "type": "integer"
            },
            {
              "name": "nodeName",
              "description": "`Node`'s nodeName.",
              "type": "string"
            },
            {
              "name": "backendNodeId",
              "$ref": "BackendNodeId"
            }
          ]
        },
        {
          "id": "PseudoType",
          "description": "Pseudo element type.",
          "type": "string",
          "enum": [
            "first-line",
            "first-letter",
            "before",
            "after",
            "marker",
            "backdrop",
            "selection",
            "target-text",
            "spelling-error",
            "grammar-error",
            "highlight",
            "first-line-inherited",
            "scrollbar",
            "scrollbar-thumb",
            "scrollbar-button",
            "scrollbar-track",
            "scrollbar-track-piece",
            "scrollbar-corner",
            "resizer",
            "input-list-button"
          ]
        },
        {
          "id": "ShadowRootType",
          "description": "Shadow root type.",
          "type": "string",
          "enum": [
            "user-agent",
            "open",
            "closed"
          ]
        },
        {
          "id": "CompatibilityMode",
          "description": "Document compatibility mode.",
          "type": "string",
          "enum": [
            "QuirksMode",
            "LimitedQuirksMode",
            "NoQuirksMode"
          ]
        },
        {
          "id": "Node",
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\nDOMNode is a base node mirror type.",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend\nwill only push node with given `id` once. It is aware of all requested nodes and will only\nfire DOM events for nodes known to the client.",
              "$ref": "NodeId"
            },
            {
              "name": "parentId",
              "description": "The id of the parent node if any.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "The BackendNodeId for this node.",
              "$ref": "BackendNodeId"
            },
            {
              "name": "nodeType",
              "description": "`Node`'s nodeType.",
              "type": "integer"
            },
            {
              "name": "nodeName",
              "description": "`Node`'s nodeName.",
              "type": "string"
            },
            {
              "name": "localName",
              "description": "`Node`'s localName.",
              "type": "string"
            },
            {
              "name": "nodeValue",
              "description": "`Node`'s nodeValue.",
              "type": "string"
            },
            {
              "name": "childNodeCount",
              "description": "Child count for `Container` nodes.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "children",
              "description": "Child nodes of this node when requested with children.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            },
            {
              "name": "attributes",
              "description": "Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "documentURL",
              "description": "Document URL that `Document` or `FrameOwner` node points to.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "baseURL",
              "description": "Base URL that `Document` or `FrameOwner` node uses for URL completion.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "publicId",
              "description": "`DocumentType`'s publicId.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "systemId",
              "description": "`DocumentType`'s systemId.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "internalSubset",
              "description": "`DocumentType`'s internalSubset.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "xmlVersion",
              "description": "`Document`'s XML version in case of XML documents.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "name",
              "description": "`Attr`'s name.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "value",
              "description": "`Attr`'s value.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "pseudoType",
              "description": "Pseudo element type for this node.",
              "optional": true,
              "$ref": "PseudoType"
            },
            {
              "name": "shadowRootType",
              "description": "Shadow root type.",
              "optional": true,
              "$ref": "ShadowRootType"
            },
            {
              "name": "frameId",
              "description": "Frame ID for frame owner elements.",
              "optional": true,
              "$ref": "Page.FrameId"
            },
            {
              "name": "contentDocument",
              "description": "Content document for frame owner elements.",
              "optional": true,
              "$ref": "Node"
            },
            {
              "name": "shadowRoots",
              "description": "Shadow root list for given element host.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            },
            {
              "name": "templateContent",
              "description": "Content document fragment for template elements.",
              "optional": true,
              "$ref": "Node"
            },
            {
              "name": "pseudoElements",
              "description": "Pseudo elements associated with this node.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            },
            {
              "name": "importedDocument",
              "description": "Deprecated, as the HTML Imports API has been removed (crbug.com/937746).\nThis property used to return the imported document for the HTMLImport links.\nThe property is always undefined now.",
              "deprecated": true,
              "optional": true,
              "$ref": "Node"
            },
            {
              "name": "distributedNodes",
              "description": "Distributed nodes for given insertion point.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "BackendNode"
              }
            },
            {
              "name": "isSVG",
              "description": "Whether the node is SVG.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "compatibilityMode",
              "optional": true,
              "$ref": "CompatibilityMode"
            }
          ]
        },
        {
          "id": "RGBA",
          "description": "A structure holding an RGBA color.",
          "type": "object",
          "properties": [
            {
              "name": "r",
              "description": "The red component, in the [0-255] range.",
              "type": "integer"
            },
            {
              "name": "g",
              "description": "The green component, in the [0-255] range.",
              "type": "integer"
            },
            {
              "name": "b",
              "description": "The blue component, in the [0-255] range.",
              "type": "integer"
            },
            {
              "name": "a",
              "description": "The alpha component, in the [0-1] range (default: 1).",
              "optional": true,
              "type": "number"
            }
          ]
        },
        {
          "id": "Quad",
          "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        {
          "id": "BoxModel",
          "description": "Box model.",
          "type": "object",
          "properties": [
            {
              "name": "content",
              "description": "Content box",
              "$ref": "Quad"
            },
            {
              "name": "padding",
              "description": "Padding box",
              "$ref": "Quad"
            },
            {
              "name": "border",
              "description": "Border box",
              "$ref": "Quad"
            },
            {
              "name": "margin",
              "description": "Margin box",
              "$ref": "Quad"
            },
            {
              "name": "width",
              "description": "Node width",
              "type": "integer"
            },
            {
              "name": "height",
              "description": "Node height",
              "type": "integer"
            },
            {
              "name": "shapeOutside",
              "description": "Shape outside coordinates",
              "optional": true,
              "$ref": "ShapeOutsideInfo"
            }
          ]
        },
        {
          "id": "ShapeOutsideInfo",
          "description": "CSS Shape Outside details.",
          "type": "object",
          "properties": [
            {
              "name": "bounds",
              "description": "Shape bounds",
              "$ref": "Quad"
            },
            {
              "name": "shape",
              "description": "Shape coordinate details",
              "type": "array",
              "items": {
                "type": "any"
              }
            },
            {
              "name": "marginShape",
              "description": "Margin shape bounds",
              "type": "array",
              "items": {
                "type": "any"
              }
            }
          ]
        },
        {
          "id": "Rect",
          "description": "Rectangle.",
          "type": "object",
          "properties": [
            {
              "name": "x",
              "description": "X coordinate",
              "type": "number"
            },
            {
              "name": "y",
              "description": "Y coordinate",
              "type": "number"
            },
            {
              "name": "width",
              "description": "Rectangle width",
              "type": "number"
            },
            {
              "name": "height",
              "description": "Rectangle height",
              "type": "number"
            }
          ]
        },
        {
          "id": "CSSComputedStyleProperty",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Computed style property name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Computed style property value.",
              "type": "string"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "describeNode",
          "description": "Describes node given its id, does not require domain to be enabled. Does not start tracking any\nobjects, can be used for automation.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Identifier of the backend node.",
              "optional": true,
              "$ref": "BackendNodeId"
            },
            {
              "name": "objectId",
              "description": "JavaScript object id of the node wrapper.",
              "optional": true,
              "$ref": "Runtime.RemoteObjectId"
            },
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "pierce",
              "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false).",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "node",
              "description": "Node description.",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables DOM agent for the given page."
        },
        {
          "name": "enable",
          "description": "Enables DOM agent for the given page."
        },
        {
          "name": "focus",
          "description": "Focuses the given element.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Identifier of the backend node.",
              "optional": true,
              "$ref": "BackendNodeId"
            },
            {
              "name": "objectId",
              "description": "JavaScript object id of the node wrapper.",
              "optional": true,
              "$ref": "Runtime.RemoteObjectId"
            }
          ]
        },
        {
          "name": "getAttributes",
          "description": "Returns attributes for the specified node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to retrieve attibutes for.",
              "$ref": "NodeId"
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "description": "An interleaved array of node attribute names and values.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "getBoxModel",
          "description": "Returns boxes for the given node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Identifier of the backend node.",
              "optional": true,
              "$ref": "BackendNodeId"
            },
            {
              "name": "objectId",
              "description": "JavaScript object id of the node wrapper.",
              "optional": true,
              "$ref": "Runtime.RemoteObjectId"
            }
          ],
          "returns": [
            {
              "name": "model",
              "description": "Box model for the node.",
              "$ref": "BoxModel"
            }
          ]
        },
        {
          "name": "getDocument",
          "description": "Returns the root DOM node (and optionally the subtree) to the caller.",
          "parameters": [
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "pierce",
              "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false).",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "root",
              "description": "Resulting node.",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "getNodeForLocation",
          "description": "Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is\neither returned or not.",
          "parameters": [
            {
              "name": "x",
              "description": "X coordinate.",
              "type": "integer"
            },
            {
              "name": "y",
              "description": "Y coordinate.",
              "type": "integer"
            },
            {
              "name": "includeUserAgentShadowDOM",
              "description": "False to skip to the nearest non-UA shadow root ancestor (default: false).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "ignorePointerEventsNone",
              "description": "Whether to ignore pointer-events: none on elements and hit test them.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "backendNodeId",
              "description": "Resulting node.",
              "$ref": "BackendNodeId"
            },
            {
              "name": "frameId",
              "description": "Frame this node belongs to.",
              "$ref": "Page.FrameId"
            },
            {
              "name": "nodeId",
              "description": "Id of the node at given coordinates, only when enabled and requested document.",
              "optional": true,
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "getOuterHTML",
          "description": "Returns node's HTML markup.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Identifier of the backend node.",
              "optional": true,
              "$ref": "BackendNodeId"
            },
            {
              "name": "objectId",
              "description": "JavaScript object id of the node wrapper.",
              "optional": true,
              "$ref": "Runtime.RemoteObjectId"
            }
          ],
          "returns": [
            {
              "name": "outerHTML",
              "description": "Outer HTML markup.",
              "type": "string"
            }
          ]
        },
        {
          "name": "hideHighlight",
          "description": "Hides any highlight.",
          "redirect": "Overlay"
        },
        {
          "name": "highlightNode",
          "description": "Highlights DOM node.",
          "redirect": "Overlay"
        },
        {
          "name": "highlightRect",
          "description": "Highlights given rectangle.",
          "redirect": "Overlay"
        },
        {
          "name": "moveTo",
          "description": "Moves node into the new container, places it before the given anchor.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to move.",
              "$ref": "NodeId"
            },
            {
              "name": "targetNodeId",
              "description": "Id of the element to drop the moved node into.",
              "$ref": "NodeId"
            },
            {
              "name": "insertBeforeNodeId",
              "description": "Drop node before this one (if absent, the moved node becomes the last child of\n`targetNodeId`).",
              "optional": true,
              "$ref": "NodeId"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "description": "New id of the moved node.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "querySelector",
          "description": "Executes `querySelector` on a given node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to query upon.",
              "$ref": "NodeId"
            },
            {
              "name": "selector",
              "description": "Selector string.",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "description": "Query selector result.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "querySelectorAll",
          "description": "Executes `querySelectorAll` on a given node.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to query upon.",
              "$ref": "NodeId"
            },
            {
              "name": "selector",
              "description": "Selector string.",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "description": "Query selector result.",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              }
            }
          ]
        },
        {
          "name": "removeAttribute",
          "description": "Removes attribute with given name from an element with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the element to remove attribute from.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "Name of the attribute to remove.",
              "type": "string"
            }
          ]
        },
        {
          "name": "removeNode",
          "description": "Removes node with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to remove.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "requestChildNodes",
          "description": "Requests that children of the node with given id are returned to the caller in form of\n`setChildNodes` events where not only immediate children are retrieved, but all children down to\nthe specified depth.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to get children for.",
              "$ref": "NodeId"
            },
            {
              "name": "depth",
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "pierce",
              "description": "Whether or not iframes and shadow roots should be traversed when returning the sub-tree\n(default is false).",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "requestNode",
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All\nnodes that form the path from the node to the root are also sent to the client as a series of\n`setChildNodes` notifications.",
          "parameters": [
            {
              "name": "objectId",
              "description": "JavaScript object id to convert into node.",
              "$ref": "Runtime.RemoteObjectId"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "description": "Node id for given object.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "resolveNode",
          "description": "Resolves the JavaScript node object for a given NodeId or BackendNodeId.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to resolve.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Backend identifier of the node to resolve.",
              "optional": true,
              "$ref": "DOM.BackendNodeId"
            },
            {
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "executionContextId",
              "description": "Execution context in which to resolve the node.",
              "optional": true,
              "$ref": "Runtime.ExecutionContextId"
            }
          ],
          "returns": [
            {
              "name": "object",
              "description": "JavaScript object wrapper for given node.",
              "$ref": "Runtime.RemoteObject"
            }
          ]
        },
        {
          "name": "setAttributeValue",
          "description": "Sets attribute for an element with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the element to set attribute for.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "Attribute name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Attribute value.",
              "type": "string"
            }
          ]
        },
        {
          "name": "setAttributesAsText",
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing\nattribute value and types in several attribute name/value pairs.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the element to set attributes for.",
              "$ref": "NodeId"
            },
            {
              "name": "text",
              "description": "Text with a number of attributes. Will parse this text using HTML parser.",
              "type": "string"
            },
            {
              "name": "name",
              "description": "Attribute name to replace with new attributes derived from text in case text parsed\nsuccessfully.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "setFileInputFiles",
          "description": "Sets files for the given file input element.",
          "parameters": [
            {
              "name": "files",
              "description": "Array of file paths to set.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "nodeId",
              "description": "Identifier of the node.",
              "optional": true,
              "$ref": "NodeId"
            },
            {
              "name": "backendNodeId",
              "description": "Identifier of the backend node.",
              "optional": true,
              "$ref": "BackendNodeId"
            },
            {
              "name": "objectId",
              "description": "JavaScript object id of the node wrapper.",
              "optional": true,
              "$ref": "Runtime.RemoteObjectId"
            }
          ]
        },
        {
          "name": "setNodeName",
          "description": "Sets node name for a node with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to set name for.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "New node's name.",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "description": "New node's id.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "setNodeValue",
          "description": "Sets node value for a node with given id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to set value for.",
              "$ref": "NodeId"
            },
            {
              "name": "value",
              "description": "New node's value.",
              "type": "string"
            }
          ]
        },
        {
          "name": "setOuterHTML",
          "description": "Sets node HTML markup, returns new node id.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node to set markup for.",
              "$ref": "NodeId"
            },
            {
              "name": "outerHTML",
              "description": "Outer HTML markup to set.",
              "type": "string"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "attributeModified",
          "description": "Fired when `Element`'s attribute is modified.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "Attribute name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Attribute value.",
              "type": "string"
            }
          ]
        },
        {
          "name": "attributeRemoved",
          "description": "Fired when `Element`'s attribute is removed.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "name",
              "description": "A ttribute name.",
              "type": "string"
            }
          ]
        },
        {
          "name": "characterDataModified",
          "description": "Mirrors `DOMCharacterDataModified` event.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "characterData",
              "description": "New text value.",
              "type": "string"
            }
          ]
        },
        {
          "name": "childNodeCountUpdated",
          "description": "Fired when `Container`'s child node count has changed.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Id of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "childNodeCount",
              "description": "New node count.",
              "type": "integer"
            }
          ]
        },
        {
          "name": "childNodeInserted",
          "description": "Mirrors `DOMNodeInserted` event.",
          "parameters": [
            {
              "name": "parentNodeId",
              "description": "Id of the node that has changed.",
              "$ref": "NodeId"
            },
            {
              "name": "previousNodeId",
              "description": "If of the previous siblint.",
              "$ref": "NodeId"
            },
            {
              "name": "node",
              "description": "Inserted node data.",
              "$ref": "Node"
            }
          ]
        },
        {
          "name": "childNodeRemoved",
          "description": "Mirrors `DOMNodeRemoved` event.",
          "parameters": [
            {
              "name": "parentNodeId",
              "description": "Parent id.",
              "$ref": "NodeId"
            },
            {
              "name": "nodeId",
              "description": "Id of the node that has been removed.",
              "$ref": "NodeId"
            }
          ]
        },
        {
          "name": "documentUpdated",
          "description": "Fired when `Document` has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "setChildNodes",
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon\nmost of the calls requesting node ids.",
          "parameters": [
            {
              "name": "parentId",
              "description": "Parent node id to populate with children.",
              "$ref": "NodeId"
            },
            {
              "name": "nodes",
              "description": "Child nodes array.",
              "type": "array",
              "items": {
                "$ref": "Node"
              }
            }
          ]
        }
      ]
    },
    {
      "domain": "DOMDebugger",
      "description": "DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript\nexecution will stop on these operations as if there was a regular breakpoint set.",
      "dependencies": [
        "DOM",
        "Debugger",
        "Runtime"
      ],
      "types": [
        {
          "id": "DOMBreakpointType",
          "description": "DOM breakpoint type.",
          "type": "string",
          "enum": [
            "subtree-modified",
            "attribute-modified",
            "node-removed"
          ]
        },
        {
          "id": "EventListener",
          "description": "Object event listener.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "`EventListener`'s type.",
              "type": "string"
            },
            {
              "name": "useCapture",
              "description": "`EventListener`'s useCapture.",
              "type": "boolean"
            },
            {
              "name": "passive",
              "description": "`EventListener`'s passive flag.",
              "type": "boolean"
            },
            {
              "name": "once",
              "description": "`EventListener`'s once flag.",
              "type": "boolean"
            },
            {
              "name": "scriptId",
              "description": "Script id of the handler code.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "lineNumber",
              "description": "Line number in the script (0-based).",
              "type": "integer"
            },
            {
              "name": "columnNumber",
              "description": "Column number in the script (0-based).",
              "type": "integer"
            },
            {
              "name": "handler",
              "description": "Event handler function value.",
              "optional": true,
              "$ref": "Runtime.RemoteObject"
            },
            {
              "name": "originalHandler",
              "description": "Event original handler function value.",
              "optional": true,
              "$ref": "Runtime.RemoteObject"
            },
            {
              "name": "backendNodeId",
              "description": "Node the listener is added to (if any).",
              "optional": true,
              "$ref": "DOM.BackendNodeId"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "getEventListeners",
          "description": "Returns event listeners of the given object.",
          "parameters": [
            {
              "name": "objectId",
              "description": "Identifier of the object to return listeners for.",
              "$ref": "Runtime.RemoteObjectId"
            },
            {
              "name": "depth",
              "description": "The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the\nentire subtree or provide an integer larger than 0.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "pierce",
              "description": "Whether or not iframes and shadow roots should be traversed when returning the subtree\n(default is false). Reports listeners for all contexts if pierce is enabled.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "listeners",
              "description": "Array of relevant listeners.",
              "type": "array",
              "items": {
                "$ref": "EventListener"
              }
            }
          ]
        },
        {
          "name": "removeDOMBreakpoint",
          "description": "Removes DOM breakpoint that was set using `setDOMBreakpoint`.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node to remove breakpoint from.",
              "$ref": "DOM.NodeId"
            },
            {
              "name": "type",
              "description": "Type of the breakpoint to remove.",
              "$ref": "DOMBreakpointType"
            }
          ]
        },
        {
          "name": "removeEventListenerBreakpoint",
          "description": "Removes breakpoint on particular DOM event.",
          "parameters": [
            {
              "name": "eventName",
              "description": "Event name.",
              "type": "string"
            },
            {
              "name": "targetName",
              "description": "EventTarget interface name.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "removeXHRBreakpoint",
          "description": "Removes breakpoint from XMLHttpRequest.",
          "parameters": [
            {
              "name": "url",
              "description": "Resource URL substring.",
              "type": "string"
            }
          ]
        },
        {
          "name": "setDOMBreakpoint",
          "description": "Sets breakpoint on particular operation with DOM.",
          "parameters": [
            {
              "name": "nodeId",
              "description": "Identifier of the node to set breakpoint on.",
              "$ref": "DOM.NodeId"
            },
            {
              "name": "type",
              "description": "Type of the operation to stop upon.",
              "$ref": "DOMBreakpointType"
            }
          ]
        },
        {
          "name": "setEventListenerBreakpoint",
          "description": "Sets breakpoint on particular DOM event.",
          "parameters": [
            {
              "name": "eventName",
              "description": "DOM Event name to stop on (any DOM event will do).",
              "type": "string"
            },
            {
              "name": "targetName",
              "description": "EventTarget interface name to stop on. If equal to `\"*\"` or not provided, will stop on any\nEventTarget.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "setXHRBreakpoint",
          "description": "Sets breakpoint on XMLHttpRequest.",
          "parameters": [
            {
              "name": "url",
              "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon.",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Emulation",
      "description": "This domain emulates different environments for the page.",
      "dependencies": [
        "DOM",
        "Page",
        "Runtime"
      ],
      "types": [
        {
          "id": "ScreenOrientation",
          "description": "Screen orientation.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Orientation type.",
              "type": "string",
              "enum": [
                "portraitPrimary",
                "portraitSecondary",
                "landscapePrimary",
                "landscapeSecondary"
              ]
            },
            {
              "name": "angle",
              "description": "Orientation angle.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "DisplayFeature",
          "type": "object",
          "properties": [
            {
              "name": "orientation",
              "description": "Orientation of a display feature in relation to screen",
              "type": "string",
              "enum": [
                "vertical",
                "horizontal"
              ]
            },
            {
              "name": "offset",
              "description": "The offset from the screen origin in either the x (for vertical\norientation) or y (for horizontal orientation) direction.",
              "type": "integer"
            },
            {
              "name": "maskLength",
              "description": "A display feature may mask content such that it is not physically\ndisplayed - this length along with the offset describes this area.\nA display feature that only splits content will have a 0 mask_length.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "MediaFeature",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "canEmulate",
          "description": "Tells whether emulation is supported.",
          "returns": [
            {
              "name": "result",
              "description": "True if emulation is supported.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "clearDeviceMetricsOverride",
          "description": "Clears the overridden device metrics."
        },
        {
          "name": "clearGeolocationOverride",
          "description": "Clears the overridden Geolocation Position and Error."
        },
        {
          "name": "setDefaultBackgroundColorOverride",
          "description": "Sets or clears an override of the default background color of the frame. This override is used\nif the content does not specify one.",
          "parameters": [
            {
              "name": "color",
              "description": "RGBA of the default background color. If not specified, any existing override will be\ncleared.",
              "optional": true,
              "$ref": "DOM.RGBA"
            }
          ]
        },
        {
          "name": "setDeviceMetricsOverride",
          "description": "Overrides the values of device screen dimensions (window.screen.width, window.screen.height,\nwindow.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media\nquery results).",
          "parameters": [
            {
              "name": "width",
              "description": "Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "type": "integer"
            },
            {
              "name": "height",
              "description": "Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "type": "integer"
            },
            {
              "name": "deviceScaleFactor",
              "description": "Overriding device scale factor value. 0 disables the override.",
              "type": "number"
            },
            {
              "name": "mobile",
              "description": "Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text\nautosizing and more.",
              "type": "boolean"
            },
            {
              "name": "scale",
              "description": "Scale to apply to resulting view image.",
              "experimental": true,
              "optional": true,
              "type": "number"
            },
            {
              "name": "screenWidth",
              "description": "Overriding screen width value in pixels (minimum 0, maximum 10000000).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "screenHeight",
              "description": "Overriding screen height value in pixels (minimum 0, maximum 10000000).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "positionX",
              "description": "Overriding view X position on screen in pixels (minimum 0, maximum 10000000).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "positionY",
              "description": "Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "dontSetVisibleSize",
              "description": "Do not set visible view size, rely upon explicit setVisibleSize call.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "screenOrientation",
              "description": "Screen orientation override.",
              "optional": true,
              "$ref": "ScreenOrientation"
            },
            {
              "name": "viewport",
              "description": "If set, the visible area of the page will be overridden to this viewport. This viewport\nchange is not observed by the page, e.g. viewport-relative elements do not change positions.",
              "experimental": true,
              "optional": true,
              "$ref": "Page.Viewport"
            },
            {
              "name": "displayFeature",
              "description": "If set, the display feature of a multi-segment screen. If not set, multi-segment support\nis turned-off.",
              "experimental": true,
              "optional": true,
              "$ref": "DisplayFeature"
            }
          ]
        },
        {
          "name": "setEmulatedMedia",
          "description": "Emulates the given media type or media feature for CSS media queries.",
          "parameters": [
            {
              "name": "media",
              "description": "Media type to emulate. Empty string disables the override.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "features",
              "description": "Media features to emulate.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "MediaFeature"
              }
            }
          ]
        },
        {
          "name": "setGeolocationOverride",
          "description": "Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position\nunavailable.",
          "parameters": [
            {
              "name": "latitude",
              "description": "Mock latitude",
              "optional": true,
              "type": "number"
            },
            {
              "name": "longitude",
              "description": "Mock longitude",
              "optional": true,
              "type": "number"
            },
            {
              "name": "accuracy",
              "description": "Mock accuracy",
              "optional": true,
              "type": "number"
            }
          ]
        },
        {
          "name": "setScriptExecutionDisabled",
          "description": "Switches script execution in the page.",
          "parameters": [
            {
              "name": "value",
              "description": "Whether script execution should be disabled in the page.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "setTouchEmulationEnabled",
          "description": "Enables touch on platforms which do not support them.",
          "parameters": [
            {
              "name": "enabled",
              "description": "Whether the touch event emulation should be enabled.",
              "type": "boolean"
            },
            {
              "name": "maxTouchPoints",
              "description": "Maximum touch points supported. Defaults to one.",
              "optional": true,
              "type": "integer"
            }
          ]
        },
        {
          "name": "setUserAgentOverride",
          "description": "Allows overriding user agent with the given string.",
          "parameters": [
            {
              "name": "userAgent",
              "description": "User agent to use.",
              "type": "string"
            },
            {
              "name": "acceptLanguage",
              "description": "Browser langugage to emulate.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "platform",
              "description": "The platform navigator.platform should return.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "userAgentMetadata",
              "description": "To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData",
              "experimental": true,
              "optional": true,
              "$ref": "UserAgentMetadata"
            }
          ]
        }
      ],
      "events": []
    },
    {
      "domain": "IO",
      "description": "Input/Output operations for streams produced by DevTools.",
      "types": [
        {
          "id": "StreamHandle",
          "description": "This is either obtained from another method or specified as `blob:&lt;uuid&gt;` where\n`&lt;uuid&gt` is an UUID of a Blob.",
          "type": "string"
        }
      ],
      "commands": [
        {
          "name": "close",
          "description": "Close the stream, discard any temporary backing storage.",
          "parameters": [
            {
              "name": "handle",
              "description": "Handle of the stream to close.",
              "$ref": "StreamHandle"
            }
          ]
        },
        {
          "name": "read",
          "description": "Read a chunk of the stream",
          "parameters": [
            {
              "name": "handle",
              "description": "Handle of the stream to read.",
              "$ref": "StreamHandle"
            },
            {
              "name": "offset",
              "description": "Seek to the specified offset before reading (if not specificed, proceed with offset\nfollowing the last read). Some types of streams may only support sequential reads.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "size",
              "description": "Maximum number of bytes to read (left upon the agent discretion if not specified).",
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "base64Encoded",
              "description": "Set if the data is base64-encoded",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "data",
              "description": "Data that were read.",
              "type": "string"
            },
            {
              "name": "eof",
              "description": "Set if the end-of-file condition occurred while reading.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "resolveBlob",
          "description": "Return UUID of Blob object specified by a remote object id.",
          "parameters": [
            {
              "name": "objectId",
              "description": "Object id of a Blob object wrapper.",
              "$ref": "Runtime.RemoteObjectId"
            }
          ],
          "returns": [
            {
              "name": "uuid",
              "description": "UUID of the specified Blob.",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Input",
      "types": [
        {
          "id": "TouchPoint",
          "type": "object",
          "properties": [
            {
              "name": "x",
              "description": "X coordinate of the event relative to the main frame's viewport in CSS pixels.",
              "type": "number"
            },
            {
              "name": "y",
              "description": "Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\nthe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.",
              "type": "number"
            },
            {
              "name": "radiusX",
              "description": "X radius of the touch area (default: 1.0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "radiusY",
              "description": "Y radius of the touch area (default: 1.0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "rotationAngle",
              "description": "Rotation angle (default: 0.0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "force",
              "description": "Force (default: 1.0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "tangentialPressure",
              "description": "The normalized tangential pressure, which has a range of [-1,1] (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "number"
            },
            {
              "name": "tiltX",
              "description": "The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "tiltY",
              "description": "The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "twist",
              "description": "The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "id",
              "description": "Identifier used to track touch sources between events, must be unique within an event.",
              "optional": true,
              "type": "number"
            }
          ]
        },
        {
          "id": "MouseButton",
          "type": "string",
          "enum": [
            "none",
            "left",
            "middle",
            "right",
            "back",
            "forward"
          ]
        },
        {
          "id": "TimeSinceEpoch",
          "description": "UTC time in seconds, counted from January 1, 1970.",
          "type": "number"
        }
      ],
      "commands": [
        {
          "name": "dispatchKeyEvent",
          "description": "Dispatches a key event to the page.",
          "parameters": [
            {
              "name": "type",
              "description": "Type of the key event.",
              "type": "string",
              "enum": [
                "keyDown",
                "keyUp",
                "rawKeyDown",
                "char"
              ]
            },
            {
              "name": "modifiers",
              "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n(default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "timestamp",
              "description": "Time at which the event occurred.",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "text",
              "description": "Text as generated by processing a virtual key code with a keyboard layout. Not needed for\nfor `keyUp` and `rawKeyDown` events (default: \"\")",
              "optional": true,
              "type": "string"
            },
            {
              "name": "unmodifiedText",
              "description": "Text that would have been generated by the keyboard if no modifiers were pressed (except for\nshift). Useful for shortcut (accelerator) key handling (default: \"\").",
              "optional": true,
              "type": "string"
            },
            {
              "name": "keyIdentifier",
              "description": "Unique key identifier (e.g., 'U+0041') (default: \"\").",
              "optional": true,
              "type": "string"
            },
            {
              "name": "code",
              "description": "Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\").",
              "optional": true,
              "type": "string"
            },
            {
              "name": "key",
              "description": "Unique DOM defined string value describing the meaning of the key in the context of active\nmodifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\").",
              "optional": true,
              "type": "string"
            },
            {
              "name": "windowsVirtualKeyCode",
              "description": "Windows virtual key code (default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "nativeVirtualKeyCode",
              "description": "Native virtual key code (default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "autoRepeat",
              "description": "Whether the event was generated from auto repeat (default: false).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isKeypad",
              "description": "Whether the event was generated from the keypad (default: false).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isSystemKey",
              "description": "Whether the event was a system key event (default: false).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "location",
              "description": "Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:\n0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "commands",
              "description": "Editing commands to send with the key event (e.g., 'selectAll') (default: []).\nThese are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.\nSee https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "dispatchMouseEvent",
          "description": "Dispatches a mouse event to the page.",
          "parameters": [
            {
              "name": "type",
              "description": "Type of the mouse event.",
              "type": "string",
              "enum": [
                "mousePressed",
                "mouseReleased",
                "mouseMoved",
                "mouseWheel"
              ]
            },
            {
              "name": "x",
              "description": "X coordinate of the event relative to the main frame's viewport in CSS pixels.",
              "type": "number"
            },
            {
              "name": "y",
              "description": "Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\nthe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.",
              "type": "number"
            },
            {
              "name": "modifiers",
              "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n(default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "timestamp",
              "description": "Time at which the event occurred.",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "button",
              "description": "Mouse button (default: \"none\").",
              "optional": true,
              "$ref": "MouseButton"
            },
            {
              "name": "buttons",
              "description": "A number indicating which buttons are pressed on the mouse when a mouse event is triggered.\nLeft=1, Right=2, Middle=4, Back=8, Forward=16, None=0.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "clickCount",
              "description": "Number of times the mouse button was clicked (default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "force",
              "description": "The normalized pressure, which has a range of [0,1] (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "number"
            },
            {
              "name": "tangentialPressure",
              "description": "The normalized tangential pressure, which has a range of [-1,1] (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "number"
            },
            {
              "name": "tiltX",
              "description": "The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "tiltY",
              "description": "The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "twist",
              "description": "The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "deltaX",
              "description": "X delta in CSS pixels for mouse wheel event (default: 0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "deltaY",
              "description": "Y delta in CSS pixels for mouse wheel event (default: 0).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "pointerType",
              "description": "Pointer type (default: \"mouse\").",
              "optional": true,
              "type": "string",
              "enum": [
                "mouse",
                "pen"
              ]
            }
          ]
        },
        {
          "name": "dispatchTouchEvent",
          "description": "Dispatches a touch event to the page.",
          "parameters": [
            {
              "name": "type",
              "description": "Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while\nTouchStart and TouchMove must contains at least one.",
              "type": "string",
              "enum": [
                "touchStart",
                "touchEnd",
                "touchMove",
                "touchCancel"
              ]
            },
            {
              "name": "touchPoints",
              "description": "Active touch points on the touch device. One event per any changed point (compared to\nprevious touch event in a sequence) is generated, emulating pressing/moving/releasing points\none by one.",
              "type": "array",
              "items": {
                "$ref": "TouchPoint"
              }
            },
            {
              "name": "modifiers",
              "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8\n(default: 0).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "timestamp",
              "description": "Time at which the event occurred.",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            }
          ]
        },
        {
          "name": "setIgnoreInputEvents",
          "description": "Ignores input events (useful while auditing page).",
          "parameters": [
            {
              "name": "ignore",
              "description": "Ignores input events processing when set to true.",
              "type": "boolean"
            }
          ]
        }
      ],
      "events": []
    },
    {
      "domain": "Log",
      "description": "Provides access to log entries.",
      "dependencies": [
        "Runtime",
        "Network"
      ],
      "types": [
        {
          "id": "LogEntry",
          "description": "Log entry.",
          "type": "object",
          "properties": [
            {
              "name": "source",
              "description": "Log entry source.",
              "type": "string",
              "enum": [
                "xml",
                "javascript",
                "network",
                "storage",
                "appcache",
                "rendering",
                "security",
                "deprecation",
                "worker",
                "violation",
                "intervention",
                "recommendation",
                "other"
              ]
            },
            {
              "name": "level",
              "description": "Log entry severity.",
              "type": "string",
              "enum": [
                "verbose",
                "info",
                "warning",
                "error"
              ]
            },
            {
              "name": "text",
              "description": "Logged text.",
              "type": "string"
            },
            {
              "name": "timestamp",
              "description": "Timestamp when this entry was added.",
              "$ref": "Runtime.Timestamp"
            },
            {
              "name": "url",
              "description": "URL of the resource if known.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "lineNumber",
              "description": "Line number in the resource.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "stackTrace",
              "description": "JavaScript stack trace.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "networkRequestId",
              "description": "Identifier of the network request associated with this entry.",
              "optional": true,
              "$ref": "Network.RequestId"
            },
            {
              "name": "workerId",
              "description": "Identifier of the worker associated with this entry.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "args",
              "description": "Call arguments.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "Runtime.RemoteObject"
              }
            }
          ]
        },
        {
          "id": "ViolationSetting",
          "description": "Violation configuration setting.",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Violation type.",
              "type": "string",
              "enum": [
                "longTask",
                "longLayout",
                "blockedEvent",
                "blockedParser",
                "discouragedAPIUse",
                "handler",
                "recurringHandler"
              ]
            },
            {
              "name": "threshold",
              "description": "Time threshold to trigger upon.",
              "type": "number"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "clear",
          "description": "Clears the log."
        },
        {
          "name": "disable",
          "description": "Disables log domain, prevents further log entries from being reported to the client."
        },
        {
          "name": "enable",
          "description": "Enables log domain, sends the entries collected so far to the client by means of the\n`entryAdded` notification."
        },
        {
          "name": "startViolationsReport",
          "description": "start violation reporting.",
          "parameters": [
            {
              "name": "config",
              "description": "Configuration for violations.",
              "type": "array",
              "items": {
                "$ref": "ViolationSetting"
              }
            }
          ]
        },
        {
          "name": "stopViolationsReport",
          "description": "Stop violation reporting."
        }
      ],
      "events": [
        {
          "name": "entryAdded",
          "description": "Issued when new message was logged.",
          "parameters": [
            {
              "name": "entry",
              "description": "The entry.",
              "$ref": "LogEntry"
            }
          ]
        }
      ]
    },
    {
      "domain": "Network",
      "description": "Network domain allows tracking network activities of the page. It exposes information about http,\nfile, data and other requests and responses, their headers, bodies, timing, etc.",
      "dependencies": [
        "Debugger",
        "Runtime",
        "Security"
      ],
      "types": [
        {
          "id": "ResourceType",
          "description": "Resource type as it was perceived by the rendering engine.",
          "type": "string",
          "enum": [
            "Document",
            "Stylesheet",
            "Image",
            "Media",
            "Font",
            "Script",
            "TextTrack",
            "XHR",
            "Fetch",
            "EventSource",
            "WebSocket",
            "Manifest",
            "SignedExchange",
            "Ping",
            "CSPViolationReport",
            "Preflight",
            "Other"
          ]
        },
        {
          "id": "LoaderId",
          "description": "Unique loader identifier.",
          "type": "string"
        },
        {
          "id": "RequestId",
          "description": "Unique request identifier.",
          "type": "string"
        },
        {
          "id": "InterceptionId",
          "description": "Unique intercepted request identifier.",
          "type": "string"
        },
        {
          "id": "ErrorReason",
          "description": "Network level fetch failure reason.",
          "type": "string",
          "enum": [
            "Failed",
            "Aborted",
            "TimedOut",
            "AccessDenied",
            "ConnectionClosed",
            "ConnectionReset",
            "ConnectionRefused",
            "ConnectionAborted",
            "ConnectionFailed",
            "NameNotResolved",
            "InternetDisconnected",
            "AddressUnreachable",
            "BlockedByClient",
            "BlockedByResponse"
          ]
        },
        {
          "id": "TimeSinceEpoch",
          "description": "UTC time in seconds, counted from January 1, 1970.",
          "type": "number"
        },
        {
          "id": "MonotonicTime",
          "description": "Monotonically increasing time in seconds since an arbitrary point in the past.",
          "type": "number"
        },
        {
          "id": "Headers",
          "description": "Request / response headers as keys / values of JSON object.",
          "type": "object"
        },
        {
          "id": "ConnectionType",
          "description": "The underlying connection technology that the browser is supposedly using.",
          "type": "string",
          "enum": [
            "none",
            "cellular2g",
            "cellular3g",
            "cellular4g",
            "bluetooth",
            "ethernet",
            "wifi",
            "wimax",
            "other"
          ]
        },
        {
          "id": "CookieSameSite",
          "description": "Represents the cookie's 'SameSite' status:\nhttps://tools.ietf.org/html/draft-west-first-party-cookies",
          "type": "string",
          "enum": [
            "Strict",
            "Lax",
            "None"
          ]
        },
        {
          "id": "ResourceTiming",
          "description": "Timing information for the request.",
          "type": "object",
          "properties": [
            {
              "name": "requestTime",
              "description": "Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\nmilliseconds relatively to this requestTime.",
              "type": "number"
            },
            {
              "name": "proxyStart",
              "description": "Started resolving proxy.",
              "type": "number"
            },
            {
              "name": "proxyEnd",
              "description": "Finished resolving proxy.",
              "type": "number"
            },
            {
              "name": "dnsStart",
              "description": "Started DNS address resolve.",
              "type": "number"
            },
            {
              "name": "dnsEnd",
              "description": "Finished DNS address resolve.",
              "type": "number"
            },
            {
              "name": "connectStart",
              "description": "Started connecting to the remote host.",
              "type": "number"
            },
            {
              "name": "connectEnd",
              "description": "Connected to the remote host.",
              "type": "number"
            },
            {
              "name": "sslStart",
              "description": "Started SSL handshake.",
              "type": "number"
            },
            {
              "name": "sslEnd",
              "description": "Finished SSL handshake.",
              "type": "number"
            },
            {
              "name": "workerStart",
              "description": "Started running ServiceWorker.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "workerReady",
              "description": "Finished Starting ServiceWorker.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "workerFetchStart",
              "description": "Started fetch event.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "workerRespondWithSettled",
              "description": "Settled fetch event respondWith promise.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "sendStart",
              "description": "Started sending request.",
              "type": "number"
            },
            {
              "name": "sendEnd",
              "description": "Finished sending request.",
              "type": "number"
            },
            {
              "name": "pushStart",
              "description": "Time the server started pushing request.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "pushEnd",
              "description": "Time the server finished pushing request.",
              "experimental": true,
              "type": "number"
            },
            {
              "name": "receiveHeadersEnd",
              "description": "Finished receiving response headers.",
              "type": "number"
            }
          ]
        },
        {
          "id": "ResourcePriority",
          "description": "Loading priority of a resource request.",
          "type": "string",
          "enum": [
            "VeryLow",
            "Low",
            "Medium",
            "High",
            "VeryHigh"
          ]
        },
        {
          "id": "PostDataEntry",
          "description": "Post data entry for HTTP request",
          "type": "object",
          "properties": [
            {
              "name": "bytes",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "id": "Request",
          "description": "HTTP request data.",
          "type": "object",
          "properties": [
            {
              "name": "url",
              "description": "Request URL (without fragment).",
              "type": "string"
            },
            {
              "name": "urlFragment",
              "description": "Fragment of the requested URL starting with hash, if present.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "method",
              "description": "HTTP request method.",
              "type": "string"
            },
            {
              "name": "headers",
              "description": "HTTP request headers.",
              "$ref": "Headers"
            },
            {
              "name": "postData",
              "description": "HTTP POST request data.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "hasPostData",
              "description": "True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "postDataEntries",
              "description": "Request body elements. This will be converted from base64 to binary",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "PostDataEntry"
              }
            },
            {
              "name": "mixedContentType",
              "description": "The mixed content type of the request.",
              "optional": true,
              "$ref": "Security.MixedContentType"
            },
            {
              "name": "initialPriority",
              "description": "Priority of the resource request at the time request is sent.",
              "$ref": "ResourcePriority"
            },
            {
              "name": "referrerPolicy",
              "description": "The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/",
              "type": "string",
              "enum": [
                "unsafe-url",
                "no-referrer-when-downgrade",
                "no-referrer",
                "origin",
                "origin-when-cross-origin",
                "same-origin",
                "strict-origin",
                "strict-origin-when-cross-origin"
              ]
            },
            {
              "name": "isLinkPreload",
              "description": "Whether is loaded via link preload.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "trustTokenParams",
              "description": "Set for requests when the TrustToken API is used. Contains the parameters\npassed by the developer (e.g. via \"fetch\") as understood by the backend.",
              "experimental": true,
              "optional": true,
              "$ref": "TrustTokenParams"
            },
            {
              "name": "isSameSite",
              "description": "True if this resource request is considered to be the 'same site' as the\nrequest correspondinfg to the main frame.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "id": "SignedCertificateTimestamp",
          "description": "Details of a signed certificate timestamp (SCT).",
          "type": "object",
          "properties": [
            {
              "name": "status",
              "description": "Validation status.",
              "type": "string"
            },
            {
              "name": "origin",
              "description": "Origin.",
              "type": "string"
            },
            {
              "name": "logDescription",
              "description": "Log name / description.",
              "type": "string"
            },
            {
              "name": "logId",
              "description": "Log ID.",
              "type": "string"
            },
            {
              "name": "timestamp",
              "description": "Issuance date.",
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "hashAlgorithm",
              "description": "Hash algorithm.",
              "type": "string"
            },
            {
              "name": "signatureAlgorithm",
              "description": "Signature algorithm.",
              "type": "string"
            },
            {
              "name": "signatureData",
              "description": "Signature data.",
              "type": "string"
            }
          ]
        },
        {
          "id": "SecurityDetails",
          "description": "Security details about a request.",
          "type": "object",
          "properties": [
            {
              "name": "protocol",
              "description": "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").",
              "type": "string"
            },
            {
              "name": "keyExchange",
              "description": "Key Exchange used by the connection, or the empty string if not applicable.",
              "type": "string"
            },
            {
              "name": "keyExchangeGroup",
              "description": "(EC)DH group used by the connection, if applicable.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "cipher",
              "description": "Cipher name.",
              "type": "string"
            },
            {
              "name": "mac",
              "description": "TLS MAC. Note that AEAD ciphers do not have separate MACs.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "certificateId",
              "description": "Certificate ID value.",
              "$ref": "Security.CertificateId"
            },
            {
              "name": "subjectName",
              "description": "Certificate subject name.",
              "type": "string"
            },
            {
              "name": "sanList",
              "description": "Subject Alternative Name (SAN) DNS names and IP addresses.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "issuer",
              "description": "Name of the issuing CA.",
              "type": "string"
            },
            {
              "name": "validFrom",
              "description": "Certificate valid from date.",
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "validTo",
              "description": "Certificate valid to (expiration) date",
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "signedCertificateTimestampList",
              "description": "List of signed certificate timestamps (SCTs).",
              "type": "array",
              "items": {
                "$ref": "SignedCertificateTimestamp"
              }
            },
            {
              "name": "certificateTransparencyCompliance",
              "description": "Whether the request complied with Certificate Transparency policy",
              "$ref": "CertificateTransparencyCompliance"
            }
          ]
        },
        {
          "id": "CertificateTransparencyCompliance",
          "description": "Whether the request complied with Certificate Transparency policy.",
          "type": "string",
          "enum": [
            "unknown",
            "not-compliant",
            "compliant"
          ]
        },
        {
          "id": "BlockedReason",
          "description": "The reason why request was blocked.",
          "type": "string",
          "enum": [
            "other",
            "csp",
            "mixed-content",
            "origin",
            "inspector",
            "subresource-filter",
            "content-type",
            "coep-frame-resource-needs-coep-header",
            "coop-sandboxed-iframe-cannot-navigate-to-coop-page",
            "corp-not-same-origin",
            "corp-not-same-origin-after-defaulted-to-same-origin-by-coep",
            "corp-not-same-site"
          ]
        },
        {
          "id": "CorsError",
          "description": "The reason why request was blocked.",
          "type": "string",
          "enum": [
            "DisallowedByMode",
            "InvalidResponse",
            "WildcardOriginNotAllowed",
            "MissingAllowOriginHeader",
            "MultipleAllowOriginValues",
            "InvalidAllowOriginValue",
            "AllowOriginMismatch",
            "InvalidAllowCredentials",
            "CorsDisabledScheme",
            "PreflightInvalidStatus",
            "PreflightDisallowedRedirect",
            "PreflightWildcardOriginNotAllowed",
            "PreflightMissingAllowOriginHeader",
            "PreflightMultipleAllowOriginValues",
            "PreflightInvalidAllowOriginValue",
            "PreflightAllowOriginMismatch",
            "PreflightInvalidAllowCredentials",
            "PreflightMissingAllowExternal",
            "PreflightInvalidAllowExternal",
            "InvalidAllowMethodsPreflightResponse",
            "InvalidAllowHeadersPreflightResponse",
            "MethodDisallowedByPreflightResponse",
            "HeaderDisallowedByPreflightResponse",
            "RedirectContainsCredentials",
            "InsecurePrivateNetwork",
            "NoCorsRedirectModeNotFollow"
          ]
        },
        {
          "id": "CorsErrorStatus",
          "type": "object",
          "properties": [
            {
              "name": "corsError",
              "$ref": "CorsError"
            },
            {
              "name": "failedParameter",
              "type": "string"
            }
          ]
        },
        {
          "id": "ServiceWorkerResponseSource",
          "description": "Source of serviceworker response.",
          "type": "string",
          "enum": [
            "cache-storage",
            "http-cache",
            "fallback-code",
            "network"
          ]
        },
        {
          "id": "Response",
          "description": "HTTP response data.",
          "type": "object",
          "properties": [
            {
              "name": "url",
              "description": "Response URL. This URL can be different from CachedResource.url in case of redirect.",
              "type": "string"
            },
            {
              "name": "status",
              "description": "HTTP response status code.",
              "type": "integer"
            },
            {
              "name": "statusText",
              "description": "HTTP response status text.",
              "type": "string"
            },
            {
              "name": "headers",
              "description": "HTTP response headers.",
              "$ref": "Headers"
            },
            {
              "name": "headersText",
              "description": "HTTP response headers text.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "mimeType",
              "description": "Resource mimeType as determined by the browser.",
              "type": "string"
            },
            {
              "name": "requestHeaders",
              "description": "Refined HTTP request headers that were actually transmitted over the network.",
              "optional": true,
              "$ref": "Headers"
            },
            {
              "name": "requestHeadersText",
              "description": "HTTP request headers text.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "connectionReused",
              "description": "Specifies whether physical connection was actually reused for this request.",
              "type": "boolean"
            },
            {
              "name": "connectionId",
              "description": "Physical connection id that was actually used for this request.",
              "type": "number"
            },
            {
              "name": "remoteIPAddress",
              "description": "Remote IP address.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "remotePort",
              "description": "Remote port.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "fromDiskCache",
              "description": "Specifies that the request was served from the disk cache.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "fromServiceWorker",
              "description": "Specifies that the request was served from the ServiceWorker.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "fromPrefetchCache",
              "description": "Specifies that the request was served from the prefetch cache.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "encodedDataLength",
              "description": "Total number of bytes received for this request so far.",
              "type": "number"
            },
            {
              "name": "timing",
              "description": "Timing information for the given request.",
              "optional": true,
              "$ref": "ResourceTiming"
            },
            {
              "name": "serviceWorkerResponseSource",
              "description": "Response source of response from ServiceWorker.",
              "optional": true,
              "$ref": "ServiceWorkerResponseSource"
            },
            {
              "name": "responseTime",
              "description": "The time at which the returned response was generated.",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "cacheStorageCacheName",
              "description": "Cache Storage Cache Name.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "protocol",
              "description": "Protocol used to fetch this request.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "securityState",
              "description": "Security state of the request resource.",
              "$ref": "Security.SecurityState"
            },
            {
              "name": "securityDetails",
              "description": "Security details for the request.",
              "optional": true,
              "$ref": "SecurityDetails"
            }
          ]
        },
        {
          "id": "WebSocketRequest",
          "description": "WebSocket request data.",
          "type": "object",
          "properties": [
            {
              "name": "headers",
              "description": "HTTP request headers.",
              "$ref": "Headers"
            }
          ]
        },
        {
          "id": "WebSocketResponse",
          "description": "WebSocket response data.",
          "type": "object",
          "properties": [
            {
              "name": "status",
              "description": "HTTP response status code.",
              "type": "integer"
            },
            {
              "name": "statusText",
              "description": "HTTP response status text.",
              "type": "string"
            },
            {
              "name": "headers",
              "description": "HTTP response headers.",
              "$ref": "Headers"
            },
            {
              "name": "headersText",
              "description": "HTTP response headers text.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "requestHeaders",
              "description": "HTTP request headers.",
              "optional": true,
              "$ref": "Headers"
            },
            {
              "name": "requestHeadersText",
              "description": "HTTP request headers text.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "id": "WebSocketFrame",
          "description": "WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.",
          "type": "object",
          "properties": [
            {
              "name": "opcode",
              "description": "WebSocket message opcode.",
              "type": "number"
            },
            {
              "name": "mask",
              "description": "WebSocket message mask.",
              "type": "boolean"
            },
            {
              "name": "payloadData",
              "description": "WebSocket message payload data.\nIf the opcode is 1, this is a text message and payloadData is a UTF-8 string.\nIf the opcode isn't 1, then payloadData is a base64 encoded string representing binary data.",
              "type": "string"
            }
          ]
        },
        {
          "id": "CachedResource",
          "description": "Information about the cached resource.",
          "type": "object",
          "properties": [
            {
              "name": "url",
              "description": "Resource URL. This is the url of the original network request.",
              "type": "string"
            },
            {
              "name": "type",
              "description": "Type of this resource.",
              "$ref": "ResourceType"
            },
            {
              "name": "response",
              "description": "Cached response data.",
              "optional": true,
              "$ref": "Response"
            },
            {
              "name": "bodySize",
              "description": "Cached response body size.",
              "type": "number"
            }
          ]
        },
        {
          "id": "Initiator",
          "description": "Information about the request initiator.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Type of this initiator.",
              "type": "string",
              "enum": [
                "parser",
                "script",
                "preload",
                "SignedExchange",
                "preflight",
                "other"
              ]
            },
            {
              "name": "stack",
              "description": "Initiator JavaScript stack trace, set for Script only.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "url",
              "description": "Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "lineNumber",
              "description": "Initiator line number, set for Parser type or for Script type (when script is importing\nmodule) (0-based).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "columnNumber",
              "description": "Initiator column number, set for Parser type or for Script type (when script is importing\nmodule) (0-based).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "requestId",
              "description": "Set if another request triggered this request (e.g. preflight).",
              "optional": true,
              "$ref": "RequestId"
            }
          ]
        },
        {
          "id": "Cookie",
          "description": "Cookie object",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Cookie name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Cookie value.",
              "type": "string"
            },
            {
              "name": "domain",
              "description": "Cookie domain.",
              "type": "string"
            },
            {
              "name": "path",
              "description": "Cookie path.",
              "type": "string"
            },
            {
              "name": "expires",
              "description": "Cookie expiration date as the number of seconds since the UNIX epoch.",
              "type": "number"
            },
            {
              "name": "size",
              "description": "Cookie size.",
              "type": "integer"
            },
            {
              "name": "httpOnly",
              "description": "True if cookie is http-only.",
              "type": "boolean"
            },
            {
              "name": "secure",
              "description": "True if cookie is secure.",
              "type": "boolean"
            },
            {
              "name": "session",
              "description": "True in case of session cookie.",
              "type": "boolean"
            },
            {
              "name": "sameSite",
              "description": "Cookie SameSite type.",
              "optional": true,
              "$ref": "CookieSameSite"
            },
            {
              "name": "priority",
              "description": "Cookie Priority",
              "experimental": true,
              "$ref": "CookiePriority"
            },
            {
              "name": "sameParty",
              "description": "True if cookie is SameParty.",
              "experimental": true,
              "type": "boolean"
            },
            {
              "name": "sourceScheme",
              "description": "Cookie source scheme type.",
              "experimental": true,
              "$ref": "CookieSourceScheme"
            },
            {
              "name": "sourcePort",
              "description": "Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\nAn unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\nThis is a temporary ability and it will be removed in the future.",
              "experimental": true,
              "type": "integer"
            }
          ]
        },
        {
          "id": "CookieParam",
          "description": "Cookie parameter object",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Cookie name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Cookie value.",
              "type": "string"
            },
            {
              "name": "url",
              "description": "The request-URI to associate with the setting of the cookie. This value can affect the\ndefault domain, path, source port, and source scheme values of the created cookie.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "domain",
              "description": "Cookie domain.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "path",
              "description": "Cookie path.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "secure",
              "description": "True if cookie is secure.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "httpOnly",
              "description": "True if cookie is http-only.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "sameSite",
              "description": "Cookie SameSite type.",
              "optional": true,
              "$ref": "CookieSameSite"
            },
            {
              "name": "expires",
              "description": "Cookie expiration date, session cookie if not set",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "priority",
              "description": "Cookie Priority.",
              "experimental": true,
              "optional": true,
              "$ref": "CookiePriority"
            },
            {
              "name": "sameParty",
              "description": "True if cookie is SameParty.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "sourceScheme",
              "description": "Cookie source scheme type.",
              "experimental": true,
              "optional": true,
              "$ref": "CookieSourceScheme"
            },
            {
              "name": "sourcePort",
              "description": "Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\nAn unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\nThis is a temporary ability and it will be removed in the future.",
              "experimental": true,
              "optional": true,
              "type": "integer"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "clearBrowserCache",
          "description": "Clears browser cache."
        },
        {
          "name": "clearBrowserCookies",
          "description": "Clears browser cookies."
        },
        {
          "name": "deleteCookies",
          "description": "Deletes browser cookies with matching name and url or domain/path pair.",
          "parameters": [
            {
              "name": "name",
              "description": "Name of the cookies to remove.",
              "type": "string"
            },
            {
              "name": "url",
              "description": "If specified, deletes all the cookies with the given name where domain and path match\nprovided URL.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "domain",
              "description": "If specified, deletes only cookies with the exact domain.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "path",
              "description": "If specified, deletes only cookies with the exact path.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables network tracking, prevents network events from being sent to the client."
        },
        {
          "name": "emulateNetworkConditions",
          "description": "Activates emulation of network conditions.",
          "parameters": [
            {
              "name": "offline",
              "description": "True to emulate internet disconnection.",
              "type": "boolean"
            },
            {
              "name": "latency",
              "description": "Minimum latency from request sent to response headers received (ms).",
              "type": "number"
            },
            {
              "name": "downloadThroughput",
              "description": "Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.",
              "type": "number"
            },
            {
              "name": "uploadThroughput",
              "description": "Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.",
              "type": "number"
            },
            {
              "name": "connectionType",
              "description": "Connection type if known.",
              "optional": true,
              "$ref": "ConnectionType"
            }
          ]
        },
        {
          "name": "enable",
          "description": "Enables network tracking, network events will now be delivered to the client.",
          "parameters": [
            {
              "name": "maxTotalBufferSize",
              "description": "Buffer size in bytes to use when preserving network payloads (XHRs, etc).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "maxResourceBufferSize",
              "description": "Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "maxPostDataSize",
              "description": "Longest post body size (in bytes) that would be included in requestWillBeSent notification",
              "optional": true,
              "type": "integer"
            }
          ]
        },
        {
          "name": "getAllCookies",
          "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie\ninformation in the `cookies` field.",
          "returns": [
            {
              "name": "cookies",
              "description": "Array of cookie objects.",
              "type": "array",
              "items": {
                "$ref": "Cookie"
              }
            }
          ]
        },
        {
          "name": "getCookies",
          "description": "Returns all browser cookies for the current URL. Depending on the backend support, will return\ndetailed cookie information in the `cookies` field.",
          "parameters": [
            {
              "name": "urls",
              "description": "The list of URLs for which applicable cookies will be fetched.\nIf not specified, it's assumed to be set to the list containing\nthe URLs of the page and all of its subframes.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": [
            {
              "name": "cookies",
              "description": "Array of cookie objects.",
              "type": "array",
              "items": {
                "$ref": "Cookie"
              }
            }
          ]
        },
        {
          "name": "getResponseBody",
          "description": "Returns content served for the given request.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Identifier of the network request to get content for.",
              "$ref": "RequestId"
            }
          ],
          "returns": [
            {
              "name": "body",
              "description": "Response body.",
              "type": "string"
            },
            {
              "name": "base64Encoded",
              "description": "True, if content was sent as base64.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "getRequestPostData",
          "description": "Returns post data sent with the request. Returns an error when no data was sent with the request.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Identifier of the network request to get content for.",
              "$ref": "RequestId"
            }
          ],
          "returns": [
            {
              "name": "postData",
              "description": "Request body string, omitting files from multipart requests",
              "type": "string"
            }
          ]
        },
        {
          "name": "setCacheDisabled",
          "description": "Toggles ignoring cache for each request. If `true`, cache will not be used.",
          "parameters": [
            {
              "name": "cacheDisabled",
              "description": "Cache disabled state.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "setCookie",
          "description": "Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.",
          "parameters": [
            {
              "name": "name",
              "description": "Cookie name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Cookie value.",
              "type": "string"
            },
            {
              "name": "url",
              "description": "The request-URI to associate with the setting of the cookie. This value can affect the\ndefault domain, path, source port, and source scheme values of the created cookie.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "domain",
              "description": "Cookie domain.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "path",
              "description": "Cookie path.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "secure",
              "description": "True if cookie is secure.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "httpOnly",
              "description": "True if cookie is http-only.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "sameSite",
              "description": "Cookie SameSite type.",
              "optional": true,
              "$ref": "CookieSameSite"
            },
            {
              "name": "expires",
              "description": "Cookie expiration date, session cookie if not set",
              "optional": true,
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "priority",
              "description": "Cookie Priority type.",
              "experimental": true,
              "optional": true,
              "$ref": "CookiePriority"
            },
            {
              "name": "sameParty",
              "description": "True if cookie is SameParty.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "sourceScheme",
              "description": "Cookie source scheme type.",
              "experimental": true,
              "optional": true,
              "$ref": "CookieSourceScheme"
            },
            {
              "name": "sourcePort",
              "description": "Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\nAn unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\nThis is a temporary ability and it will be removed in the future.",
              "experimental": true,
              "optional": true,
              "type": "integer"
            }
          ],
          "returns": [
            {
              "name": "success",
              "description": "Always set to true. If an error occurs, the response indicates protocol error.",
              "deprecated": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "setCookies",
          "description": "Sets given cookies.",
          "parameters": [
            {
              "name": "cookies",
              "description": "Cookies to be set.",
              "type": "array",
              "items": {
                "$ref": "CookieParam"
              }
            }
          ]
        },
        {
          "name": "setExtraHTTPHeaders",
          "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
          "parameters": [
            {
              "name": "headers",
              "description": "Map with extra HTTP headers.",
              "$ref": "Headers"
            }
          ]
        },
        {
          "name": "setUserAgentOverride",
          "description": "Allows overriding user agent with the given string.",
          "redirect": "Emulation",
          "parameters": [
            {
              "name": "userAgent",
              "description": "User agent to use.",
              "type": "string"
            },
            {
              "name": "acceptLanguage",
              "description": "Browser langugage to emulate.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "platform",
              "description": "The platform navigator.platform should return.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "userAgentMetadata",
              "description": "To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData",
              "experimental": true,
              "optional": true,
              "$ref": "Emulation.UserAgentMetadata"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "dataReceived",
          "description": "Fired when data chunk was received over the network.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "dataLength",
              "description": "Data chunk length.",
              "type": "integer"
            },
            {
              "name": "encodedDataLength",
              "description": "Actual bytes received (might be less than dataLength for compressed encodings).",
              "type": "integer"
            }
          ]
        },
        {
          "name": "eventSourceMessageReceived",
          "description": "Fired when EventSource message is received.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "eventName",
              "description": "Message type.",
              "type": "string"
            },
            {
              "name": "eventId",
              "description": "Message identifier.",
              "type": "string"
            },
            {
              "name": "data",
              "description": "Message content.",
              "type": "string"
            }
          ]
        },
        {
          "name": "loadingFailed",
          "description": "Fired when HTTP request has failed to load.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "type",
              "description": "Resource type.",
              "$ref": "ResourceType"
            },
            {
              "name": "errorText",
              "description": "User friendly error message.",
              "type": "string"
            },
            {
              "name": "canceled",
              "description": "True if loading was canceled.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "blockedReason",
              "description": "The reason why loading was blocked, if any.",
              "optional": true,
              "$ref": "BlockedReason"
            },
            {
              "name": "corsErrorStatus",
              "description": "The reason why loading was blocked by CORS, if any.",
              "optional": true,
              "$ref": "CorsErrorStatus"
            }
          ]
        },
        {
          "name": "loadingFinished",
          "description": "Fired when HTTP request has finished loading.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "encodedDataLength",
              "description": "Total number of bytes received for this request.",
              "type": "number"
            },
            {
              "name": "shouldReportCorbBlocking",
              "description": "Set when 1) response was blocked by Cross-Origin Read Blocking and also\n2) this needs to be reported to the DevTools console.",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "requestServedFromCache",
          "description": "Fired if request ended up loading from cache.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            }
          ]
        },
        {
          "name": "requestWillBeSent",
          "description": "Fired when page is about to send HTTP request.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "loaderId",
              "description": "Loader identifier. Empty string if the request is fetched from worker.",
              "$ref": "LoaderId"
            },
            {
              "name": "documentURL",
              "description": "URL of the document this request is loaded for.",
              "type": "string"
            },
            {
              "name": "request",
              "description": "Request data.",
              "$ref": "Request"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "wallTime",
              "description": "Timestamp.",
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "initiator",
              "description": "Request initiator.",
              "$ref": "Initiator"
            },
            {
              "name": "redirectResponse",
              "description": "Redirect response data.",
              "optional": true,
              "$ref": "Response"
            },
            {
              "name": "type",
              "description": "Type of this resource.",
              "optional": true,
              "$ref": "ResourceType"
            },
            {
              "name": "frameId",
              "description": "Frame identifier.",
              "optional": true,
              "$ref": "Page.FrameId"
            },
            {
              "name": "hasUserGesture",
              "description": "Whether the request is initiated by a user gesture. Defaults to false.",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "responseReceived",
          "description": "Fired when HTTP response is available.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "loaderId",
              "description": "Loader identifier. Empty string if the request is fetched from worker.",
              "$ref": "LoaderId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "type",
              "description": "Resource type.",
              "$ref": "ResourceType"
            },
            {
              "name": "response",
              "description": "Response data.",
              "$ref": "Response"
            },
            {
              "name": "frameId",
              "description": "Frame identifier.",
              "optional": true,
              "$ref": "Page.FrameId"
            }
          ]
        },
        {
          "name": "webSocketClosed",
          "description": "Fired when WebSocket is closed.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            }
          ]
        },
        {
          "name": "webSocketCreated",
          "description": "Fired upon WebSocket creation.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "url",
              "description": "WebSocket request URL.",
              "type": "string"
            },
            {
              "name": "initiator",
              "description": "Request initiator.",
              "optional": true,
              "$ref": "Initiator"
            }
          ]
        },
        {
          "name": "webSocketFrameError",
          "description": "Fired when WebSocket message error occurs.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "errorMessage",
              "description": "WebSocket error message.",
              "type": "string"
            }
          ]
        },
        {
          "name": "webSocketFrameReceived",
          "description": "Fired when WebSocket message is received.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "response",
              "description": "WebSocket response data.",
              "$ref": "WebSocketFrame"
            }
          ]
        },
        {
          "name": "webSocketFrameSent",
          "description": "Fired when WebSocket message is sent.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "response",
              "description": "WebSocket response data.",
              "$ref": "WebSocketFrame"
            }
          ]
        },
        {
          "name": "webSocketHandshakeResponseReceived",
          "description": "Fired when WebSocket handshake response becomes available.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "response",
              "description": "WebSocket response data.",
              "$ref": "WebSocketResponse"
            }
          ]
        },
        {
          "name": "webSocketWillSendHandshakeRequest",
          "description": "Fired when WebSocket is about to initiate handshake.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "wallTime",
              "description": "UTC Timestamp.",
              "$ref": "TimeSinceEpoch"
            },
            {
              "name": "request",
              "description": "WebSocket request data.",
              "$ref": "WebSocketRequest"
            }
          ]
        },
        {
          "name": "webTransportCreated",
          "description": "Fired upon WebTransport creation.",
          "parameters": [
            {
              "name": "transportId",
              "description": "WebTransport identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "url",
              "description": "WebTransport request URL.",
              "type": "string"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            },
            {
              "name": "initiator",
              "description": "Request initiator.",
              "optional": true,
              "$ref": "Initiator"
            }
          ]
        },
        {
          "name": "webTransportConnectionEstablished",
          "description": "Fired when WebTransport handshake is finished.",
          "parameters": [
            {
              "name": "transportId",
              "description": "WebTransport identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            }
          ]
        },
        {
          "name": "webTransportClosed",
          "description": "Fired when WebTransport is disposed.",
          "parameters": [
            {
              "name": "transportId",
              "description": "WebTransport identifier.",
              "$ref": "RequestId"
            },
            {
              "name": "timestamp",
              "description": "Timestamp.",
              "$ref": "MonotonicTime"
            }
          ]
        }
      ]
    },
    {
      "domain": "Page",
      "description": "Actions and events related to the inspected page belong to the page domain.",
      "dependencies": [
        "Debugger",
        "DOM",
        "IO",
        "Network",
        "Runtime"
      ],
      "types": [
        {
          "id": "FrameId",
          "description": "Unique frame identifier.",
          "type": "string"
        },
        {
          "id": "Frame",
          "description": "Information about the Frame on the page.",
          "type": "object",
          "properties": [
            {
              "name": "id",
              "description": "Frame unique identifier.",
              "$ref": "FrameId"
            },
            {
              "name": "parentId",
              "description": "Parent frame identifier.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "loaderId",
              "description": "Identifier of the loader associated with this frame.",
              "$ref": "Network.LoaderId"
            },
            {
              "name": "name",
              "description": "Frame's name as specified in the tag.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "url",
              "description": "Frame document's URL without fragment.",
              "type": "string"
            },
            {
              "name": "urlFragment",
              "description": "Frame document's URL fragment including the '#'.",
              "experimental": true,
              "optional": true,
              "type": "string"
            },
            {
              "name": "domainAndRegistry",
              "description": "Frame document's registered domain, taking the public suffixes list into account.\nExtracted from the Frame's url.\nExample URLs: http://www.google.com/file.html -> \"google.com\"\n              http://a.b.co.uk/file.html      -> \"b.co.uk\"",
              "experimental": true,
              "type": "string"
            },
            {
              "name": "securityOrigin",
              "description": "Frame document's security origin.",
              "type": "string"
            },
            {
              "name": "mimeType",
              "description": "Frame document's mimeType as determined by the browser.",
              "type": "string"
            },
            {
              "name": "unreachableUrl",
              "description": "If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.",
              "experimental": true,
              "optional": true,
              "type": "string"
            },
            {
              "name": "adFrameStatus",
              "description": "Indicates whether this frame was tagged as an ad and why.",
              "experimental": true,
              "optional": true,
              "$ref": "AdFrameStatus"
            },
            {
              "name": "secureContextType",
              "description": "Indicates whether the main document is a secure context and explains why that is the case.",
              "experimental": true,
              "$ref": "SecureContextType"
            },
            {
              "name": "crossOriginIsolatedContextType",
              "description": "Indicates whether this is a cross origin isolated context.",
              "experimental": true,
              "$ref": "CrossOriginIsolatedContextType"
            },
            {
              "name": "gatedAPIFeatures",
              "description": "Indicated which gated APIs / features are available.",
              "experimental": true,
              "type": "array",
              "items": {
                "$ref": "GatedAPIFeatures"
              }
            },
            {
              "name": "originTrials",
              "description": "Frame document's origin trials with at least one token present.",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "OriginTrial"
              }
            }
          ]
        },
        {
          "id": "FrameTree",
          "description": "Information about the Frame hierarchy.",
          "type": "object",
          "properties": [
            {
              "name": "frame",
              "description": "Frame information for this tree item.",
              "$ref": "Frame"
            },
            {
              "name": "childFrames",
              "description": "Child frames.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "FrameTree"
              }
            }
          ]
        },
        {
          "id": "ScriptIdentifier",
          "description": "Unique script identifier.",
          "type": "string"
        },
        {
          "id": "TransitionType",
          "description": "Transition type.",
          "type": "string",
          "enum": [
            "link",
            "typed",
            "address_bar",
            "auto_bookmark",
            "auto_subframe",
            "manual_subframe",
            "generated",
            "auto_toplevel",
            "form_submit",
            "reload",
            "keyword",
            "keyword_generated",
            "other"
          ]
        },
        {
          "id": "NavigationEntry",
          "description": "Navigation history entry.",
          "type": "object",
          "properties": [
            {
              "name": "id",
              "description": "Unique id of the navigation history entry.",
              "type": "integer"
            },
            {
              "name": "url",
              "description": "URL of the navigation history entry.",
              "type": "string"
            },
            {
              "name": "userTypedURL",
              "description": "URL that the user typed in the url bar.",
              "type": "string"
            },
            {
              "name": "title",
              "description": "Title of the navigation history entry.",
              "type": "string"
            },
            {
              "name": "transitionType",
              "description": "Transition type.",
              "$ref": "TransitionType"
            }
          ]
        },
        {
          "id": "DialogType",
          "description": "Javascript dialog type.",
          "type": "string",
          "enum": [
            "alert",
            "confirm",
            "prompt",
            "beforeunload"
          ]
        },
        {
          "id": "AppManifestError",
          "description": "Error while paring app manifest.",
          "type": "object",
          "properties": [
            {
              "name": "message",
              "description": "Error message.",
              "type": "string"
            },
            {
              "name": "critical",
              "description": "If criticial, this is a non-recoverable parse error.",
              "type": "integer"
            },
            {
              "name": "line",
              "description": "Error line.",
              "type": "integer"
            },
            {
              "name": "column",
              "description": "Error column.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "LayoutViewport",
          "description": "Layout viewport position and dimensions.",
          "type": "object",
          "properties": [
            {
              "name": "pageX",
              "description": "Horizontal offset relative to the document (CSS pixels).",
              "type": "integer"
            },
            {
              "name": "pageY",
              "description": "Vertical offset relative to the document (CSS pixels).",
              "type": "integer"
            },
            {
              "name": "clientWidth",
              "description": "Width (CSS pixels), excludes scrollbar if present.",
              "type": "integer"
            },
            {
              "name": "clientHeight",
              "description": "Height (CSS pixels), excludes scrollbar if present.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "VisualViewport",
          "description": "Visual viewport position, dimensions, and scale.",
          "type": "object",
          "properties": [
            {
              "name": "offsetX",
              "description": "Horizontal offset relative to the layout viewport (CSS pixels).",
              "type": "number"
            },
            {
              "name": "offsetY",
              "description": "Vertical offset relative to the layout viewport (CSS pixels).",
              "type": "number"
            },
            {
              "name": "pageX",
              "description": "Horizontal offset relative to the document (CSS pixels).",
              "type": "number"
            },
            {
              "name": "pageY",
              "description": "Vertical offset relative to the document (CSS pixels).",
              "type": "number"
            },
            {
              "name": "clientWidth",
              "description": "Width (CSS pixels), excludes scrollbar if present.",
              "type": "number"
            },
            {
              "name": "clientHeight",
              "description": "Height (CSS pixels), excludes scrollbar if present.",
              "type": "number"
            },
            {
              "name": "scale",
              "description": "Scale relative to the ideal viewport (size at width=device-width).",
              "type": "number"
            },
            {
              "name": "zoom",
              "description": "Page zoom factor (CSS to device independent pixels ratio).",
              "optional": true,
              "type": "number"
            }
          ]
        },
        {
          "id": "Viewport",
          "description": "Viewport for capturing screenshot.",
          "type": "object",
          "properties": [
            {
              "name": "x",
              "description": "X offset in device independent pixels (dip).",
              "type": "number"
            },
            {
              "name": "y",
              "description": "Y offset in device independent pixels (dip).",
              "type": "number"
            },
            {
              "name": "width",
              "description": "Rectangle width in device independent pixels (dip).",
              "type": "number"
            },
            {
              "name": "height",
              "description": "Rectangle height in device independent pixels (dip).",
              "type": "number"
            },
            {
              "name": "scale",
              "description": "Page scale factor.",
              "type": "number"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "addScriptToEvaluateOnNewDocument",
          "description": "Evaluates given script in every frame upon creation (before loading frame's scripts).",
          "parameters": [
            {
              "name": "source",
              "type": "string"
            },
            {
              "name": "worldName",
              "description": "If specified, creates an isolated world with the given name and evaluates given script in it.\nThis world name will be used as the ExecutionContextDescription::name when the corresponding\nevent is emitted.",
              "experimental": true,
              "optional": true,
              "type": "string"
            },
            {
              "name": "includeCommandLineAPI",
              "description": "Specifies whether command line API should be available to the script, defaults\nto false.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "identifier",
              "description": "Identifier of the added script.",
              "$ref": "ScriptIdentifier"
            }
          ]
        },
        {
          "name": "bringToFront",
          "description": "Brings page to front (activates tab)."
        },
        {
          "name": "captureScreenshot",
          "description": "Capture page screenshot.",
          "parameters": [
            {
              "name": "format",
              "description": "Image compression format (defaults to png).",
              "optional": true,
              "type": "string",
              "enum": [
                "jpeg",
                "png",
                "webp"
              ]
            },
            {
              "name": "quality",
              "description": "Compression quality from range [0..100] (jpeg only).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "clip",
              "description": "Capture the screenshot of a given region only.",
              "optional": true,
              "$ref": "Viewport"
            },
            {
              "name": "fromSurface",
              "description": "Capture the screenshot from the surface, rather than the view. Defaults to true.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "captureBeyondViewport",
              "description": "Capture the screenshot beyond the viewport. Defaults to false.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "data",
              "description": "Base64-encoded image data. (Encoded as a base64 string when passed over JSON)",
              "type": "string"
            }
          ]
        },
        {
          "name": "createIsolatedWorld",
          "description": "Creates an isolated world for the given frame.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Id of the frame in which the isolated world should be created.",
              "$ref": "FrameId"
            },
            {
              "name": "worldName",
              "description": "An optional name which is reported in the Execution Context.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "grantUniveralAccess",
              "description": "Whether or not universal access should be granted to the isolated world. This is a powerful\noption, use with caution.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "executionContextId",
              "description": "Execution context of the isolated world.",
              "$ref": "Runtime.ExecutionContextId"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables page domain notifications."
        },
        {
          "name": "enable",
          "description": "Enables page domain notifications."
        },
        {
          "name": "getAppManifest",
          "returns": [
            {
              "name": "url",
              "description": "Manifest location.",
              "type": "string"
            },
            {
              "name": "errors",
              "type": "array",
              "items": {
                "$ref": "AppManifestError"
              }
            },
            {
              "name": "data",
              "description": "Manifest content.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "parsed",
              "description": "Parsed manifest properties",
              "experimental": true,
              "optional": true,
              "$ref": "AppManifestParsedProperties"
            }
          ]
        },
        {
          "name": "getFrameTree",
          "description": "Returns present frame tree structure.",
          "returns": [
            {
              "name": "frameTree",
              "description": "Present frame tree structure.",
              "$ref": "FrameTree"
            }
          ]
        },
        {
          "name": "getLayoutMetrics",
          "description": "Returns metrics relating to the layouting of the page, such as viewport bounds/scale.",
          "returns": [
            {
              "name": "layoutViewport",
              "description": "Deprecated metrics relating to the layout viewport. Can be in DP or in CSS pixels depending on the `enable-use-zoom-for-dsf` flag. Use `cssLayoutViewport` instead.",
              "deprecated": true,
              "$ref": "LayoutViewport"
            },
            {
              "name": "visualViewport",
              "description": "Deprecated metrics relating to the visual viewport. Can be in DP or in CSS pixels depending on the `enable-use-zoom-for-dsf` flag. Use `cssVisualViewport` instead.",
              "deprecated": true,
              "$ref": "VisualViewport"
            },
            {
              "name": "contentSize",
              "description": "Deprecated size of scrollable area. Can be in DP or in CSS pixels depending on the `enable-use-zoom-for-dsf` flag. Use `cssContentSize` instead.",
              "deprecated": true,
              "$ref": "DOM.Rect"
            },
            {
              "name": "cssLayoutViewport",
              "description": "Metrics relating to the layout viewport in CSS pixels.",
              "$ref": "LayoutViewport"
            },
            {
              "name": "cssVisualViewport",
              "description": "Metrics relating to the visual viewport in CSS pixels.",
              "$ref": "VisualViewport"
            },
            {
              "name": "cssContentSize",
              "description": "Size of scrollable area in CSS pixels.",
              "$ref": "DOM.Rect"
            }
          ]
        },
        {
          "name": "getNavigationHistory",
          "description": "Returns navigation history for the current page.",
          "returns": [
            {
              "name": "currentIndex",
              "description": "Index of the current navigation history entry.",
              "type": "integer"
            },
            {
              "name": "entries",
              "description": "Array of navigation history entries.",
              "type": "array",
              "items": {
                "$ref": "NavigationEntry"
              }
            }
          ]
        },
        {
          "name": "resetNavigationHistory",
          "description": "Resets navigation history for the current page."
        },
        {
          "name": "handleJavaScriptDialog",
          "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
          "parameters": [
            {
              "name": "accept",
              "description": "Whether to accept or dismiss the dialog.",
              "type": "boolean"
            },
            {
              "name": "promptText",
              "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt\ndialog.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "navigate",
          "description": "Navigates current page to the given URL.",
          "parameters": [
            {
              "name": "url",
              "description": "URL to navigate the page to.",
              "type": "string"
            },
            {
              "name": "referrer",
              "description": "Referrer URL.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "transitionType",
              "description": "Intended transition type.",
              "optional": true,
              "$ref": "TransitionType"
            },
            {
              "name": "frameId",
              "description": "Frame id to navigate, if not specified navigates the top frame.",
              "optional": true,
              "$ref": "FrameId"
            },
            {
              "name": "referrerPolicy",
              "description": "Referrer-policy used for the navigation.",
              "experimental": true,
              "optional": true,
              "$ref": "ReferrerPolicy"
            }
          ],
          "returns": [
            {
              "name": "frameId",
              "description": "Frame id that has navigated (or failed to navigate)",
              "$ref": "FrameId"
            },
            {
              "name": "loaderId",
              "description": "Loader identifier.",
              "optional": true,
              "$ref": "Network.LoaderId"
            },
            {
              "name": "errorText",
              "description": "User friendly error message, present if and only if navigation has failed.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "navigateToHistoryEntry",
          "description": "Navigates current page to the given history entry.",
          "parameters": [
            {
              "name": "entryId",
              "description": "Unique id of the entry to navigate to.",
              "type": "integer"
            }
          ]
        },
        {
          "name": "printToPDF",
          "description": "Print page as PDF.",
          "parameters": [
            {
              "name": "landscape",
              "description": "Paper orientation. Defaults to false.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "displayHeaderFooter",
              "description": "Display header and footer. Defaults to false.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "printBackground",
              "description": "Print background graphics. Defaults to false.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "scale",
              "description": "Scale of the webpage rendering. Defaults to 1.",
              "optional": true,
              "type": "number"
            },
            {
              "name": "paperWidth",
              "description": "Paper width in inches. Defaults to 8.5 inches.",
              "optional": true,
              "type": "number"
            },
            {
              "name": "paperHeight",
              "description": "Paper height in inches. Defaults to 11 inches.",
              "optional": true,
              "type": "number"
            },
            {
              "name": "marginTop",
              "description": "Top margin in inches. Defaults to 1cm (~0.4 inches).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "marginBottom",
              "description": "Bottom margin in inches. Defaults to 1cm (~0.4 inches).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "marginLeft",
              "description": "Left margin in inches. Defaults to 1cm (~0.4 inches).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "marginRight",
              "description": "Right margin in inches. Defaults to 1cm (~0.4 inches).",
              "optional": true,
              "type": "number"
            },
            {
              "name": "pageRanges",
              "description": "Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means\nprint all pages.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "ignoreInvalidPageRanges",
              "description": "Whether to silently ignore invalid but successfully parsed page ranges, such as '3-2'.\nDefaults to false.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "headerTemplate",
              "description": "HTML template for the print header. Should be valid HTML markup with following\nclasses used to inject printing values into them:\n- `date`: formatted print date\n- `title`: document title\n- `url`: document location\n- `pageNumber`: current page number\n- `totalPages`: total pages in the document\n\nFor example, `<span class=title></span>` would generate span containing the title.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "footerTemplate",
              "description": "HTML template for the print footer. Should use the same format as the `headerTemplate`.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "preferCSSPageSize",
              "description": "Whether or not to prefer page size as defined by css. Defaults to false,\nin which case the content will be scaled to fit the paper size.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "transferMode",
              "description": "return as stream",
              "experimental": true,
              "optional": true,
              "type": "string",
              "enum": [
                "ReturnAsBase64",
                "ReturnAsStream"
              ]
            }
          ],
          "returns": [
            {
              "name": "data",
              "description": "Base64-encoded pdf data. Empty if |returnAsStream| is specified. (Encoded as a base64 string when passed over JSON)",
              "type": "string"
            },
            {
              "name": "stream",
              "description": "A handle of the stream that holds resulting PDF data.",
              "experimental": true,
              "optional": true,
              "$ref": "IO.StreamHandle"
            }
          ]
        },
        {
          "name": "reload",
          "description": "Reloads given page optionally ignoring the cache.",
          "parameters": [
            {
              "name": "ignoreCache",
              "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "scriptToEvaluateOnLoad",
              "description": "If set, the script will be injected into all frames of the inspected page after reload.\nArgument will be ignored if reloading dataURL origin.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "removeScriptToEvaluateOnNewDocument",
          "description": "Removes given script from the list.",
          "parameters": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier"
            }
          ]
        },
        {
          "name": "setDocumentContent",
          "description": "Sets given markup as the document's HTML.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Frame id to set HTML for.",
              "$ref": "FrameId"
            },
            {
              "name": "html",
              "description": "HTML content to set.",
              "type": "string"
            }
          ]
        },
        {
          "name": "stopLoading",
          "description": "Force the page stop all navigations and pending resource fetches."
        }
      ],
      "events": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "$ref": "Network.MonotonicTime"
            }
          ]
        },
        {
          "name": "fileChooserOpened",
          "description": "Emitted only when `page.interceptFileChooser` is enabled.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Id of the frame containing input node.",
              "experimental": true,
              "$ref": "FrameId"
            },
            {
              "name": "backendNodeId",
              "description": "Input node id.",
              "experimental": true,
              "$ref": "DOM.BackendNodeId"
            },
            {
              "name": "mode",
              "description": "Input mode.",
              "type": "string",
              "enum": [
                "selectSingle",
                "selectMultiple"
              ]
            }
          ]
        },
        {
          "name": "frameAttached",
          "description": "Fired when frame has been attached to its parent.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Id of the frame that has been attached.",
              "$ref": "FrameId"
            },
            {
              "name": "parentFrameId",
              "description": "Parent frame identifier.",
              "$ref": "FrameId"
            },
            {
              "name": "stack",
              "description": "JavaScript stack trace of when frame was attached, only set if frame initiated from script.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            }
          ]
        },
        {
          "name": "frameDetached",
          "description": "Fired when frame has been detached from its parent.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Id of the frame that has been detached.",
              "$ref": "FrameId"
            },
            {
              "name": "reason",
              "experimental": true,
              "type": "string",
              "enum": [
                "remove",
                "swap"
              ]
            }
          ]
        },
        {
          "name": "frameNavigated",
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "parameters": [
            {
              "name": "frame",
              "description": "Frame object.",
              "$ref": "Frame"
            },
            {
              "name": "type",
              "experimental": true,
              "$ref": "NavigationType"
            }
          ]
        },
        {
          "name": "interstitialHidden",
          "description": "Fired when interstitial page was hidden"
        },
        {
          "name": "interstitialShown",
          "description": "Fired when interstitial page was shown"
        },
        {
          "name": "javascriptDialogClosed",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been\nclosed.",
          "parameters": [
            {
              "name": "result",
              "description": "Whether dialog was confirmed.",
              "type": "boolean"
            },
            {
              "name": "userInput",
              "description": "User input in case of prompt.",
              "type": "string"
            }
          ]
        },
        {
          "name": "javascriptDialogOpening",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to\nopen.",
          "parameters": [
            {
              "name": "url",
              "description": "Frame url.",
              "type": "string"
            },
            {
              "name": "message",
              "description": "Message that will be displayed by the dialog.",
              "type": "string"
            },
            {
              "name": "type",
              "description": "Dialog type.",
              "$ref": "DialogType"
            },
            {
              "name": "hasBrowserHandler",
              "description": "True iff browser is capable showing or acting on the given dialog. When browser has no\ndialog handler for given target, calling alert while Page domain is engaged will stall\nthe page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.",
              "type": "boolean"
            },
            {
              "name": "defaultPrompt",
              "description": "Default dialog prompt.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "lifecycleEvent",
          "description": "Fired for top level page lifecycle events such as navigation, load, paint, etc.",
          "parameters": [
            {
              "name": "frameId",
              "description": "Id of the frame.",
              "$ref": "FrameId"
            },
            {
              "name": "loaderId",
              "description": "Loader identifier. Empty string if the request is fetched from worker.",
              "$ref": "Network.LoaderId"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "timestamp",
              "$ref": "Network.MonotonicTime"
            }
          ]
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "$ref": "Network.MonotonicTime"
            }
          ]
        },
        {
          "name": "windowOpen",
          "description": "Fired when a new window is going to be opened, via window.open(), link click, form submission,\netc.",
          "parameters": [
            {
              "name": "url",
              "description": "The URL for the new window.",
              "type": "string"
            },
            {
              "name": "windowName",
              "description": "Window name.",
              "type": "string"
            },
            {
              "name": "windowFeatures",
              "description": "An array of enabled window features.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "userGesture",
              "description": "Whether or not it was triggered by user gesture.",
              "type": "boolean"
            }
          ]
        }
      ]
    },
    {
      "domain": "Performance",
      "types": [
        {
          "id": "Metric",
          "description": "Run-time execution metric.",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Metric name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "Metric value.",
              "type": "number"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "disable",
          "description": "Disable collecting and reporting metrics."
        },
        {
          "name": "enable",
          "description": "Enable collecting and reporting metrics.",
          "parameters": [
            {
              "name": "timeDomain",
              "description": "Time domain to use for collecting and reporting duration metrics.",
              "optional": true,
              "type": "string",
              "enum": [
                "timeTicks",
                "threadTicks"
              ]
            }
          ]
        },
        {
          "name": "getMetrics",
          "description": "Retrieve current values of run-time metrics.",
          "returns": [
            {
              "name": "metrics",
              "description": "Current values for run-time metrics.",
              "type": "array",
              "items": {
                "$ref": "Metric"
              }
            }
          ]
        }
      ],
      "events": [
        {
          "name": "metrics",
          "description": "Current values of the metrics.",
          "parameters": [
            {
              "name": "metrics",
              "description": "Current values of the metrics.",
              "type": "array",
              "items": {
                "$ref": "Metric"
              }
            },
            {
              "name": "title",
              "description": "Timestamp title.",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Security",
      "description": "Security",
      "types": [
        {
          "id": "CertificateId",
          "description": "An internal certificate ID value.",
          "type": "integer"
        },
        {
          "id": "MixedContentType",
          "description": "A description of mixed content (HTTP resources on HTTPS pages), as defined by\nhttps://www.w3.org/TR/mixed-content/#categories",
          "type": "string",
          "enum": [
            "blockable",
            "optionally-blockable",
            "none"
          ]
        },
        {
          "id": "SecurityState",
          "description": "The security level of a page or resource.",
          "type": "string",
          "enum": [
            "unknown",
            "neutral",
            "insecure",
            "secure",
            "info",
            "insecure-broken"
          ]
        },
        {
          "id": "SecurityStateExplanation",
          "description": "An explanation of an factor contributing to the security state.",
          "type": "object",
          "properties": [
            {
              "name": "securityState",
              "description": "Security state representing the severity of the factor being explained.",
              "$ref": "SecurityState"
            },
            {
              "name": "title",
              "description": "Title describing the type of factor.",
              "type": "string"
            },
            {
              "name": "summary",
              "description": "Short phrase describing the type of factor.",
              "type": "string"
            },
            {
              "name": "description",
              "description": "Full text explanation of the factor.",
              "type": "string"
            },
            {
              "name": "mixedContentType",
              "description": "The type of mixed content described by the explanation.",
              "$ref": "MixedContentType"
            },
            {
              "name": "certificate",
              "description": "Page certificate.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "recommendations",
              "description": "Recommendations to fix any issues.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        {
          "id": "CertificateErrorAction",
          "description": "The action to take when a certificate error occurs. continue will continue processing the\nrequest and cancel will cancel the request.",
          "type": "string",
          "enum": [
            "continue",
            "cancel"
          ]
        }
      ],
      "commands": [
        {
          "name": "disable",
          "description": "Disables tracking security state changes."
        },
        {
          "name": "enable",
          "description": "Enables tracking security state changes."
        }
      ],
      "events": [
        {
          "name": "securityStateChanged",
          "description": "The security state of the page changed.",
          "parameters": [
            {
              "name": "securityState",
              "description": "Security state.",
              "$ref": "SecurityState"
            },
            {
              "name": "schemeIsCryptographic",
              "description": "True if the page was loaded over cryptographic transport such as HTTPS.",
              "deprecated": true,
              "type": "boolean"
            },
            {
              "name": "explanations",
              "description": "List of explanations for the security state. If the overall security state is `insecure` or\n`warning`, at least one corresponding explanation should be included.",
              "type": "array",
              "items": {
                "$ref": "SecurityStateExplanation"
              }
            },
            {
              "name": "insecureContentStatus",
              "description": "Information about insecure content on the page.",
              "deprecated": true,
              "$ref": "InsecureContentStatus"
            },
            {
              "name": "summary",
              "description": "Overrides user-visible description of the state.",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Target",
      "description": "Supports additional targets discovery and allows to attach to them.",
      "types": [
        {
          "id": "TargetID",
          "type": "string"
        },
        {
          "id": "SessionID",
          "description": "Unique identifier of attached debugging session.",
          "type": "string"
        },
        {
          "id": "TargetInfo",
          "type": "object",
          "properties": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            },
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "title",
              "type": "string"
            },
            {
              "name": "url",
              "type": "string"
            },
            {
              "name": "attached",
              "description": "Whether the target has an attached client.",
              "type": "boolean"
            },
            {
              "name": "openerId",
              "description": "Opener target Id",
              "optional": true,
              "$ref": "TargetID"
            },
            {
              "name": "canAccessOpener",
              "description": "Whether the target has access to the originating window.",
              "experimental": true,
              "type": "boolean"
            },
            {
              "name": "openerFrameId",
              "description": "Frame id of originating window (is only set if target has an opener).",
              "experimental": true,
              "optional": true,
              "$ref": "Page.FrameId"
            },
            {
              "name": "browserContextId",
              "experimental": true,
              "optional": true,
              "$ref": "Browser.BrowserContextID"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "activateTarget",
          "description": "Activates (focuses) the target.",
          "parameters": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            }
          ]
        },
        {
          "name": "attachToTarget",
          "description": "Attaches to the target with given id.",
          "parameters": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            },
            {
              "name": "flatten",
              "description": "Enables \"flat\" access to the session via specifying sessionId attribute in the commands.\nWe plan to make this the default, deprecate non-flattened mode,\nand eventually retire it. See crbug.com/991325.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "sessionId",
              "description": "Id assigned to the session.",
              "$ref": "SessionID"
            }
          ]
        },
        {
          "name": "closeTarget",
          "description": "Closes the target. If the target is a page that gets closed too.",
          "parameters": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            }
          ],
          "returns": [
            {
              "name": "success",
              "description": "Always set to true. If an error occurs, the response indicates protocol error.",
              "deprecated": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "createTarget",
          "description": "Creates a new page.",
          "parameters": [
            {
              "name": "url",
              "description": "The initial URL the page will be navigated to. An empty string indicates about:blank.",
              "type": "string"
            },
            {
              "name": "width",
              "description": "Frame width in DIP (headless chrome only).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "height",
              "description": "Frame height in DIP (headless chrome only).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "browserContextId",
              "description": "The browser context to create the page in.",
              "optional": true,
              "$ref": "Browser.BrowserContextID"
            },
            {
              "name": "enableBeginFrameControl",
              "description": "Whether BeginFrames for this target will be controlled via DevTools (headless chrome only,\nnot supported on MacOS yet, false by default).",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "newWindow",
              "description": "Whether to create a new Window or Tab (chrome-only, false by default).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "background",
              "description": "Whether to create the target in background or foreground (chrome-only,\nfalse by default).",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "targetId",
              "description": "The id of the page opened.",
              "$ref": "TargetID"
            }
          ]
        },
        {
          "name": "detachFromTarget",
          "description": "Detaches session with given id.",
          "parameters": [
            {
              "name": "sessionId",
              "description": "Session to detach.",
              "optional": true,
              "$ref": "SessionID"
            },
            {
              "name": "targetId",
              "description": "Deprecated.",
              "deprecated": true,
              "optional": true,
              "$ref": "TargetID"
            }
          ]
        },
        {
          "name": "getTargets",
          "description": "Retrieves a list of available targets.",
          "returns": [
            {
              "name": "targetInfos",
              "description": "The list of targets.",
              "type": "array",
              "items": {
                "$ref": "TargetInfo"
              }
            }
          ]
        },
        {
          "name": "setDiscoverTargets",
          "description": "Controls whether to discover available targets and notify via\n`targetCreated/targetInfoChanged/targetDestroyed` events.",
          "parameters": [
            {
              "name": "discover",
              "description": "Whether to discover available targets.",
              "type": "boolean"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "receivedMessageFromTarget",
          "description": "Notifies about a new protocol message received from the session (as reported in\n`attachedToTarget` event).",
          "parameters": [
            {
              "name": "sessionId",
              "description": "Identifier of a session which sends a message.",
              "$ref": "SessionID"
            },
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "targetId",
              "description": "Deprecated.",
              "deprecated": true,
              "optional": true,
              "$ref": "TargetID"
            }
          ]
        },
        {
          "name": "targetCreated",
          "description": "Issued when a possible inspection target is created.",
          "parameters": [
            {
              "name": "targetInfo",
              "$ref": "TargetInfo"
            }
          ]
        },
        {
          "name": "targetDestroyed",
          "description": "Issued when a target is destroyed.",
          "parameters": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            }
          ]
        },
        {
          "name": "targetCrashed",
          "description": "Issued when a target has crashed.",
          "parameters": [
            {
              "name": "targetId",
              "$ref": "TargetID"
            },
            {
              "name": "status",
              "description": "Termination status type.",
              "type": "string"
            },
            {
              "name": "errorCode",
              "description": "Termination error code.",
              "type": "integer"
            }
          ]
        },
        {
          "name": "targetInfoChanged",
          "description": "Issued when some information about a target has changed. This only happens between\n`targetCreated` and `targetDestroyed`.",
          "parameters": [
            {
              "name": "targetInfo",
              "$ref": "TargetInfo"
            }
          ]
        }
      ]
    },
    {
      "domain": "Fetch",
      "description": "A domain for letting clients substitute browser's network layer with client code.",
      "dependencies": [
        "Network",
        "IO",
        "Page"
      ],
      "types": [
        {
          "id": "RequestId",
          "description": "Unique request identifier.",
          "type": "string"
        },
        {
          "id": "RequestStage",
          "description": "Stages of the request to handle. Request will intercept before the request is\nsent. Response will intercept after the response is received (but before response\nbody is received).",
          "type": "string",
          "enum": [
            "Request",
            "Response"
          ]
        },
        {
          "id": "RequestPattern",
          "type": "object",
          "properties": [
            {
              "name": "urlPattern",
              "description": "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are allowed. Escape character is\nbackslash. Omitting is equivalent to `\"*\"`.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "resourceType",
              "description": "If set, only requests for matching resource types will be intercepted.",
              "optional": true,
              "$ref": "Network.ResourceType"
            },
            {
              "name": "requestStage",
              "description": "Stage at which to begin intercepting requests. Default is Request.",
              "optional": true,
              "$ref": "RequestStage"
            }
          ]
        },
        {
          "id": "HeaderEntry",
          "description": "Response HTTP header entry",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        },
        {
          "id": "AuthChallenge",
          "description": "Authorization challenge for HTTP status code 401 or 407.",
          "type": "object",
          "properties": [
            {
              "name": "source",
              "description": "Source of the authentication challenge.",
              "optional": true,
              "type": "string",
              "enum": [
                "Server",
                "Proxy"
              ]
            },
            {
              "name": "origin",
              "description": "Origin of the challenger.",
              "type": "string"
            },
            {
              "name": "scheme",
              "description": "The authentication scheme used, such as basic or digest",
              "type": "string"
            },
            {
              "name": "realm",
              "description": "The realm of the challenge. May be empty.",
              "type": "string"
            }
          ]
        },
        {
          "id": "AuthChallengeResponse",
          "description": "Response to an AuthChallenge.",
          "type": "object",
          "properties": [
            {
              "name": "response",
              "description": "The decision on what to do in response to the authorization challenge.  Default means\ndeferring to the default behavior of the net stack, which will likely either the Cancel\nauthentication or display a popup dialog box.",
              "type": "string",
              "enum": [
                "Default",
                "CancelAuth",
                "ProvideCredentials"
              ]
            },
            {
              "name": "username",
              "description": "The username to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "password",
              "description": "The password to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "disable",
          "description": "Disables the fetch domain."
        },
        {
          "name": "enable",
          "description": "Enables issuing of requestPaused events. A request will be paused until client\ncalls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.",
          "parameters": [
            {
              "name": "patterns",
              "description": "If specified, only requests matching any of these patterns will produce\nfetchRequested event and will be paused until clients response. If not set,\nall requests will be affected.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "RequestPattern"
              }
            },
            {
              "name": "handleAuthRequests",
              "description": "If true, authRequired events will be issued and requests will be paused\nexpecting a call to continueWithAuth.",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "failRequest",
          "description": "Causes the request to fail with specified reason.",
          "parameters": [
            {
              "name": "requestId",
              "description": "An id the client received in requestPaused event.",
              "$ref": "RequestId"
            },
            {
              "name": "errorReason",
              "description": "Causes the request to fail with the given reason.",
              "$ref": "Network.ErrorReason"
            }
          ]
        },
        {
          "name": "fulfillRequest",
          "description": "Provides response to the request.",
          "parameters": [
            {
              "name": "requestId",
              "description": "An id the client received in requestPaused event.",
              "$ref": "RequestId"
            },
            {
              "name": "responseCode",
              "description": "An HTTP response code.",
              "type": "integer"
            },
            {
              "name": "responseHeaders",
              "description": "Response headers.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "HeaderEntry"
              }
            },
            {
              "name": "binaryResponseHeaders",
              "description": "Alternative way of specifying response headers as a \\0-separated\nseries of name: value pairs. Prefer the above method unless you\nneed to represent some non-UTF8 values that can't be transmitted\nover the protocol as text. (Encoded as a base64 string when passed over JSON)",
              "optional": true,
              "type": "string"
            },
            {
              "name": "body",
              "description": "A response body. (Encoded as a base64 string when passed over JSON)",
              "optional": true,
              "type": "string"
            },
            {
              "name": "responsePhrase",
              "description": "A textual representation of responseCode.\nIf absent, a standard phrase matching responseCode is used.",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "continueRequest",
          "description": "Continues the request, optionally modifying some of its parameters.",
          "parameters": [
            {
              "name": "requestId",
              "description": "An id the client received in requestPaused event.",
              "$ref": "RequestId"
            },
            {
              "name": "url",
              "description": "If set, the request url will be modified in a way that's not observable by page.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "method",
              "description": "If set, the request method is overridden.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "postData",
              "description": "If set, overrides the post data in the request. (Encoded as a base64 string when passed over JSON)",
              "optional": true,
              "type": "string"
            },
            {
              "name": "headers",
              "description": "If set, overrides the request headers.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "HeaderEntry"
              }
            }
          ]
        },
        {
          "name": "continueWithAuth",
          "description": "Continues a request supplying authChallengeResponse following authRequired event.",
          "parameters": [
            {
              "name": "requestId",
              "description": "An id the client received in authRequired event.",
              "$ref": "RequestId"
            },
            {
              "name": "authChallengeResponse",
              "description": "Response to  with an authChallenge.",
              "$ref": "AuthChallengeResponse"
            }
          ]
        },
        {
          "name": "getResponseBody",
          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Identifier for the intercepted request to get body for.",
              "$ref": "RequestId"
            }
          ],
          "returns": [
            {
              "name": "body",
              "description": "Response body.",
              "type": "string"
            },
            {
              "name": "base64Encoded",
              "description": "True, if content was sent as base64.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "takeResponseBodyAsStream",
          "description": "Returns a handle to the stream representing the response body.\nThe request must be paused in the HeadersReceived stage.\nNote that after this command the request can't be continued\nas is -- client either needs to cancel it or to provide the\nresponse body.\nThe stream only supports sequential read, IO.read will fail if the position\nis specified.\nThis method is mutually exclusive with getResponseBody.\nCalling other methods that affect the request or disabling fetch\ndomain before body is received results in an undefined behavior.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId"
            }
          ],
          "returns": [
            {
              "name": "stream",
              "$ref": "IO.StreamHandle"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "requestPaused",
          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Each request the page makes will have a unique id.",
              "$ref": "RequestId"
            },
            {
              "name": "request",
              "description": "The details of the request.",
              "$ref": "Network.Request"
            },
            {
              "name": "frameId",
              "description": "The id of the frame that initiated the request.",
              "$ref": "Page.FrameId"
            },
            {
              "name": "resourceType",
              "description": "How the requested resource will be used.",
              "$ref": "Network.ResourceType"
            },
            {
              "name": "responseErrorReason",
              "description": "Response error if intercepted at response stage.",
              "optional": true,
              "$ref": "Network.ErrorReason"
            },
            {
              "name": "responseStatusCode",
              "description": "Response code if intercepted at response stage.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "responseHeaders",
              "description": "Response headers if intercepted at the response stage.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "HeaderEntry"
              }
            },
            {
              "name": "networkId",
              "description": "If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,\nthen this networkId will be the same as the requestId present in the requestWillBeSent event.",
              "optional": true,
              "$ref": "RequestId"
            }
          ]
        },
        {
          "name": "authRequired",
          "description": "Issued when the domain is enabled with handleAuthRequests set to true.\nThe request is paused until client responds with continueWithAuth.",
          "parameters": [
            {
              "name": "requestId",
              "description": "Each request the page makes will have a unique id.",
              "$ref": "RequestId"
            },
            {
              "name": "request",
              "description": "The details of the request.",
              "$ref": "Network.Request"
            },
            {
              "name": "frameId",
              "description": "The id of the frame that initiated the request.",
              "$ref": "Page.FrameId"
            },
            {
              "name": "resourceType",
              "description": "How the requested resource will be used.",
              "$ref": "Network.ResourceType"
            },
            {
              "name": "authChallenge",
              "description": "Details of the Authorization Challenge encountered.\nIf this is set, client should respond with continueRequest that\ncontains AuthChallengeResponse.",
              "$ref": "AuthChallenge"
            }
          ]
        }
      ]
    },
    {
      "domain": "Debugger",
      "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing\nbreakpoints, stepping through execution, exploring stack traces, etc.",
      "dependencies": [
        "Runtime"
      ],
      "types": [
        {
          "id": "BreakpointId",
          "description": "Breakpoint identifier.",
          "type": "string"
        },
        {
          "id": "CallFrameId",
          "description": "Call frame identifier.",
          "type": "string"
        },
        {
          "id": "Location",
          "description": "Location in the source code.",
          "type": "object",
          "properties": [
            {
              "name": "scriptId",
              "description": "Script identifier as reported in the `Debugger.scriptParsed`.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "lineNumber",
              "description": "Line number in the script (0-based).",
              "type": "integer"
            },
            {
              "name": "columnNumber",
              "description": "Column number in the script (0-based).",
              "optional": true,
              "type": "integer"
            }
          ]
        },
        {
          "id": "CallFrame",
          "description": "JavaScript call frame. Array of call frames form the call stack.",
          "type": "object",
          "properties": [
            {
              "name": "callFrameId",
              "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused.",
              "$ref": "CallFrameId"
            },
            {
              "name": "functionName",
              "description": "Name of the JavaScript function called on this call frame.",
              "type": "string"
            },
            {
              "name": "functionLocation",
              "description": "Location in the source code.",
              "optional": true,
              "$ref": "Location"
            },
            {
              "name": "location",
              "description": "Location in the source code.",
              "$ref": "Location"
            },
            {
              "name": "url",
              "description": "JavaScript script name or url.",
              "type": "string"
            },
            {
              "name": "scopeChain",
              "description": "Scope chain for this call frame.",
              "type": "array",
              "items": {
                "$ref": "Scope"
              }
            },
            {
              "name": "this",
              "description": "`this` object for this call frame.",
              "$ref": "Runtime.RemoteObject"
            },
            {
              "name": "returnValue",
              "description": "The value being returned, if the function is at return point.",
              "optional": true,
              "$ref": "Runtime.RemoteObject"
            }
          ]
        },
        {
          "id": "Scope",
          "description": "Scope description.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Scope type.",
              "type": "string",
              "enum": [
                "global",
                "local",
                "with",
                "closure",
                "catch",
                "block",
                "script",
                "eval",
                "module",
                "wasm-expression-stack"
              ]
            },
            {
              "name": "object",
              "description": "Object representing the scope. For `global` and `with` scopes it represents the actual\nobject; for the rest of the scopes, it is artificial transient object enumerating scope\nvariables as its properties.",
              "$ref": "Runtime.RemoteObject"
            },
            {
              "name": "name",
              "optional": true,
              "type": "string"
            },
            {
              "name": "startLocation",
              "description": "Location in the source code where scope starts",
              "optional": true,
              "$ref": "Location"
            },
            {
              "name": "endLocation",
              "description": "Location in the source code where scope ends",
              "optional": true,
              "$ref": "Location"
            }
          ]
        },
        {
          "id": "SearchMatch",
          "description": "Search match for resource.",
          "type": "object",
          "properties": [
            {
              "name": "lineNumber",
              "description": "Line number in resource content.",
              "type": "number"
            },
            {
              "name": "lineContent",
              "description": "Line with match content.",
              "type": "string"
            }
          ]
        },
        {
          "id": "BreakLocation",
          "type": "object",
          "properties": [
            {
              "name": "scriptId",
              "description": "Script identifier as reported in the `Debugger.scriptParsed`.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "lineNumber",
              "description": "Line number in the script (0-based).",
              "type": "integer"
            },
            {
              "name": "columnNumber",
              "description": "Column number in the script (0-based).",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "type",
              "optional": true,
              "type": "string",
              "enum": [
                "debuggerStatement",
                "call",
                "return"
              ]
            }
          ]
        },
        {
          "id": "ScriptLanguage",
          "description": "Enum of possible script languages.",
          "type": "string",
          "enum": [
            "JavaScript",
            "WebAssembly"
          ]
        },
        {
          "id": "DebugSymbols",
          "description": "Debug symbols available for a wasm script.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Type of the debug symbols.",
              "type": "string",
              "enum": [
                "None",
                "SourceMap",
                "EmbeddedDWARF",
                "ExternalDWARF"
              ]
            },
            {
              "name": "externalURL",
              "description": "URL of the external symbol source.",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "continueToLocation",
          "description": "Continues execution until specific location is reached.",
          "parameters": [
            {
              "name": "location",
              "description": "Location to continue to.",
              "$ref": "Location"
            },
            {
              "name": "targetCallFrames",
              "optional": true,
              "type": "string",
              "enum": [
                "any",
                "current"
              ]
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables debugger for given page."
        },
        {
          "name": "enable",
          "description": "Enables debugger for the given page. Clients should not assume that the debugging has been\nenabled until the result for this command is received.",
          "parameters": [
            {
              "name": "maxScriptsCacheSize",
              "description": "The maximum size in bytes of collected scripts (not referenced by other heap objects)\nthe debugger can hold. Puts no limit if paramter is omitted.",
              "experimental": true,
              "optional": true,
              "type": "number"
            }
          ],
          "returns": [
            {
              "name": "debuggerId",
              "description": "Unique identifier of the debugger.",
              "experimental": true,
              "$ref": "Runtime.UniqueDebuggerId"
            }
          ]
        },
        {
          "name": "evaluateOnCallFrame",
          "description": "Evaluates expression on a given call frame.",
          "parameters": [
            {
              "name": "callFrameId",
              "description": "Call frame identifier to evaluate on.",
              "$ref": "CallFrameId"
            },
            {
              "name": "expression",
              "description": "Expression to evaluate.",
              "type": "string"
            },
            {
              "name": "objectGroup",
              "description": "String object group name to put result into (allows rapid releasing resulting object handles\nusing `releaseObjectGroup`).",
              "optional": true,
              "type": "string"
            },
            {
              "name": "includeCommandLineAPI",
              "description": "Specifies whether command line API should be available to the evaluated expression, defaults\nto false.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "throwOnSideEffect",
              "description": "Whether to throw an exception if side effect cannot be ruled out during evaluation.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "timeout",
              "description": "Terminate execution after timing out (number of milliseconds).",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.TimeDelta"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Object wrapper for the evaluation result.",
              "$ref": "Runtime.RemoteObject"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "Runtime.ExceptionDetails"
            }
          ]
        },
        {
          "name": "getPossibleBreakpoints",
          "description": "Returns possible locations for breakpoint. scriptId in start and end range locations should be\nthe same.",
          "parameters": [
            {
              "name": "start",
              "description": "Start of range to search possible breakpoint locations in.",
              "$ref": "Location"
            },
            {
              "name": "end",
              "description": "End of range to search possible breakpoint locations in (excluding). When not specified, end\nof scripts is used as end of range.",
              "optional": true,
              "$ref": "Location"
            },
            {
              "name": "restrictToFunction",
              "description": "Only consider locations which are in the same (non-nested) function as start.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "locations",
              "description": "List of the possible breakpoint locations.",
              "type": "array",
              "items": {
                "$ref": "BreakLocation"
              }
            }
          ]
        },
        {
          "name": "getScriptSource",
          "description": "Returns source for the script with given id.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Id of the script to get source for.",
              "$ref": "Runtime.ScriptId"
            }
          ],
          "returns": [
            {
              "name": "scriptSource",
              "description": "Script source (empty in case of Wasm bytecode).",
              "type": "string"
            },
            {
              "name": "bytecode",
              "description": "Wasm bytecode. (Encoded as a base64 string when passed over JSON)",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "pause",
          "description": "Stops on the next JavaScript statement."
        },
        {
          "name": "removeBreakpoint",
          "description": "Removes JavaScript breakpoint.",
          "parameters": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId"
            }
          ]
        },
        {
          "name": "restartFrame",
          "description": "Restarts particular call frame from the beginning.",
          "parameters": [
            {
              "name": "callFrameId",
              "description": "Call frame identifier to evaluate on.",
              "$ref": "CallFrameId"
            }
          ],
          "returns": [
            {
              "name": "callFrames",
              "description": "New stack trace.",
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              }
            },
            {
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "asyncStackTraceId",
              "description": "Async stack trace, if any.",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.StackTraceId"
            }
          ]
        },
        {
          "name": "resume",
          "description": "Resumes JavaScript execution.",
          "parameters": [
            {
              "name": "terminateOnResume",
              "description": "Set to true to terminate execution upon resuming execution. In contrast\nto Runtime.terminateExecution, this will allows to execute further\nJavaScript (i.e. via evaluation) until execution of the paused code\nis actually resumed, at which point termination is triggered.\nIf execution is currently not paused, this parameter has no effect.",
              "optional": true,
              "type": "boolean"
            }
          ]
        },
        {
          "name": "searchInContent",
          "description": "Searches for given string in script content.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Id of the script to search in.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "query",
              "description": "String to search for.",
              "type": "string"
            },
            {
              "name": "caseSensitive",
              "description": "If true, search is case sensitive.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isRegex",
              "description": "If true, treats string parameter as regex.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "List of search matches.",
              "type": "array",
              "items": {
                "$ref": "SearchMatch"
              }
            }
          ]
        },
        {
          "name": "setAsyncCallStackDepth",
          "description": "Enables or disables async call stacks tracking.",
          "parameters": [
            {
              "name": "maxDepth",
              "description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default).",
              "type": "integer"
            }
          ]
        },
        {
          "name": "setBreakpoint",
          "description": "Sets JavaScript breakpoint at a given location.",
          "parameters": [
            {
              "name": "location",
              "description": "Location to set breakpoint in.",
              "$ref": "Location"
            },
            {
              "name": "condition",
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true.",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference.",
              "$ref": "BreakpointId"
            },
            {
              "name": "actualLocation",
              "description": "Location this breakpoint resolved into.",
              "$ref": "Location"
            }
          ]
        },
        {
          "name": "setInstrumentationBreakpoint",
          "description": "Sets instrumentation breakpoint.",
          "parameters": [
            {
              "name": "instrumentation",
              "description": "Instrumentation name.",
              "type": "string",
              "enum": [
                "beforeScriptExecution",
                "beforeScriptWithSourceMapExecution"
              ]
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference.",
              "$ref": "BreakpointId"
            }
          ]
        },
        {
          "name": "setBreakpointByUrl",
          "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this\ncommand is issued, all existing parsed scripts will have breakpoints resolved and returned in\n`locations` property. Further matching script parsing will result in subsequent\n`breakpointResolved` events issued. This logical breakpoint will survive page reloads.",
          "parameters": [
            {
              "name": "lineNumber",
              "description": "Line number to set breakpoint at.",
              "type": "integer"
            },
            {
              "name": "url",
              "description": "URL of the resources to set breakpoint on.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "urlRegex",
              "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or\n`urlRegex` must be specified.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "scriptHash",
              "description": "Script hash of the resources to set breakpoint on.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "columnNumber",
              "description": "Offset in the line to set breakpoint at.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "condition",
              "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the\nbreakpoint if this expression evaluates to true.",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "description": "Id of the created breakpoint for further reference.",
              "$ref": "BreakpointId"
            },
            {
              "name": "locations",
              "description": "List of the locations this breakpoint resolved into upon addition.",
              "type": "array",
              "items": {
                "$ref": "Location"
              }
            }
          ]
        },
        {
          "name": "setBreakpointsActive",
          "description": "Activates / deactivates all breakpoints on the page.",
          "parameters": [
            {
              "name": "active",
              "description": "New value for breakpoints active state.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "setPauseOnExceptions",
          "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or\nno exceptions. Initial pause on exceptions state is `none`.",
          "parameters": [
            {
              "name": "state",
              "description": "Pause on exceptions mode.",
              "type": "string",
              "enum": [
                "none",
                "uncaught",
                "all"
              ]
            }
          ]
        },
        {
          "name": "setScriptSource",
          "description": "Edits JavaScript source live.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Id of the script to edit.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "scriptSource",
              "description": "New content of the script.",
              "type": "string"
            },
            {
              "name": "dryRun",
              "description": "If true the change will not actually be applied. Dry run may be used to get result\ndescription without actually modifying the code.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "callFrames",
              "description": "New stack trace in case editing has happened while VM was stopped.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              }
            },
            {
              "name": "stackChanged",
              "description": "Whether current call stack  was modified after applying the changes.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "asyncStackTraceId",
              "description": "Async stack trace, if any.",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.StackTraceId"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details if any.",
              "optional": true,
              "$ref": "Runtime.ExceptionDetails"
            }
          ]
        },
        {
          "name": "setSkipAllPauses",
          "description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).",
          "parameters": [
            {
              "name": "skip",
              "description": "New value for skip pauses state.",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "setVariableValue",
          "description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be\nmutated manually.",
          "parameters": [
            {
              "name": "scopeNumber",
              "description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'\nscope types are allowed. Other scopes could be manipulated manually.",
              "type": "integer"
            },
            {
              "name": "variableName",
              "description": "Variable name.",
              "type": "string"
            },
            {
              "name": "newValue",
              "description": "New variable value.",
              "$ref": "Runtime.CallArgument"
            },
            {
              "name": "callFrameId",
              "description": "Id of callframe that holds variable.",
              "$ref": "CallFrameId"
            }
          ]
        },
        {
          "name": "stepInto",
          "description": "Steps into the function call.",
          "parameters": [
            {
              "name": "breakOnAsyncCall",
              "description": "Debugger will pause on the execution of the first async task which was scheduled\nbefore next pause.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "skipList",
              "description": "The skipList specifies location ranges that should be skipped on step into.",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "LocationRange"
              }
            }
          ]
        },
        {
          "name": "stepOut",
          "description": "Steps out of the function call."
        },
        {
          "name": "stepOver",
          "description": "Steps over the statement.",
          "parameters": [
            {
              "name": "skipList",
              "description": "The skipList specifies location ranges that should be skipped on step over.",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "LocationRange"
              }
            }
          ]
        }
      ],
      "events": [
        {
          "name": "breakpointResolved",
          "description": "Fired when breakpoint is resolved to an actual script and location.",
          "parameters": [
            {
              "name": "breakpointId",
              "description": "Breakpoint unique identifier.",
              "$ref": "BreakpointId"
            },
            {
              "name": "location",
              "description": "Actual breakpoint location.",
              "$ref": "Location"
            }
          ]
        },
        {
          "name": "paused",
          "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.",
          "parameters": [
            {
              "name": "callFrames",
              "description": "Call stack the virtual machine stopped on.",
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              }
            },
            {
              "name": "reason",
              "description": "Pause reason.",
              "type": "string",
              "enum": [
                "ambiguous",
                "assert",
                "CSPViolation",
                "debugCommand",
                "DOM",
                "EventListener",
                "exception",
                "instrumentation",
                "OOM",
                "other",
                "promiseRejection",
                "XHR"
              ]
            },
            {
              "name": "data",
              "description": "Object containing break-specific auxiliary properties.",
              "optional": true,
              "type": "object"
            },
            {
              "name": "hitBreakpoints",
              "description": "Hit breakpoints IDs",
              "optional": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "asyncStackTrace",
              "description": "Async stack trace, if any.",
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "asyncStackTraceId",
              "description": "Async stack trace, if any.",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.StackTraceId"
            },
            {
              "name": "asyncCallStackTraceId",
              "description": "Never present, will be removed.",
              "experimental": true,
              "deprecated": true,
              "optional": true,
              "$ref": "Runtime.StackTraceId"
            }
          ]
        },
        {
          "name": "resumed",
          "description": "Fired when the virtual machine resumed execution."
        },
        {
          "name": "scriptFailedToParse",
          "description": "Fired when virtual machine fails to parse the script.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Identifier of the script parsed.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "url",
              "description": "URL or name of the script parsed (if any).",
              "type": "string"
            },
            {
              "name": "startLine",
              "description": "Line offset of the script within the resource with given URL (for script tags).",
              "type": "integer"
            },
            {
              "name": "startColumn",
              "description": "Column offset of the script within the resource with given URL.",
              "type": "integer"
            },
            {
              "name": "endLine",
              "description": "Last line of the script.",
              "type": "integer"
            },
            {
              "name": "endColumn",
              "description": "Length of the last line of the script.",
              "type": "integer"
            },
            {
              "name": "executionContextId",
              "description": "Specifies script creation context.",
              "$ref": "Runtime.ExecutionContextId"
            },
            {
              "name": "hash",
              "description": "Content hash of the script.",
              "type": "string"
            },
            {
              "name": "executionContextAuxData",
              "description": "Embedder-specific auxiliary data.",
              "optional": true,
              "type": "object"
            },
            {
              "name": "sourceMapURL",
              "description": "URL of source map associated with script (if any).",
              "optional": true,
              "type": "string"
            },
            {
              "name": "hasSourceURL",
              "description": "True, if this script has sourceURL.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isModule",
              "description": "True, if this script is ES6 module.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "length",
              "description": "This script length.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "stackTrace",
              "description": "JavaScript top stack frame of where the script parsed event was triggered if available.",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "codeOffset",
              "description": "If the scriptLanguage is WebAssembly, the code section offset in the module.",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "scriptLanguage",
              "description": "The language of the script.",
              "experimental": true,
              "optional": true,
              "$ref": "Debugger.ScriptLanguage"
            },
            {
              "name": "embedderName",
              "description": "The name the embedder supplied for this script.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "scriptParsed",
          "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected\nscripts upon enabling debugger.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Identifier of the script parsed.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "url",
              "description": "URL or name of the script parsed (if any).",
              "type": "string"
            },
            {
              "name": "startLine",
              "description": "Line offset of the script within the resource with given URL (for script tags).",
              "type": "integer"
            },
            {
              "name": "startColumn",
              "description": "Column offset of the script within the resource with given URL.",
              "type": "integer"
            },
            {
              "name": "endLine",
              "description": "Last line of the script.",
              "type": "integer"
            },
            {
              "name": "endColumn",
              "description": "Length of the last line of the script.",
              "type": "integer"
            },
            {
              "name": "executionContextId",
              "description": "Specifies script creation context.",
              "$ref": "Runtime.ExecutionContextId"
            },
            {
              "name": "hash",
              "description": "Content hash of the script.",
              "type": "string"
            },
            {
              "name": "executionContextAuxData",
              "description": "Embedder-specific auxiliary data.",
              "optional": true,
              "type": "object"
            },
            {
              "name": "isLiveEdit",
              "description": "True, if this script is generated as a result of the live edit operation.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "sourceMapURL",
              "description": "URL of source map associated with script (if any).",
              "optional": true,
              "type": "string"
            },
            {
              "name": "hasSourceURL",
              "description": "True, if this script has sourceURL.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isModule",
              "description": "True, if this script is ES6 module.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "length",
              "description": "This script length.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "stackTrace",
              "description": "JavaScript top stack frame of where the script parsed event was triggered if available.",
              "experimental": true,
              "optional": true,
              "$ref": "Runtime.StackTrace"
            },
            {
              "name": "codeOffset",
              "description": "If the scriptLanguage is WebAssembly, the code section offset in the module.",
              "experimental": true,
              "optional": true,
              "type": "integer"
            },
            {
              "name": "scriptLanguage",
              "description": "The language of the script.",
              "experimental": true,
              "optional": true,
              "$ref": "Debugger.ScriptLanguage"
            },
            {
              "name": "debugSymbols",
              "description": "If the scriptLanguage is WebASsembly, the source of debug symbols for the module.",
              "experimental": true,
              "optional": true,
              "$ref": "Debugger.DebugSymbols"
            },
            {
              "name": "embedderName",
              "description": "The name the embedder supplied for this script.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Profiler",
      "dependencies": [
        "Runtime",
        "Debugger"
      ],
      "types": [
        {
          "id": "ProfileNode",
          "description": "Profile node. Holds callsite information, execution statistics and child nodes.",
          "type": "object",
          "properties": [
            {
              "name": "id",
              "description": "Unique id of the node.",
              "type": "integer"
            },
            {
              "name": "callFrame",
              "description": "Function location.",
              "$ref": "Runtime.CallFrame"
            },
            {
              "name": "hitCount",
              "description": "Number of samples where this node was on top of the call stack.",
              "optional": true,
              "type": "integer"
            },
            {
              "name": "children",
              "description": "Child node ids.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "deoptReason",
              "description": "The reason of being not optimized. The function may be deoptimized or marked as don't\noptimize.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "positionTicks",
              "description": "An array of source position ticks.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "PositionTickInfo"
              }
            }
          ]
        },
        {
          "id": "Profile",
          "description": "Profile.",
          "type": "object",
          "properties": [
            {
              "name": "nodes",
              "description": "The list of profile nodes. First item is the root node.",
              "type": "array",
              "items": {
                "$ref": "ProfileNode"
              }
            },
            {
              "name": "startTime",
              "description": "Profiling start timestamp in microseconds.",
              "type": "number"
            },
            {
              "name": "endTime",
              "description": "Profiling end timestamp in microseconds.",
              "type": "number"
            },
            {
              "name": "samples",
              "description": "Ids of samples top nodes.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "name": "timeDeltas",
              "description": "Time intervals between adjacent samples in microseconds. The first delta is relative to the\nprofile startTime.",
              "optional": true,
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          ]
        },
        {
          "id": "PositionTickInfo",
          "description": "Specifies a number of samples attributed to a certain source position.",
          "type": "object",
          "properties": [
            {
              "name": "line",
              "description": "Source line number (1-based).",
              "type": "integer"
            },
            {
              "name": "ticks",
              "description": "Number of samples attributed to the source line.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "CoverageRange",
          "description": "Coverage data for a source range.",
          "type": "object",
          "properties": [
            {
              "name": "startOffset",
              "description": "JavaScript script source offset for the range start.",
              "type": "integer"
            },
            {
              "name": "endOffset",
              "description": "JavaScript script source offset for the range end.",
              "type": "integer"
            },
            {
              "name": "count",
              "description": "Collected execution count of the source range.",
              "type": "integer"
            }
          ]
        },
        {
          "id": "FunctionCoverage",
          "description": "Coverage data for a JavaScript function.",
          "type": "object",
          "properties": [
            {
              "name": "functionName",
              "description": "JavaScript function name.",
              "type": "string"
            },
            {
              "name": "ranges",
              "description": "Source ranges inside the function with coverage data.",
              "type": "array",
              "items": {
                "$ref": "CoverageRange"
              }
            },
            {
              "name": "isBlockCoverage",
              "description": "Whether coverage data for this function has block granularity.",
              "type": "boolean"
            }
          ]
        },
        {
          "id": "ScriptCoverage",
          "description": "Coverage data for a JavaScript script.",
          "type": "object",
          "properties": [
            {
              "name": "scriptId",
              "description": "JavaScript script id.",
              "$ref": "Runtime.ScriptId"
            },
            {
              "name": "url",
              "description": "JavaScript script name or url.",
              "type": "string"
            },
            {
              "name": "functions",
              "description": "Functions contained in the script that has coverage data.",
              "type": "array",
              "items": {
                "$ref": "FunctionCoverage"
              }
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "disable"
        },
        {
          "name": "enable"
        },
        {
          "name": "getBestEffortCoverage",
          "description": "Collect coverage data for the current isolate. The coverage data may be incomplete due to\ngarbage collection.",
          "returns": [
            {
              "name": "result",
              "description": "Coverage data for the current isolate.",
              "type": "array",
              "items": {
                "$ref": "ScriptCoverage"
              }
            }
          ]
        },
        {
          "name": "setSamplingInterval",
          "description": "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.",
          "parameters": [
            {
              "name": "interval",
              "description": "New sampling interval in microseconds.",
              "type": "integer"
            }
          ]
        },
        {
          "name": "start"
        },
        {
          "name": "startPreciseCoverage",
          "description": "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code\ncoverage may be incomplete. Enabling prevents running optimized code and resets execution\ncounters.",
          "parameters": [
            {
              "name": "callCount",
              "description": "Collect accurate call counts beyond simple 'covered' or 'not covered'.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "detailed",
              "description": "Collect block-based coverage.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "allowTriggeredUpdates",
              "description": "Allow the backend to send updates on its own initiative",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "timestamp",
              "description": "Monotonically increasing time (in seconds) when the coverage update was taken in the backend.",
              "type": "number"
            }
          ]
        },
        {
          "name": "stop",
          "returns": [
            {
              "name": "profile",
              "description": "Recorded profile.",
              "$ref": "Profile"
            }
          ]
        },
        {
          "name": "stopPreciseCoverage",
          "description": "Disable precise code coverage. Disabling releases unnecessary execution count records and allows\nexecuting optimized code."
        },
        {
          "name": "takePreciseCoverage",
          "description": "Collect coverage data for the current isolate, and resets execution counters. Precise code\ncoverage needs to have started.",
          "returns": [
            {
              "name": "result",
              "description": "Coverage data for the current isolate.",
              "type": "array",
              "items": {
                "$ref": "ScriptCoverage"
              }
            },
            {
              "name": "timestamp",
              "description": "Monotonically increasing time (in seconds) when the coverage update was taken in the backend.",
              "type": "number"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "consoleProfileFinished",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "location",
              "description": "Location of console.profileEnd().",
              "$ref": "Debugger.Location"
            },
            {
              "name": "profile",
              "$ref": "Profile"
            },
            {
              "name": "title",
              "description": "Profile title passed as an argument to console.profile().",
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "consoleProfileStarted",
          "description": "Sent when new profile recording is started using console.profile() call.",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "location",
              "description": "Location of console.profile().",
              "$ref": "Debugger.Location"
            },
            {
              "name": "title",
              "description": "Profile title passed as an argument to console.profile().",
              "optional": true,
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "domain": "Runtime",
      "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.\nEvaluation results are returned as mirror object that expose object type, string representation\nand unique identifier that can be used for further object reference. Original objects are\nmaintained in memory unless they are either explicitly released or are released along with the\nother objects in their object group.",
      "types": [
        {
          "id": "ScriptId",
          "description": "Unique script identifier.",
          "type": "string"
        },
        {
          "id": "RemoteObjectId",
          "description": "Unique object identifier.",
          "type": "string"
        },
        {
          "id": "UnserializableValue",
          "description": "Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,\n`-Infinity`, and bigint literals.",
          "type": "string"
        },
        {
          "id": "RemoteObject",
          "description": "Mirror object referencing original JavaScript object.",
          "type": "object",
          "properties": [
            {
              "name": "type",
              "description": "Object type.",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "bigint"
              ]
            },
            {
              "name": "subtype",
              "description": "Object subtype hint. Specified for `object` type values only.\nNOTE: If you change anything here, make sure to also update\n`subtype` in `ObjectPreview` and `PropertyPreview` below.",
              "optional": true,
              "type": "string",
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "generator",
                "error",
                "proxy",
                "promise",
                "typedarray",
                "arraybuffer",
                "dataview",
                "webassemblymemory",
                "wasmvalue"
              ]
            },
            {
              "name": "className",
              "description": "Object class (constructor) name. Specified for `object` type values only.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "value",
              "description": "Remote object value in case of primitive values or JSON values (if it was requested).",
              "optional": true,
              "type": "any"
            },
            {
              "name": "unserializableValue",
              "description": "Primitive value which can not be JSON-stringified does not have `value`, but gets this\nproperty.",
              "optional": true,
              "$ref": "UnserializableValue"
            },
            {
              "name": "description",
              "description": "String representation of the object.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "objectId",
              "description": "Unique object identifier (for non-primitive values).",
              "optional": true,
              "$ref": "RemoteObjectId"
            },
            {
              "name": "preview",
              "description": "Preview containing abbreviated property values. Specified for `object` type values only.",
              "experimental": true,
              "optional": true,
              "$ref": "ObjectPreview"
            },
            {
              "name": "customPreview",
              "experimental": true,
              "optional": true,
              "$ref": "CustomPreview"
            }
          ]
        },
        {
          "id": "PropertyDescriptor",
          "description": "Object property descriptor.",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Property name or symbol description.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The value associated with the property.",
              "optional": true,
              "$ref": "RemoteObject"
            },
            {
              "name": "writable",
              "description": "True if the value associated with the property may be changed (data descriptors only).",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "get",
              "description": "A function which serves as a getter for the property, or `undefined` if there is no getter\n(accessor descriptors only).",
              "optional": true,
              "$ref": "RemoteObject"
            },
            {
              "name": "set",
              "description": "A function which serves as a setter for the property, or `undefined` if there is no setter\n(accessor descriptors only).",
              "optional": true,
              "$ref": "RemoteObject"
            },
            {
              "name": "configurable",
              "description": "True if the type of this property descriptor may be changed and if the property may be\ndeleted from the corresponding object.",
              "type": "boolean"
            },
            {
              "name": "enumerable",
              "description": "True if this property shows up during enumeration of the properties on the corresponding\nobject.",
              "type": "boolean"
            },
            {
              "name": "wasThrown",
              "description": "True if the result was thrown during the evaluation.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "isOwn",
              "description": "True if the property is owned for the object.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "symbol",
              "description": "Property symbol object, if the property is of the `symbol` type.",
              "optional": true,
              "$ref": "RemoteObject"
            }
          ]
        },
        {
          "id": "InternalPropertyDescriptor",
          "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "description": "Conventional property name.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The value associated with the property.",
              "optional": true,
              "$ref": "RemoteObject"
            }
          ]
        },
        {
          "id": "CallArgument",
          "description": "Represents function call argument. Either remote object id `objectId`, primitive `value`,\nunserializable primitive value or neither of (for undefined) them should be specified.",
          "type": "object",
          "properties": [
            {
              "name": "value",
              "description": "Primitive value or serializable javascript object.",
              "optional": true,
              "type": "any"
            },
            {
              "name": "unserializableValue",
              "description": "Primitive value which can not be JSON-stringified.",
              "optional": true,
              "$ref": "UnserializableValue"
            },
            {
              "name": "objectId",
              "description": "Remote object handle.",
              "optional": true,
              "$ref": "RemoteObjectId"
            }
          ]
        },
        {
          "id": "ExecutionContextId",
          "description": "Id of an execution context.",
          "type": "integer"
        },
        {
          "id": "ExecutionContextDescription",
          "description": "Description of an isolated world.",
          "type": "object",
          "properties": [
            {
              "name": "id",
              "description": "Unique id of the execution context. It can be used to specify in which execution context\nscript evaluation should be performed.",
              "$ref": "ExecutionContextId"
            },
            {
              "name": "origin",
              "description": "Execution context origin.",
              "type": "string"
            },
            {
              "name": "name",
              "description": "Human readable name describing given context.",
              "type": "string"
            },
            {
              "name": "uniqueId",
              "description": "A system-unique execution context identifier. Unlike the id, this is unique accross\nmultiple processes, so can be reliably used to identify specific context while backend\nperforms a cross-process navigation.",
              "experimental": true,
              "type": "string"
            },
            {
              "name": "auxData",
              "description": "Embedder-specific auxiliary data.",
              "optional": true,
              "type": "object"
            }
          ]
        },
        {
          "id": "ExceptionDetails",
          "description": "Detailed information about exception (or error) that was thrown during script compilation or\nexecution.",
          "type": "object",
          "properties": [
            {
              "name": "exceptionId",
              "description": "Exception id.",
              "type": "integer"
            },
            {
              "name": "text",
              "description": "Exception text, which should be used together with exception object when available.",
              "type": "string"
            },
            {
              "name": "lineNumber",
              "description": "Line number of the exception location (0-based).",
              "type": "integer"
            },
            {
              "name": "columnNumber",
              "description": "Column number of the exception location (0-based).",
              "type": "integer"
            },
            {
              "name": "scriptId",
              "description": "Script ID of the exception location.",
              "optional": true,
              "$ref": "ScriptId"
            },
            {
              "name": "url",
              "description": "URL of the exception location, to be used when the script was not reported.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "stackTrace",
              "description": "JavaScript stack trace if available.",
              "optional": true,
              "$ref": "StackTrace"
            },
            {
              "name": "exception",
              "description": "Exception object if available.",
              "optional": true,
              "$ref": "RemoteObject"
            },
            {
              "name": "executionContextId",
              "description": "Identifier of the context where exception happened.",
              "optional": true,
              "$ref": "ExecutionContextId"
            }
          ]
        },
        {
          "id": "Timestamp",
          "description": "Number of milliseconds since epoch.",
          "type": "number"
        },
        {
          "id": "TimeDelta",
          "description": "Number of milliseconds.",
          "type": "number"
        },
        {
          "id": "CallFrame",
          "description": "Stack entry for runtime errors and assertions.",
          "type": "object",
          "properties": [
            {
              "name": "functionName",
              "description": "JavaScript function name.",
              "type": "string"
            },
            {
              "name": "scriptId",
              "description": "JavaScript script id.",
              "$ref": "ScriptId"
            },
            {
              "name": "url",
              "description": "JavaScript script name or url.",
              "type": "string"
            },
            {
              "name": "lineNumber",
              "description": "JavaScript script line number (0-based).",
              "type": "integer"
            },
            {
              "name": "columnNumber",
              "description": "JavaScript script column number (0-based).",
              "type": "integer"
            }
          ]
        },
        {
          "id": "StackTrace",
          "description": "Call frames for assertions or error messages.",
          "type": "object",
          "properties": [
            {
              "name": "description",
              "description": "String label of this stack trace. For async traces this may be a name of the function that\ninitiated the async call.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "callFrames",
              "description": "JavaScript function name.",
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              }
            },
            {
              "name": "parent",
              "description": "Asynchronous JavaScript stack trace that preceded this stack, if available.",
              "optional": true,
              "$ref": "StackTrace"
            },
            {
              "name": "parentId",
              "description": "Asynchronous JavaScript stack trace that preceded this stack, if available.",
              "experimental": true,
              "optional": true,
              "$ref": "StackTraceId"
            }
          ]
        }
      ],
      "commands": [
        {
          "name": "awaitPromise",
          "description": "Add handler to promise with given promise object id.",
          "parameters": [
            {
              "name": "promiseObjectId",
              "description": "Identifier of the promise.",
              "$ref": "RemoteObjectId"
            },
            {
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Promise result. Will contain rejected value if promise was rejected.",
              "$ref": "RemoteObject"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details if stack strace is available.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "callFunctionOn",
          "description": "Calls function with given declaration on the given object. Object group of the result is\ninherited from the target object.",
          "parameters": [
            {
              "name": "functionDeclaration",
              "description": "Declaration of the function to call.",
              "type": "string"
            },
            {
              "name": "objectId",
              "description": "Identifier of the object to call function on. Either objectId or executionContextId should\nbe specified.",
              "optional": true,
              "$ref": "RemoteObjectId"
            },
            {
              "name": "arguments",
              "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target\nobject.",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "CallArgument"
              }
            },
            {
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object which should be sent by value.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "userGesture",
              "description": "Whether execution should be treated as initiated by user in the UI.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "executionContextId",
              "description": "Specifies execution context which global object will be used to call function on. Either\nexecutionContextId or objectId should be specified.",
              "optional": true,
              "$ref": "ExecutionContextId"
            },
            {
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects. If objectGroup is not\nspecified and objectId is, objectGroup will be inherited from object.",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Call result.",
              "$ref": "RemoteObject"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "compileScript",
          "description": "Compiles expression.",
          "parameters": [
            {
              "name": "expression",
              "description": "Expression to compile.",
              "type": "string"
            },
            {
              "name": "sourceURL",
              "description": "Source url to be set for the script.",
              "type": "string"
            },
            {
              "name": "persistScript",
              "description": "Specifies whether the compiled script should be persisted.",
              "type": "boolean"
            },
            {
              "name": "executionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.",
              "optional": true,
              "$ref": "ExecutionContextId"
            }
          ],
          "returns": [
            {
              "name": "scriptId",
              "description": "Id of the script.",
              "optional": true,
              "$ref": "ScriptId"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "disable",
          "description": "Disables reporting of execution contexts creation."
        },
        {
          "name": "discardConsoleEntries",
          "description": "Discards collected exceptions and console API calls."
        },
        {
          "name": "enable",
          "description": "Enables reporting of execution contexts creation by means of `executionContextCreated` event.\nWhen the reporting gets enabled the event will be sent immediately for each existing execution\ncontext."
        },
        {
          "name": "evaluate",
          "description": "Evaluates expression on global object.",
          "parameters": [
            {
              "name": "expression",
              "description": "Expression to evaluate.",
              "type": "string"
            },
            {
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "includeCommandLineAPI",
              "description": "Determines whether Command Line API should be available during the evaluation.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "contextId",
              "description": "Specifies in which execution context to perform evaluation. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.\nThis is mutually exclusive with `uniqueContextId`, which offers an\nalternative way to identify the execution context that is more reliable\nin a multi-process environment.",
              "optional": true,
              "$ref": "ExecutionContextId"
            },
            {
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object that should be sent by value.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "userGesture",
              "description": "Whether execution should be treated as initiated by user in the UI.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "throwOnSideEffect",
              "description": "Whether to throw an exception if side effect cannot be ruled out during evaluation.\nThis implies `disableBreaks` below.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "timeout",
              "description": "Terminate execution after timing out (number of milliseconds).",
              "experimental": true,
              "optional": true,
              "$ref": "TimeDelta"
            },
            {
              "name": "disableBreaks",
              "description": "Disable breakpoints during execution.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "replMode",
              "description": "Setting this flag to true enables `let` re-declaration and top-level `await`.\nNote that `let` variables can only be re-declared if they originate from\n`replMode` themselves.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "allowUnsafeEvalBlockedByCSP",
              "description": "The Content Security Policy (CSP) for the target might block 'unsafe-eval'\nwhich includes eval(), Function(), setTimeout() and setInterval()\nwhen called with non-callable arguments. This flag bypasses CSP for this\nevaluation and allows unsafe-eval. Defaults to true.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "uniqueContextId",
              "description": "An alternative way to specify the execution context to evaluate in.\nCompared to contextId that may be reused accross processes, this is guaranteed to be\nsystem-unique, so it can be used to prevent accidental evaluation of the expression\nin context different than intended (e.g. as a result of navigation accross process\nboundaries).\nThis is mutually exclusive with `contextId`.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Evaluation result.",
              "$ref": "RemoteObject"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "getProperties",
          "description": "Returns properties of a given object. Object group of the result is inherited from the target\nobject.",
          "parameters": [
            {
              "name": "objectId",
              "description": "Identifier of the object to return properties for.",
              "$ref": "RemoteObjectId"
            },
            {
              "name": "ownProperties",
              "description": "If true, returns properties belonging only to the element itself, not to its prototype\nchain.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "accessorPropertiesOnly",
              "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not\nreturned either.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the results.",
              "experimental": true,
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Object properties.",
              "type": "array",
              "items": {
                "$ref": "PropertyDescriptor"
              }
            },
            {
              "name": "internalProperties",
              "description": "Internal object properties (only of the element itself).",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "InternalPropertyDescriptor"
              }
            },
            {
              "name": "privateProperties",
              "description": "Object private properties.",
              "experimental": true,
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "PrivatePropertyDescriptor"
              }
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "globalLexicalScopeNames",
          "description": "Returns all let, const and class variables from global scope.",
          "parameters": [
            {
              "name": "executionContextId",
              "description": "Specifies in which execution context to lookup global scope variables.",
              "optional": true,
              "$ref": "ExecutionContextId"
            }
          ],
          "returns": [
            {
              "name": "names",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "queryObjects",
          "parameters": [
            {
              "name": "prototypeObjectId",
              "description": "Identifier of the prototype to return objects for.",
              "$ref": "RemoteObjectId"
            },
            {
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release the results.",
              "optional": true,
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "objects",
              "description": "Array with objects.",
              "$ref": "RemoteObject"
            }
          ]
        },
        {
          "name": "releaseObject",
          "description": "Releases remote object with given id.",
          "parameters": [
            {
              "name": "objectId",
              "description": "Identifier of the object to release.",
              "$ref": "RemoteObjectId"
            }
          ]
        },
        {
          "name": "releaseObjectGroup",
          "description": "Releases all remote objects that belong to a given group.",
          "parameters": [
            {
              "name": "objectGroup",
              "description": "Symbolic object group name.",
              "type": "string"
            }
          ]
        },
        {
          "name": "runIfWaitingForDebugger",
          "description": "Tells inspected instance to run if it was waiting for debugger to attach."
        },
        {
          "name": "runScript",
          "description": "Runs script with given id in a given context.",
          "parameters": [
            {
              "name": "scriptId",
              "description": "Id of the script to run.",
              "$ref": "ScriptId"
            },
            {
              "name": "executionContextId",
              "description": "Specifies in which execution context to perform script run. If the parameter is omitted the\nevaluation will be performed in the context of the inspected page.",
              "optional": true,
              "$ref": "ExecutionContextId"
            },
            {
              "name": "objectGroup",
              "description": "Symbolic group name that can be used to release multiple objects.",
              "optional": true,
              "type": "string"
            },
            {
              "name": "silent",
              "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause\nexecution. Overrides `setPauseOnException` state.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "includeCommandLineAPI",
              "description": "Determines whether Command Line API should be available during the evaluation.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "returnByValue",
              "description": "Whether the result is expected to be a JSON object which should be sent by value.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "generatePreview",
              "description": "Whether preview should be generated for the result.",
              "optional": true,
              "type": "boolean"
            },
            {
              "name": "awaitPromise",
              "description": "Whether execution should `await` for resulting value and return once awaited promise is\nresolved.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": [
            {
              "name": "result",
              "description": "Run result.",
              "$ref": "RemoteObject"
            },
            {
              "name": "exceptionDetails",
              "description": "Exception details.",
              "optional": true,
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "setAsyncCallStackDepth",
          "description": "Enables or disables async call stacks tracking.",
          "redirect": "Debugger",
          "parameters": [
            {
              "name": "maxDepth",
              "description": "Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async\ncall stacks (default).",
              "type": "integer"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "consoleAPICalled",
          "description": "Issued when console API was called.",
          "parameters": [
            {
              "name": "type",
              "description": "Type of the call.",
              "type": "string",
              "enum": [
                "log",
                "debug",
                "info",
                "error",
                "warning",
                "dir",
                "dirxml",
                "table",
                "trace",
                "clear",
                "startGroup",
                "startGroupCollapsed",
                "endGroup",
                "assert",
                "profile",
                "profileEnd",
                "count",
                "timeEnd"
              ]
            },
            {
              "name": "args",
              "description": "Call arguments.",
              "type": "array",
              "items": {
                "$ref": "RemoteObject"
              }
            },
            {
              "name": "executionContextId",
              "description": "Identifier of the context where the call was made.",
              "$ref": "ExecutionContextId"
            },
            {
              "name": "timestamp",
              "description": "Call timestamp.",
              "$ref": "Timestamp"
            },
            {
              "name": "stackTrace",
              "description": "Stack trace captured when the call was made. The async stack chain is automatically reported for\nthe following call types: `assert`, `error`, `trace`, `warning`. For other types the async call\nchain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.",
              "optional": true,
              "$ref": "StackTrace"
            },
            {
              "name": "context",
              "description": "Console context descriptor for calls on non-default console context (not console.*):\n'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call\non named context.",
              "experimental": true,
              "optional": true,
              "type": "string"
            }
          ]
        },
        {
          "name": "exceptionRevoked",
          "description": "Issued when unhandled exception was revoked.",
          "parameters": [
            {
              "name": "reason",
              "description": "Reason describing why exception was revoked.",
              "type": "string"
            },
            {
              "name": "exceptionId",
              "description": "The id of revoked exception, as reported in `exceptionThrown`.",
              "type": "integer"
            }
          ]
        },
        {
          "name": "exceptionThrown",
          "description": "Issued when exception was thrown and unhandled.",
          "parameters": [
            {
              "name": "timestamp",
              "description": "Timestamp of the exception.",
              "$ref": "Timestamp"
            },
            {
              "name": "exceptionDetails",
              "$ref": "ExceptionDetails"
            }
          ]
        },
        {
          "name": "executionContextCreated",
          "description": "Issued when new execution context is created.",
          "parameters": [
            {
              "name": "context",
              "description": "A newly created execution context.",
              "$ref": "ExecutionContextDescription"
            }
          ]
        },
        {
          "name": "executionContextDestroyed",
          "description": "Issued when execution context is destroyed.",
          "parameters": [
            {
              "name": "executionContextId",
              "description": "Id of the destroyed context",
              "$ref": "ExecutionContextId"
            }
          ]
        },
        {
          "name": "executionContextsCleared",
          "description": "Issued when all executionContexts were cleared in browser"
        },
        {
          "name": "inspectRequested",
          "description": "Issued when object should be inspected (for example, as a result of inspect() command line API\ncall).",
          "parameters": [
            {
              "name": "object",
              "$ref": "RemoteObject"
            },
            {
              "name": "hints",
              "type": "object"
            }
          ]
        }
      ]
    }
  ]
}